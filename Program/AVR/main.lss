
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  000039d8  00003a8c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000039d8  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002a5  0080011c  0080011c  00003aa8  2**0
                  ALLOC
  3 .eeprom       00000024  00810000  00810000  00003aa8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .comment      0000008c  00000000  00000000  00003acc  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003b58  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000004c8  00000000  00000000  00003b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009581  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00002829  00000000  00000000  0000d5e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000046b0  00000000  00000000  0000fe0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000d6c  00000000  00000000  000144bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003334  00000000  00000000  00015228  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004f7c  00000000  00000000  0001855c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000630  00000000  00000000  0001d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	64 c2       	rjmp	.+1224   	; 0x4ca <__ctors_end>
       2:	00 00       	nop
       4:	7e c2       	rjmp	.+1276   	; 0x502 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c2       	rjmp	.+1272   	; 0x502 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c2       	rjmp	.+1268   	; 0x502 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c2       	rjmp	.+1264   	; 0x502 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c2       	rjmp	.+1260   	; 0x502 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c2       	rjmp	.+1256   	; 0x502 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c2       	rjmp	.+1252   	; 0x502 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c2       	rjmp	.+1248   	; 0x502 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c2       	rjmp	.+1244   	; 0x502 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 1a 0e 	jmp	0x1c34	; 0x1c34 <__vector_10>
      2c:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__vector_11>
      30:	68 c2       	rjmp	.+1232   	; 0x502 <__bad_interrupt>
      32:	00 00       	nop
      34:	66 c2       	rjmp	.+1228   	; 0x502 <__bad_interrupt>
      36:	00 00       	nop
      38:	64 c2       	rjmp	.+1224   	; 0x502 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c2       	rjmp	.+1220   	; 0x502 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_16>
      44:	5e c2       	rjmp	.+1212   	; 0x502 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c2       	rjmp	.+1208   	; 0x502 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c2       	rjmp	.+1204   	; 0x502 <__bad_interrupt>
      4e:	00 00       	nop
      50:	0c 94 4d 08 	jmp	0x109a	; 0x109a <__vector_20>
      54:	56 c2       	rjmp	.+1196   	; 0x502 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c2       	rjmp	.+1192   	; 0x502 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c2       	rjmp	.+1188   	; 0x502 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c2       	rjmp	.+1184   	; 0x502 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c2       	rjmp	.+1180   	; 0x502 <__bad_interrupt>
      66:	00 00       	nop
      68:	4c c2       	rjmp	.+1176   	; 0x502 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4a c2       	rjmp	.+1172   	; 0x502 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c2       	rjmp	.+1168   	; 0x502 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c2       	rjmp	.+1164   	; 0x502 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c2       	rjmp	.+1160   	; 0x502 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c2       	rjmp	.+1156   	; 0x502 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c2       	rjmp	.+1152   	; 0x502 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c2       	rjmp	.+1148   	; 0x502 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c2       	rjmp	.+1144   	; 0x502 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	3a c2       	rjmp	.+1140   	; 0x502 <__bad_interrupt>
      8e:	00 00       	nop
      90:	38 c2       	rjmp	.+1136   	; 0x502 <__bad_interrupt>
      92:	00 00       	nop
      94:	36 c2       	rjmp	.+1132   	; 0x502 <__bad_interrupt>
      96:	00 00       	nop
      98:	34 c2       	rjmp	.+1128   	; 0x502 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	32 c2       	rjmp	.+1124   	; 0x502 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	30 c2       	rjmp	.+1120   	; 0x502 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	2e c2       	rjmp	.+1116   	; 0x502 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	2c c2       	rjmp	.+1112   	; 0x502 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__trampolines_end>:
      ac:	25 73       	andi	r18, 0x35	; 53
      ae:	0d 0a       	sbc	r0, r29
      b0:	00 25       	eor	r16, r0

000000b1 <__c.4935>:
      b1:	25 63 20 25 75 20 25 75 20 00                       %c %u %u .

000000bb <__c.4933>:
      bb:	25 63 20 25 73 20 00                                %c %s .

000000c2 <__c.4931>:
      c2:	25 63 20 25 73 20 00                                %c %s .

000000c9 <__c.4922>:
      c9:	45 72 72 6f 72 3a 20 55 6e 72 65 63 6f 67 6e 69     Error: Unrecogni
      d9:	7a 65 64 20 43 6f 6d 6d 61 6e 64 3a 20 25 63 0d     zed Command: %c.
      e9:	0a 00                                               ..

000000eb <__c.4919>:
      eb:	4f 4b 0d 0a 00                                      OK...

000000f0 <__c.4917>:
      f0:	54 20 2d 2d 2d 2d 2d 2d 20 20 52 48 20 2d 2d 2d     T ------  RH ---
     100:	2d 2d 2d 20 00                                      --- .

00000105 <__c.4915>:
     105:	52 48 20 25 73 20 25 25 00                          RH %s %%.

0000010e <__c.4913>:
     10e:	54 20 25 73 25 63 43 20 00                          T %s%cC .

00000117 <__c.4911>:
     117:	25 73 00                                            %s.

0000011a <__c.4909>:
     11a:	54 69 63 6b 73 20 25 73 20 2f 20 00                 Ticks %s / .

00000126 <__c.4907>:
     126:	43 61 70 61 63 69 74 79 20 25 73 20 70 46 00        Capacity %s pF.

00000135 <__c.4905>:
     135:	54 69 6d 65 53 74 61 6d 70 20 20 25 73 00           TimeStamp  %s.

00000143 <__c.4903>:
     143:	50 20 25 73 2f 31 30 30 00                          P %s/100.

0000014c <__c.4901>:
     14c:	74 20 25 73 20 00                                   t %s .

00000152 <__c.4893>:
     152:	4f 4b 0d 0a 00                                      OK...

00000157 <__c.4889>:
     157:	4f 4b 0d 0a 00                                      OK...

0000015c <__c.4886>:
     15c:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 55 6e     Device Error: Un
     16c:	72 65 63 6f 67 6e 69 7a 65 64 20 43 6f 6d 6d 61     recognized Comma
     17c:	6e 64 3a 20 25 63 0d 0a 00                          nd: %c...

00000185 <__c.4883>:
     185:	4f 4b 0d 0a 00                                      OK...

0000018a <__c.4880>:
     18a:	4f 4b 0d 0a 00                                      OK...

0000018f <__c.4877>:
     18f:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 53 48     Device Error: SH
     19f:	54 43 33 20 6d 6f 64 75 6c 65 20 75 6e 72 65 67     TC3 module unreg
     1af:	69 73 74 65 72 65 64 0d 0a 00                       istered...

000001b9 <__c.4875>:
     1b9:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 52 65     Device Error: Re
     1c9:	61 64 20 74 65 6d 70 65 72 61 74 75 72 65 20 75     ad temperature u
     1d9:	6e 65 78 70 65 63 74 65 64 20 65 72 72 6f 72 3a     nexpected error:
     1e9:	20 25 75 0d 0a 00                                    %u...

000001ef <__c.4873>:
     1ef:	25 73 0d 0a 00                                      %s...

000001f4 <__c.4871>:
     1f4:	25 73 20 00                                         %s .

000001f8 <__c.4866>:
     1f8:	4f 4b 0d 0a 00                                      OK...

000001fd <__c.4863>:
     1fd:	25 73 0d 0a 00                                      %s...

00000202 <__c.4861>:
     202:	25 73 20 00                                         %s .

00000206 <__c.4859>:
     206:	25 73 20 00                                         %s .

0000020a <__c.4857>:
     20a:	25 73 20 00                                         %s .

0000020e <__c.4854>:
     20e:	4f 4b 0d 0a 00                                      OK...

00000213 <__c.4850>:
     213:	25 6c 75 0d 0a 00                                   %lu...

00000219 <__c.4848>:
     219:	25 73 20 00                                         %s .

0000021d <__c.4846>:
     21d:	25 73 20 00                                         %s .

00000221 <__c.4844>:
     221:	25 73 20 00                                         %s .

00000225 <__c.4842>:
     225:	25 73 20 00                                         %s .

00000229 <__c.4835>:
     229:	44 65 76 69 63 65 20 45 72 72 6f 72 3a 20 55 53     Device Error: US
     239:	42 20 42 75 66 66 65 72 20 4f 76 65 72 66 6c 6f     B Buffer Overflo
     249:	77 21 0d 0a 00                                      w!...

0000024e <__c.4827>:
     24e:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     25e:	2a 2a 2a 2a 00                                      ****.

00000263 <__c.4825>:
     263:	2a 20 20 50 47 20 32 30 32 32 20 2f 20 32 30 32     *  PG 2022 / 202
     273:	33 20 20 2a 00                                      3  *.

00000278 <__c.4823>:
     278:	2a 20 20 43 61 70 61 63 69 74 79 53 65 6e 73 6f     *  CapacitySenso
     288:	72 20 20 2a 00                                      r  *.

0000028d <__c.4821>:
     28d:	2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a 2a     ****************
     29d:	2a 2a 2a 2a 00                                      ****.

000002a2 <Corrections_PROGMEM>:
     2a2:	45 47 4e 40 78 7a 8f c0 83 c0 32 40 1b 9e 94 c0     EGN@xz....2@....

000002b2 <Constants_PROGMEM>:
     2b2:	66 66 56 40 f0 a7 d6 3f 6a bc a0 40 00 00 00 00     ffV@...?j..@....
     2c2:	7c ea 02 00                                         |...

000002c6 <ProductString>:
     2c6:	38 03 43 00 61 00 70 00 61 00 63 00 69 00 74 00     8.C.a.p.a.c.i.t.
     2d6:	79 00 53 00 65 00 6e 00 73 00 6f 00 72 00 5f 00     y.S.e.n.s.o.r._.
     2e6:	50 00 47 00 5f 00 32 00 30 00 32 00 33 00 2f 00     P.G._.2.0.2.3./.
     2f6:	32 00 30 00 32 00 34 00 00 00                       2.0.2.4...

00000300 <ManufacturerString>:
     300:	3e 03 53 00 31 00 37 00 39 00 39 00 39 00 31 00     >.S.1.7.9.9.9.1.
     310:	20 00 42 00 6f 00 72 00 6f 00 77 00 69 00 63 00      .B.o.r.o.w.i.c.
     320:	6b 00 69 00 20 00 41 00 72 00 6b 00 61 00 64 00     k.i. .A.r.k.a.d.
     330:	69 00 75 00 73 00 7a 00 20 00 50 00 47 00 00 00     i.u.s.z. .P.G...

00000340 <LanguageString>:
     340:	04 03 09 04                                         ....

00000344 <ConfigurationDescriptor>:
     344:	09 02 3e 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..>.....2.......
     354:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
     364:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
     374:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

00000382 <DeviceDescriptor>:
     382:	12 01 10 01 02 00 00 08 eb 03 44 20 01 00 01 02     ..........D ....
     392:	dc 01                                               ..

00000394 <pstr_nan>:
     394:	4e 41 4e                                            NAN

00000397 <pstr_inity>:
     397:	49 4e 49 54 59                                      INITY

0000039c <pstr_inf>:
     39c:	49 4e 46                                            INF

0000039f <pwr_m10>:
     39f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
     3af:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

000003b7 <pwr_p10>:
     3b7:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
     3c7:	ca 1b 0e 5a ae c5 9d 74 00 40 7a 10 f3 5a 00 a0     ...Z...t.@z..Z..
     3d7:	72 4e 18 09 00 10 a5 d4 e8 00 00 e8 76 48 17 00     rN..........vH..
     3e7:	00 e4 0b 54 02 00 00 ca 9a 3b 00 00 00 e1 f5 05     ...T.....;......
     3f7:	00 00 80 96 98 00 00 00 40 42 0f 00 00 00 a0 86     ........@B......
     407:	01 00 00 00 10 27 00 00 00 00 e8 03 00 00 00 00     .....'..........
     417:	64 00 00 00 00 00 0a 00 00 00 00 00 01 00 00 00     d...............
     427:	00 00 2c 76 d8 88 dc 67 4f 08 23 df c1 df ae 59     ..,v...gO.#....Y
     437:	e1 b1 b7 96 e5 e3 e4 53 c6 3a e6 51 99 76 96 e8     .......S.:.Q.v..
     447:	e6 c2 84 26 eb 89 8c 9b 62 ed 40 7c 6f fc ef bc     ...&....b.@|o...
     457:	9c 9f 40 f2 ba a5 6f a5 f4 90 05 5a 2a f7 5c 93     ..@...o....Z*.\.
     467:	6b 6c f9 67 6d c1 1b fc e0 e4 0d 47 fe f5 20 e6     kl.gm......G.. .
     477:	b5 00 d0 ed 90 2e 03 00 94 35 77 05 00 80 84 1e     .........5w.....
     487:	08 00 00 20 4e 0a 00 00 00 c8 0c 33 33 33 33 0f     ... N......3333.
     497:	98 6e 12 83 11 41 ef 8d 21 14 89 3b e6 55 16 cf     .n...A..!..;.U..
     4a7:	fe e6 db 18 d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb     ......K8..|.....
     4b7:	e4 24 20 32 84 72 5e 22 81 00 c9 f1 24 ec a1 e5     .$ 2.r^"....$...
     4c7:	3d 27 00                                            ='.

000004ca <__ctors_end>:
     4ca:	11 24       	eor	r1, r1
     4cc:	1f be       	out	0x3f, r1	; 63
     4ce:	cf ef       	ldi	r28, 0xFF	; 255
     4d0:	da e0       	ldi	r29, 0x0A	; 10
     4d2:	de bf       	out	0x3e, r29	; 62
     4d4:	cd bf       	out	0x3d, r28	; 61

000004d6 <__do_copy_data>:
     4d6:	11 e0       	ldi	r17, 0x01	; 1
     4d8:	a0 e0       	ldi	r26, 0x00	; 0
     4da:	b1 e0       	ldi	r27, 0x01	; 1
     4dc:	e8 ed       	ldi	r30, 0xD8	; 216
     4de:	f9 e3       	ldi	r31, 0x39	; 57
     4e0:	02 c0       	rjmp	.+4      	; 0x4e6 <__do_copy_data+0x10>
     4e2:	05 90       	lpm	r0, Z+
     4e4:	0d 92       	st	X+, r0
     4e6:	ac 31       	cpi	r26, 0x1C	; 28
     4e8:	b1 07       	cpc	r27, r17
     4ea:	d9 f7       	brne	.-10     	; 0x4e2 <__do_copy_data+0xc>

000004ec <__do_clear_bss>:
     4ec:	23 e0       	ldi	r18, 0x03	; 3
     4ee:	ac e1       	ldi	r26, 0x1C	; 28
     4f0:	b1 e0       	ldi	r27, 0x01	; 1
     4f2:	01 c0       	rjmp	.+2      	; 0x4f6 <.do_clear_bss_start>

000004f4 <.do_clear_bss_loop>:
     4f4:	1d 92       	st	X+, r1

000004f6 <.do_clear_bss_start>:
     4f6:	a1 3c       	cpi	r26, 0xC1	; 193
     4f8:	b2 07       	cpc	r27, r18
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <.do_clear_bss_loop>
     4fc:	cb d0       	rcall	.+406    	; 0x694 <main>
     4fe:	0c 94 ea 1c 	jmp	0x39d4	; 0x39d4 <_exit>

00000502 <__bad_interrupt>:
     502:	7e cd       	rjmp	.-1284   	; 0x0 <__vectors>

00000504 <dtostr>:
	}

	return M + (W - W % P) / 100.;
}
char * dtostr(double N, byte AfterPoint)
{
     504:	0f 93       	push	r16
     506:	1f 93       	push	r17
     508:	24 2f       	mov	r18, r20
	static char double_buf[40];
	dtostrf(N, -39, AfterPoint, double_buf);
     50a:	0c e1       	ldi	r16, 0x1C	; 28
     50c:	11 e0       	ldi	r17, 0x01	; 1
     50e:	49 ed       	ldi	r20, 0xD9	; 217
     510:	0e 94 9e 14 	call	0x293c	; 0x293c <dtostrf>
     514:	f8 01       	movw	r30, r16
     516:	80 e0       	ldi	r24, 0x00	; 0
     518:	90 e0       	ldi	r25, 0x00	; 0
	for (byte i = 0; i < 20; i++)
	{
		if (double_buf[i] == ' ')
     51a:	21 91       	ld	r18, Z+
     51c:	20 32       	cpi	r18, 0x20	; 32
     51e:	29 f4       	brne	.+10     	; 0x52a <dtostr+0x26>
		{
			double_buf[i] = 0;
     520:	fc 01       	movw	r30, r24
     522:	e4 5e       	subi	r30, 0xE4	; 228
     524:	fe 4f       	sbci	r31, 0xFE	; 254
     526:	10 82       	st	Z, r1
			break;
     528:	04 c0       	rjmp	.+8      	; 0x532 <dtostr+0x2e>
     52a:	01 96       	adiw	r24, 0x01	; 1
}
char * dtostr(double N, byte AfterPoint)
{
	static char double_buf[40];
	dtostrf(N, -39, AfterPoint, double_buf);
	for (byte i = 0; i < 20; i++)
     52c:	84 31       	cpi	r24, 0x14	; 20
     52e:	91 05       	cpc	r25, r1
     530:	a1 f7       	brne	.-24     	; 0x51a <dtostr+0x16>
			double_buf[i] = 0;
			break;
		}
	}
	return double_buf;
}
     532:	8c e1       	ldi	r24, 0x1C	; 28
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <TemperatureMeasurement>:
	return Status_OK;
}

/* Temperature & Humidity Measuring Function */
STATUS_t TemperatureMeasurement(void)
{
     53c:	8f 92       	push	r8
     53e:	9f 92       	push	r9
     540:	af 92       	push	r10
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
	if (System.IsSHTRegistered)
     550:	80 91 9e 02 	lds	r24, 0x029E
     554:	81 ff       	sbrs	r24, 1
     556:	92 c0       	rjmp	.+292    	; 0x67c <TemperatureMeasurement+0x140>
	{
		SHT_STATUS_t Status = sht_meas();
     558:	0e 94 ba 0a 	call	0x1574	; 0x1574 <sht_meas>
		if (Status == SHT_Status_Nominal)
     55c:	81 11       	cpse	r24, r1
     55e:	86 c0       	rjmp	.+268    	; 0x66c <TemperatureMeasurement+0x130>
		{
			System.Temperature = Round(sht_temperature(), PRECISION);
     560:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <sht_temperature>
     564:	4b 01       	movw	r8, r22
     566:	5c 01       	movw	r10, r24

/* Base Conversions Functions */
double Round(double N, double Precision)
{
	int M = (int)N;
	int W = (int)((N - M) * 100);
     568:	0e 94 33 13 	call	0x2666	; 0x2666 <__fixsfsi>
     56c:	07 2e       	mov	r0, r23
     56e:	00 0c       	add	r0, r0
     570:	88 0b       	sbc	r24, r24
     572:	99 0b       	sbc	r25, r25
     574:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatsisf>
     578:	6b 01       	movw	r12, r22
     57a:	7c 01       	movw	r14, r24
     57c:	9b 01       	movw	r18, r22
     57e:	ac 01       	movw	r20, r24
     580:	c5 01       	movw	r24, r10
     582:	b4 01       	movw	r22, r8
     584:	0e 94 66 12 	call	0x24cc	; 0x24cc <__subsf3>
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	48 ec       	ldi	r20, 0xC8	; 200
     58e:	52 e4       	ldi	r21, 0x42	; 66
     590:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     594:	0e 94 33 13 	call	0x2666	; 0x2666 <__fixsfsi>
     598:	8b 01       	movw	r16, r22
     59a:	9c 01       	movw	r18, r24
	int P = (int)(Precision * 100);
	int T = W % P;
     59c:	cb 01       	movw	r24, r22
     59e:	6a e0       	ldi	r22, 0x0A	; 10
     5a0:	70 e0       	ldi	r23, 0x00	; 0
     5a2:	0e 94 55 14 	call	0x28aa	; 0x28aa <__divmodhi4>
     5a6:	b8 01       	movw	r22, r16
     5a8:	68 1b       	sub	r22, r24
     5aa:	79 0b       	sbc	r23, r25

	if (T > (P >> 1))
     5ac:	06 97       	sbiw	r24, 0x06	; 6
     5ae:	14 f0       	brlt	.+4      	; 0x5b4 <TemperatureMeasurement+0x78>
	{
		return M + (W - W % P + P) / 100.;
     5b0:	66 5f       	subi	r22, 0xF6	; 246
     5b2:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	return M + (W - W % P) / 100.;
     5b4:	07 2e       	mov	r0, r23
     5b6:	00 0c       	add	r0, r0
     5b8:	88 0b       	sbc	r24, r24
     5ba:	99 0b       	sbc	r25, r25
     5bc:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatsisf>
     5c0:	20 e0       	ldi	r18, 0x00	; 0
     5c2:	30 e0       	ldi	r19, 0x00	; 0
     5c4:	48 ec       	ldi	r20, 0xC8	; 200
     5c6:	52 e4       	ldi	r21, 0x42	; 66
     5c8:	0e 94 cb 12 	call	0x2596	; 0x2596 <__divsf3>
     5cc:	a7 01       	movw	r20, r14
     5ce:	96 01       	movw	r18, r12
     5d0:	0e 94 67 12 	call	0x24ce	; 0x24ce <__addsf3>
	if (System.IsSHTRegistered)
	{
		SHT_STATUS_t Status = sht_meas();
		if (Status == SHT_Status_Nominal)
		{
			System.Temperature = Round(sht_temperature(), PRECISION);
     5d4:	60 93 a4 03 	sts	0x03A4, r22
     5d8:	70 93 a5 03 	sts	0x03A5, r23
     5dc:	80 93 a6 03 	sts	0x03A6, r24
     5e0:	90 93 a7 03 	sts	0x03A7, r25
			System.Humidity = Round(sht_humidity(), PRECISION);
     5e4:	0e 94 6a 0b 	call	0x16d4	; 0x16d4 <sht_humidity>
     5e8:	4b 01       	movw	r8, r22
     5ea:	5c 01       	movw	r10, r24

/* Base Conversions Functions */
double Round(double N, double Precision)
{
	int M = (int)N;
	int W = (int)((N - M) * 100);
     5ec:	0e 94 33 13 	call	0x2666	; 0x2666 <__fixsfsi>
     5f0:	07 2e       	mov	r0, r23
     5f2:	00 0c       	add	r0, r0
     5f4:	88 0b       	sbc	r24, r24
     5f6:	99 0b       	sbc	r25, r25
     5f8:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatsisf>
     5fc:	6b 01       	movw	r12, r22
     5fe:	7c 01       	movw	r14, r24
     600:	9b 01       	movw	r18, r22
     602:	ac 01       	movw	r20, r24
     604:	c5 01       	movw	r24, r10
     606:	b4 01       	movw	r22, r8
     608:	0e 94 66 12 	call	0x24cc	; 0x24cc <__subsf3>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	48 ec       	ldi	r20, 0xC8	; 200
     612:	52 e4       	ldi	r21, 0x42	; 66
     614:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
     618:	0e 94 33 13 	call	0x2666	; 0x2666 <__fixsfsi>
     61c:	8b 01       	movw	r16, r22
     61e:	9c 01       	movw	r18, r24
	int P = (int)(Precision * 100);
	int T = W % P;
     620:	cb 01       	movw	r24, r22
     622:	6a e0       	ldi	r22, 0x0A	; 10
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	0e 94 55 14 	call	0x28aa	; 0x28aa <__divmodhi4>
     62a:	b8 01       	movw	r22, r16
     62c:	68 1b       	sub	r22, r24
     62e:	79 0b       	sbc	r23, r25

	if (T > (P >> 1))
     630:	06 97       	sbiw	r24, 0x06	; 6
     632:	14 f0       	brlt	.+4      	; 0x638 <TemperatureMeasurement+0xfc>
	{
		return M + (W - W % P + P) / 100.;
     634:	66 5f       	subi	r22, 0xF6	; 246
     636:	7f 4f       	sbci	r23, 0xFF	; 255
	}

	return M + (W - W % P) / 100.;
     638:	07 2e       	mov	r0, r23
     63a:	00 0c       	add	r0, r0
     63c:	88 0b       	sbc	r24, r24
     63e:	99 0b       	sbc	r25, r25
     640:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatsisf>
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	48 ec       	ldi	r20, 0xC8	; 200
     64a:	52 e4       	ldi	r21, 0x42	; 66
     64c:	0e 94 cb 12 	call	0x2596	; 0x2596 <__divsf3>
     650:	a7 01       	movw	r20, r14
     652:	96 01       	movw	r18, r12
     654:	0e 94 67 12 	call	0x24ce	; 0x24ce <__addsf3>
	{
		SHT_STATUS_t Status = sht_meas();
		if (Status == SHT_Status_Nominal)
		{
			System.Temperature = Round(sht_temperature(), PRECISION);
			System.Humidity = Round(sht_humidity(), PRECISION);
     658:	60 93 a8 03 	sts	0x03A8, r22
     65c:	70 93 a9 03 	sts	0x03A9, r23
     660:	80 93 aa 03 	sts	0x03AA, r24
     664:	90 93 ab 03 	sts	0x03AB, r25
     668:	80 e0       	ldi	r24, 0x00	; 0
     66a:	09 c0       	rjmp	.+18     	; 0x67e <TemperatureMeasurement+0x142>
			return Status_OK;
		}
		else
		{
			System.IsSHTRegistered = false;
     66c:	80 91 9e 02 	lds	r24, 0x029E
     670:	8d 7f       	andi	r24, 0xFD	; 253
     672:	80 93 9e 02 	sts	0x029E, r24
			twi_error();
     676:	97 d5       	rcall	.+2862   	; 0x11a6 <twi_error>
			return Status_Error;
     678:	81 e0       	ldi	r24, 0x01	; 1
     67a:	01 c0       	rjmp	.+2      	; 0x67e <TemperatureMeasurement+0x142>
		}
	}
	return Status_Unregistered;
     67c:	83 e0       	ldi	r24, 0x03	; 3
}
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	ff 90       	pop	r15
     684:	ef 90       	pop	r14
     686:	df 90       	pop	r13
     688:	cf 90       	pop	r12
     68a:	bf 90       	pop	r11
     68c:	af 90       	pop	r10
     68e:	9f 90       	pop	r9
     690:	8f 90       	pop	r8
     692:	08 95       	ret

00000694 <main>:
volatile uint8_t  timer_ovf, stop_meas, m_gate;
volatile uint16_t pulses_ts, n_ts, n_ts_first;

/* Main Function */
int main(void)
{
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	cd b7       	in	r28, 0x3d	; 61
     69a:	de b7       	in	r29, 0x3e	; 62
     69c:	a7 97       	sbiw	r28, 0x27	; 39
     69e:	0f b6       	in	r0, 0x3f	; 63
     6a0:	f8 94       	cli
     6a2:	de bf       	out	0x3e, r29	; 62
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	cd bf       	out	0x3d, r28	; 61
}
/* Base Initialization Functions */
void Init_IO(void)
{
	/* IO initialization */
	MEASURING_SYSTEM_OFF;
     6a8:	46 9a       	sbi	0x08, 6	; 8
	LEDS_OFF;
     6aa:	47 98       	cbi	0x08, 7	; 8
     6ac:	5d 98       	cbi	0x0b, 5	; 11
     6ae:	28 98       	cbi	0x05, 0	; 5
	SET_INTERNAL_PULLUPS;
     6b0:	5f 9a       	sbi	0x0b, 7	; 11
     6b2:	5e 9a       	sbi	0x0b, 6	; 11
	SET_PORTS_DIR;
     6b4:	3e 9a       	sbi	0x07, 6	; 7
     6b6:	27 9a       	sbi	0x04, 7	; 4
     6b8:	3f 9a       	sbi	0x07, 7	; 7
     6ba:	55 9a       	sbi	0x0a, 5	; 10
     6bc:	20 9a       	sbi	0x04, 0	; 4
}
void Init_Pheripherals(void)
{
	twi_init(TWI_FREQ_400kHz);
     6be:	60 e8       	ldi	r22, 0x80	; 128
     6c0:	7a e1       	ldi	r23, 0x1A	; 26
     6c2:	86 e0       	ldi	r24, 0x06	; 6
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	64 d5       	rcall	.+2760   	; 0x1190 <twi_init>
	System.IsLCDRegistered = twi_detect(LCD_ADDR);
     6c8:	87 e2       	ldi	r24, 0x27	; 39
     6ca:	a5 d5       	rcall	.+2890   	; 0x1216 <twi_detect>
     6cc:	90 91 9e 02 	lds	r25, 0x029E
     6d0:	80 fb       	bst	r24, 0
     6d2:	90 f9       	bld	r25, 0
     6d4:	90 93 9e 02 	sts	0x029E, r25
	System.IsSHTRegistered = twi_detect(SHT_ADDR);
     6d8:	80 e7       	ldi	r24, 0x70	; 112
     6da:	9d d5       	rcall	.+2874   	; 0x1216 <twi_detect>
     6dc:	90 91 9e 02 	lds	r25, 0x029E
     6e0:	80 fb       	bst	r24, 0
     6e2:	91 f9       	bld	r25, 1
     6e4:	90 93 9e 02 	sts	0x029E, r25

	/* Device initialization */
	if (System.IsSHTRegistered)
     6e8:	80 91 9e 02 	lds	r24, 0x029E
     6ec:	81 fd       	sbrc	r24, 1
	{
		sht_init();
     6ee:	28 d7       	rcall	.+3664   	; 0x1540 <sht_init>
	}
	if (System.IsLCDRegistered)
     6f0:	80 91 9e 02 	lds	r24, 0x029E
     6f4:	80 ff       	sbrs	r24, 0
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <main+0x6c>
	{
		lcd_init();
     6f8:	5f d6       	rcall	.+3262   	; 0x13b8 <lcd_init>
		lcd_create_stream(&LCD_Stream);
     6fa:	8f e4       	ldi	r24, 0x4F	; 79
     6fc:	92 e0       	ldi	r25, 0x02	; 2
     6fe:	44 d6       	rcall	.+3208   	; 0x1388 <lcd_create_stream>
volatile uint8_t  timer_ovf, stop_meas, m_gate;
volatile uint16_t pulses_ts, n_ts, n_ts_first;

/* Main Function */
int main(void)
{
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
void Init_Variables(void)
{
	/* Buffors initialization */
	for (byte i = 0; i < MAX_SAMPLES_BUF_SIZE; i++)
	{
		System.Samples[i] = 0;
     704:	fc 01       	movw	r30, r24
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	e2 56       	subi	r30, 0x62	; 98
     70c:	fd 4f       	sbci	r31, 0xFD	; 253
     70e:	12 82       	std	Z+2, r1	; 0x02
     710:	11 82       	std	Z+1, r1	; 0x01
     712:	01 96       	adiw	r24, 0x01	; 1
	}
}
void Init_Variables(void)
{
	/* Buffors initialization */
	for (byte i = 0; i < MAX_SAMPLES_BUF_SIZE; i++)
     714:	82 38       	cpi	r24, 0x82	; 130
     716:	91 05       	cpc	r25, r1
     718:	a9 f7       	brne	.-22     	; 0x704 <main+0x70>
	{
		System.Samples[i] = 0;
	}
	/* Variables initialization */
	System.IsCMDReceived = false;
     71a:	80 91 9e 02 	lds	r24, 0x029E
     71e:	87 7f       	andi	r24, 0xF7	; 247
     720:	80 93 9e 02 	sts	0x029E, r24
	System.IsMeasurementEnd = false;
     724:	80 91 9e 02 	lds	r24, 0x029E
     728:	8f 7e       	andi	r24, 0xEF	; 239
     72a:	80 93 9e 02 	sts	0x029E, r24
	System.IsHostReady  = false;
     72e:	80 91 9e 02 	lds	r24, 0x029E
     732:	8b 7f       	andi	r24, 0xFB	; 251
     734:	80 93 9e 02 	sts	0x029E, r24
	System.Temperature = -45.0;
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	a4 e3       	ldi	r26, 0x34	; 52
     73e:	b2 ec       	ldi	r27, 0xC2	; 194
     740:	80 93 a4 03 	sts	0x03A4, r24
     744:	90 93 a5 03 	sts	0x03A5, r25
     748:	a0 93 a6 03 	sts	0x03A6, r26
     74c:	b0 93 a7 03 	sts	0x03A7, r27
	System.Humidity = 0.0;
     750:	10 92 a8 03 	sts	0x03A8, r1
     754:	10 92 a9 03 	sts	0x03A9, r1
     758:	10 92 aa 03 	sts	0x03AA, r1
     75c:	10 92 ab 03 	sts	0x03AB, r1
	RingBuffer_Init(&USB_Buffer, Buffer, MAX_USB_BUF_SIZE);
     760:	40 e8       	ldi	r20, 0x80	; 128
     762:	50 e0       	ldi	r21, 0x00	; 0
     764:	6f ec       	ldi	r22, 0xCF	; 207
     766:	71 e0       	ldi	r23, 0x01	; 1
     768:	85 ec       	ldi	r24, 0xC5	; 197
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	bc d7       	rcall	.+3960   	; 0x16e6 <RingBuffer_Init>
	/* Constants Values from EEPROM */
	READ_CONSTANTS__EEMEM;
     76e:	44 e1       	ldi	r20, 0x14	; 20
     770:	50 e0       	ldi	r21, 0x00	; 0
     772:	60 e1       	ldi	r22, 0x10	; 16
     774:	70 e0       	ldi	r23, 0x00	; 0
     776:	8b e7       	ldi	r24, 0x7B	; 123
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__eerd_block_m32u4>
	/* Corrections Values from EEPROM */
	READ_CORRECTIONS__EEMEM;
     77e:	40 e1       	ldi	r20, 0x10	; 16
     780:	50 e0       	ldi	r21, 0x00	; 0
     782:	60 e0       	ldi	r22, 0x00	; 0
     784:	70 e0       	ldi	r23, 0x00	; 0
     786:	8b e6       	ldi	r24, 0x6B	; 107
     788:	92 e0       	ldi	r25, 0x02	; 2
     78a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__eerd_block_m32u4>
//READ_CONSTANTS__PGM;
//READ_CORRECTIONS__PGM;
void Init_USB(void)
{
	/* USB initialization */
	cbi(MCUSR, WDRF);
     78e:	84 b7       	in	r24, 0x34	; 52
     790:	87 7f       	andi	r24, 0xF7	; 247
     792:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     794:	88 e1       	ldi	r24, 0x18	; 24
     796:	0f b6       	in	r0, 0x3f	; 63
     798:	f8 94       	cli
     79a:	80 93 60 00 	sts	0x0060, r24
     79e:	10 92 60 00 	sts	0x0060, r1
     7a2:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	80 e8       	ldi	r24, 0x80	; 128
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	80 93 61 00 	sts	0x0061, r24
     7b0:	90 93 61 00 	sts	0x0061, r25
     7b4:	0f be       	out	0x3f, r0	; 63
	clock_prescale_set(clock_div_1);
	USB_Init();
     7b6:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <USB_Init>
	CDC_Device_CreateStream(&VirtualSerial_CDC_Interface, &USB_Stream);
     7ba:	6d e5       	ldi	r22, 0x5D	; 93
     7bc:	72 e0       	ldi	r23, 0x02	; 2
     7be:	80 e0       	ldi	r24, 0x00	; 0
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	0e 94 a1 11 	call	0x2342	; 0x2342 <CDC_Device_CreateStream>
}
void Init_InputCapture(void)
{
	// Timer0 - square wave generator
	TCCR0A = 0x42;                   // Toggle OC0A on Compare Match, CTC Mode
     7c6:	82 e4       	ldi	r24, 0x42	; 66
     7c8:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x00;                   // Stop Timer0; 0x05 start Timer0 - clk/1024 (from prescaler)
     7ca:	15 bc       	out	0x25, r1	; 37
	OCR0A = 0x27;                    // T = 5.12 ms, at f = 16 MHz, N = 1024
     7cc:	87 e2       	ldi	r24, 0x27	; 39
     7ce:	87 bd       	out	0x27, r24	; 39

	// Timer1 - frequency meter
	TCCR1A = 0x00;                  // Normal port operation
     7d0:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0xC0;                  // Input Capture Noise Canceler, rising edge, stop Timer1; 0xC7 - start Timer1 - External clock source on T1 pin, clock on rising edge
     7d4:	80 ec       	ldi	r24, 0xC0	; 192
     7d6:	80 93 81 00 	sts	0x0081, r24
	TCNT1 = 0x00;                   // Clear Timer/Counter1
     7da:	10 92 85 00 	sts	0x0085, r1
     7de:	10 92 84 00 	sts	0x0084, r1

	TIMSK1 = 0x21;                  // Input Capture Interrupt Enable, Overflow Interrupt Enable
     7e2:	81 e2       	ldi	r24, 0x21	; 33
     7e4:	80 93 6f 00 	sts	0x006F, r24
}
void Init_Message(void)
{
	if (System.IsLCDRegistered)
     7e8:	80 91 9e 02 	lds	r24, 0x029E
     7ec:	80 ff       	sbrs	r24, 0
     7ee:	18 c0       	rjmp	.+48     	; 0x820 <main+0x18c>
	{
		lcd_str_al_P(0, 0, PSTR("********************"));
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	b7 d5       	rcall	.+2926   	; 0x1364 <lcd_locate>
     7f6:	8d e8       	ldi	r24, 0x8D	; 141
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	3a d6       	rcall	.+3188   	; 0x1470 <lcd_str_P>
		lcd_str_al_P(1, 0, PSTR("*  CapacitySensor  *"));
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	81 e0       	ldi	r24, 0x01	; 1
     800:	b1 d5       	rcall	.+2914   	; 0x1364 <lcd_locate>
     802:	88 e7       	ldi	r24, 0x78	; 120
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	34 d6       	rcall	.+3176   	; 0x1470 <lcd_str_P>
		lcd_str_al_P(2, 0, PSTR("*  PG 2022 / 2023  *"));
     808:	60 e0       	ldi	r22, 0x00	; 0
     80a:	82 e0       	ldi	r24, 0x02	; 2
     80c:	ab d5       	rcall	.+2902   	; 0x1364 <lcd_locate>
     80e:	83 e6       	ldi	r24, 0x63	; 99
     810:	92 e0       	ldi	r25, 0x02	; 2
     812:	2e d6       	rcall	.+3164   	; 0x1470 <lcd_str_P>
		lcd_str_al_P(3, 0, PSTR("********************"));
     814:	60 e0       	ldi	r22, 0x00	; 0
     816:	83 e0       	ldi	r24, 0x03	; 3
     818:	a5 d5       	rcall	.+2890   	; 0x1364 <lcd_locate>
     81a:	8e e4       	ldi	r24, 0x4E	; 78
     81c:	92 e0       	ldi	r25, 0x02	; 2
     81e:	28 d6       	rcall	.+3152   	; 0x1470 <lcd_str_P>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     820:	2f ef       	ldi	r18, 0xFF	; 255
     822:	33 ed       	ldi	r19, 0xD3	; 211
     824:	80 e3       	ldi	r24, 0x30	; 48
     826:	21 50       	subi	r18, 0x01	; 1
     828:	30 40       	sbci	r19, 0x00	; 0
     82a:	80 40       	sbci	r24, 0x00	; 0
     82c:	e1 f7       	brne	.-8      	; 0x826 <main+0x192>
     82e:	00 c0       	rjmp	.+0      	; 0x830 <main+0x19c>
     830:	00 00       	nop
	}
	_delay_ms(1000);
	LEDS_OFF;
     832:	47 98       	cbi	0x08, 7	; 8
     834:	5d 98       	cbi	0x0b, 5	; 11
     836:	28 98       	cbi	0x05, 0	; 5
     838:	9f ef       	ldi	r25, 0xFF	; 255
     83a:	29 e6       	ldi	r18, 0x69	; 105
     83c:	38 e1       	ldi	r19, 0x18	; 24
     83e:	91 50       	subi	r25, 0x01	; 1
     840:	20 40       	sbci	r18, 0x00	; 0
     842:	30 40       	sbci	r19, 0x00	; 0
     844:	e1 f7       	brne	.-8      	; 0x83e <main+0x1aa>
     846:	00 c0       	rjmp	.+0      	; 0x848 <main+0x1b4>
     848:	00 00       	nop
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     84a:	78 94       	sei
	{
		/* Buffer Overflow Error */
		RingBuffer_Clear(&USB_Buffer);
		CMD_BufferOverflow = true;
		LED_CMD_REC_ON;
		fprintf_P(&USB_Stream, PSTR("Device Error: USB Buffer Overflow!\r\n"));
     84c:	0d e5       	ldi	r16, 0x5D	; 93
     84e:	12 e0       	ldi	r17, 0x02	; 2
				{
					if (System.IsLCDRegistered)
					{
						byte TimeStamp[10], Capacity[10], TicksCP[7], TicksDP[7], Progress[5];

						RingBuffer_GetAsString(&USB_Buffer, TimeStamp, ' ');
     850:	6e 01       	movw	r12, r28
     852:	8b e0       	ldi	r24, 0x0B	; 11
     854:	c8 0e       	add	r12, r24
     856:	d1 1c       	adc	r13, r1
						RingBuffer_GetAsString(&USB_Buffer, Capacity, ' ');
						RingBuffer_GetAsString(&USB_Buffer, TicksCP, ' ');
     858:	1e 01       	movw	r2, r28
     85a:	9c e1       	ldi	r25, 0x1C	; 28
     85c:	29 0e       	add	r2, r25
     85e:	31 1c       	adc	r3, r1
						RingBuffer_GetAsString(&USB_Buffer, TicksDP, ' ');
     860:	5e 01       	movw	r10, r28
     862:	25 e1       	ldi	r18, 0x15	; 21
     864:	a2 0e       	add	r10, r18
     866:	b1 1c       	adc	r11, r1
						RingBuffer_GetAsString(&USB_Buffer, Progress, ENDCMD);
     868:	4e 01       	movw	r8, r28
     86a:	33 e2       	ldi	r19, 0x23	; 35
     86c:	83 0e       	add	r8, r19
     86e:	91 1c       	adc	r9, r1
						else
						{
							fprintf_P(&LCD_Stream, PSTR("TimeStamp  %s"), TimeStamp);
						}
						lcd_locate(1, 0);
						fprintf_P(&LCD_Stream, PSTR("Capacity %s pF"), Capacity);
     870:	8f e4       	ldi	r24, 0x4F	; 79
     872:	e8 2e       	mov	r14, r24
     874:	82 e0       	ldi	r24, 0x02	; 2
     876:	f8 2e       	mov	r15, r24

/* Accumulating & Parsing Data */
void USB_ReceiveData(void)
{
	static bool CMD_BufferOverflow = false;
	if (!RingBuffer_IsFull(&USB_Buffer))
     878:	85 ec       	ldi	r24, 0xC5	; 197
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	c1 d7       	rcall	.+3970   	; 0x1800 <RingBuffer_IsFull>
     87e:	81 11       	cpse	r24, r1
     880:	20 c0       	rjmp	.+64     	; 0x8c2 <main+0x22e>
	{
		int16_t USB_Received = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 64 11 	call	0x22c8	; 0x22c8 <CDC_Device_ReceiveByte>
		/* Check Received Status */
		if (USB_Received >= 0)
     88a:	97 fd       	sbrc	r25, 7
     88c:	2d c0       	rjmp	.+90     	; 0x8e8 <main+0x254>
		{
			/* Insert Received Data */
			byte Data = (byte)USB_Received;
     88e:	78 2e       	mov	r7, r24
			RingBuffer_Insert(&USB_Buffer, Data);
     890:	68 2f       	mov	r22, r24
     892:	85 ec       	ldi	r24, 0xC5	; 197
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	3b d7       	rcall	.+3702   	; 0x170e <RingBuffer_Insert>
			if (Data == ENDCMD)
     898:	8a e0       	ldi	r24, 0x0A	; 10
     89a:	78 12       	cpse	r7, r24
     89c:	25 c0       	rjmp	.+74     	; 0x8e8 <main+0x254>
			{
				if (CMD_BufferOverflow)
     89e:	80 91 44 01 	lds	r24, 0x0144
     8a2:	88 23       	and	r24, r24
     8a4:	39 f0       	breq	.+14     	; 0x8b4 <main+0x220>
				{
					RingBuffer_Clear(&USB_Buffer);
     8a6:	85 ec       	ldi	r24, 0xC5	; 197
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	29 d7       	rcall	.+3666   	; 0x16fe <RingBuffer_Clear>
					CMD_BufferOverflow = false;
     8ac:	10 92 44 01 	sts	0x0144, r1
					LED_CMD_REC_OFF;
     8b0:	47 98       	cbi	0x08, 7	; 8
     8b2:	1a c0       	rjmp	.+52     	; 0x8e8 <main+0x254>
				}
				else
				{
					/* CMD Received Flag */
					System.IsCMDReceived = true;
     8b4:	80 91 9e 02 	lds	r24, 0x029E
     8b8:	88 60       	ori	r24, 0x08	; 8
     8ba:	80 93 9e 02 	sts	0x029E, r24
					LED_CMD_REC_ON;
     8be:	47 9a       	sbi	0x08, 7	; 8
     8c0:	13 c0       	rjmp	.+38     	; 0x8e8 <main+0x254>
		}
	}
	else
	{
		/* Buffer Overflow Error */
		RingBuffer_Clear(&USB_Buffer);
     8c2:	85 ec       	ldi	r24, 0xC5	; 197
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	1b d7       	rcall	.+3638   	; 0x16fe <RingBuffer_Clear>
		CMD_BufferOverflow = true;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	80 93 44 01 	sts	0x0144, r24
		LED_CMD_REC_ON;
     8ce:	47 9a       	sbi	0x08, 7	; 8
		fprintf_P(&USB_Stream, PSTR("Device Error: USB Buffer Overflow!\r\n"));
     8d0:	29 e2       	ldi	r18, 0x29	; 41
     8d2:	32 e0       	ldi	r19, 0x02	; 2
     8d4:	3f 93       	push	r19
     8d6:	2f 93       	push	r18
     8d8:	1f 93       	push	r17
     8da:	0f 93       	push	r16
     8dc:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     8e0:	0f 90       	pop	r0
     8e2:	0f 90       	pop	r0
     8e4:	0f 90       	pop	r0
     8e6:	0f 90       	pop	r0
	}
}
void CMD_Parse(void)
{
	if (System.IsCMDReceived)
     8e8:	80 91 9e 02 	lds	r24, 0x029E
     8ec:	83 ff       	sbrs	r24, 3
     8ee:	a3 c3       	rjmp	.+1862   	; 0x1036 <__stack+0x537>
	{
		/* Clear Flag */
		System.IsCMDReceived = false;
     8f0:	80 91 9e 02 	lds	r24, 0x029E
     8f4:	87 7f       	andi	r24, 0xF7	; 247
     8f6:	80 93 9e 02 	sts	0x029E, r24
		/* Size of Received Data */
		size_t Size = RingBuffer_Size(&USB_Buffer);
     8fa:	85 ec       	ldi	r24, 0xC5	; 197
     8fc:	91 e0       	ldi	r25, 0x01	; 1
     8fe:	94 d7       	rcall	.+3880   	; 0x1828 <RingBuffer_Size>

		if (Size == 2)
     900:	02 97       	sbiw	r24, 0x02	; 2
     902:	09 f0       	breq	.+2      	; 0x906 <main+0x272>
     904:	f1 c1       	rjmp	.+994    	; 0xce8 <__stack+0x1e9>
		{
			/* Primary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD);
     906:	4a e0       	ldi	r20, 0x0A	; 10
     908:	65 e4       	ldi	r22, 0x45	; 69
     90a:	71 e0       	ldi	r23, 0x01	; 1
     90c:	85 ec       	ldi	r24, 0xC5	; 197
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	42 d7       	rcall	.+3716   	; 0x1796 <RingBuffer_GetAsString>
			switch (CMD_Buffer[0])
     912:	80 91 45 01 	lds	r24, 0x0145
     916:	8c 34       	cpi	r24, 0x4C	; 76
     918:	09 f4       	brne	.+2      	; 0x91c <main+0x288>
     91a:	d9 c1       	rjmp	.+946    	; 0xcce <__stack+0x1cf>
     91c:	08 f0       	brcs	.+2      	; 0x920 <main+0x28c>
     91e:	6e c0       	rjmp	.+220    	; 0x9fc <main+0x368>
     920:	84 34       	cpi	r24, 0x44	; 68
     922:	09 f4       	brne	.+2      	; 0x926 <main+0x292>
     924:	77 c0       	rjmp	.+238    	; 0xa14 <main+0x380>
     926:	89 34       	cpi	r24, 0x49	; 73
     928:	09 f4       	brne	.+2      	; 0x92c <main+0x298>
     92a:	87 c0       	rjmp	.+270    	; 0xa3a <main+0x3a6>
     92c:	81 34       	cpi	r24, 0x41	; 65
     92e:	09 f0       	breq	.+2      	; 0x932 <main+0x29e>
     930:	d6 c1       	rjmp	.+940    	; 0xcde <__stack+0x1df>
			{
				case GET_CONSTANTS:		/* Get Constants Values */
				{
					SEND_CONSTANT_VALUES;
     932:	60 91 7b 02 	lds	r22, 0x027B
     936:	70 91 7c 02 	lds	r23, 0x027C
     93a:	80 91 7d 02 	lds	r24, 0x027D
     93e:	90 91 7e 02 	lds	r25, 0x027E
     942:	44 e0       	ldi	r20, 0x04	; 4
     944:	df dd       	rcall	.-1090   	; 0x504 <dtostr>
     946:	9f 93       	push	r25
     948:	8f 93       	push	r24
     94a:	85 e2       	ldi	r24, 0x25	; 37
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	9f 93       	push	r25
     950:	8f 93       	push	r24
     952:	1f 93       	push	r17
     954:	0f 93       	push	r16
     956:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     95a:	60 91 7f 02 	lds	r22, 0x027F
     95e:	70 91 80 02 	lds	r23, 0x0280
     962:	80 91 81 02 	lds	r24, 0x0281
     966:	90 91 82 02 	lds	r25, 0x0282
     96a:	44 e0       	ldi	r20, 0x04	; 4
     96c:	cb dd       	rcall	.-1130   	; 0x504 <dtostr>
     96e:	9f 93       	push	r25
     970:	8f 93       	push	r24
     972:	81 e2       	ldi	r24, 0x21	; 33
     974:	92 e0       	ldi	r25, 0x02	; 2
     976:	9f 93       	push	r25
     978:	8f 93       	push	r24
     97a:	1f 93       	push	r17
     97c:	0f 93       	push	r16
     97e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     982:	60 91 83 02 	lds	r22, 0x0283
     986:	70 91 84 02 	lds	r23, 0x0284
     98a:	80 91 85 02 	lds	r24, 0x0285
     98e:	90 91 86 02 	lds	r25, 0x0286
     992:	44 e0       	ldi	r20, 0x04	; 4
     994:	b7 dd       	rcall	.-1170   	; 0x504 <dtostr>
     996:	9f 93       	push	r25
     998:	8f 93       	push	r24
     99a:	8d e1       	ldi	r24, 0x1D	; 29
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	9f 93       	push	r25
     9a0:	8f 93       	push	r24
     9a2:	1f 93       	push	r17
     9a4:	0f 93       	push	r16
     9a6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     9aa:	60 91 87 02 	lds	r22, 0x0287
     9ae:	70 91 88 02 	lds	r23, 0x0288
     9b2:	80 91 89 02 	lds	r24, 0x0289
     9b6:	90 91 8a 02 	lds	r25, 0x028A
     9ba:	44 e0       	ldi	r20, 0x04	; 4
     9bc:	a3 dd       	rcall	.-1210   	; 0x504 <dtostr>
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	89 e1       	ldi	r24, 0x19	; 25
     9c4:	92 e0       	ldi	r25, 0x02	; 2
     9c6:	9f 93       	push	r25
     9c8:	8f 93       	push	r24
     9ca:	1f 93       	push	r17
     9cc:	0f 93       	push	r16
     9ce:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     9d2:	80 91 8e 02 	lds	r24, 0x028E
     9d6:	8f 93       	push	r24
     9d8:	80 91 8d 02 	lds	r24, 0x028D
     9dc:	8f 93       	push	r24
     9de:	80 91 8c 02 	lds	r24, 0x028C
     9e2:	8f 93       	push	r24
     9e4:	80 91 8b 02 	lds	r24, 0x028B
     9e8:	8f 93       	push	r24
     9ea:	83 e1       	ldi	r24, 0x13	; 19
     9ec:	92 e0       	ldi	r25, 0x02	; 2
     9ee:	9f 93       	push	r25
     9f0:	8f 93       	push	r24
     9f2:	1f 93       	push	r17
     9f4:	0f 93       	push	r16
     9f6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     9fa:	6f c0       	rjmp	.+222    	; 0xada <main+0x446>

		if (Size == 2)
		{
			/* Primary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD);
			switch (CMD_Buffer[0])
     9fc:	8e 34       	cpi	r24, 0x4E	; 78
     9fe:	09 f4       	brne	.+2      	; 0xa02 <main+0x36e>
     a00:	6a c1       	rjmp	.+724    	; 0xcd6 <__stack+0x1d7>
     a02:	08 f4       	brcc	.+2      	; 0xa06 <main+0x372>
     a04:	83 c0       	rjmp	.+262    	; 0xb0c <__stack+0xd>
     a06:	80 35       	cpi	r24, 0x50	; 80
     a08:	09 f4       	brne	.+2      	; 0xa0c <main+0x378>
     a0a:	6d c0       	rjmp	.+218    	; 0xae6 <main+0x452>
     a0c:	82 35       	cpi	r24, 0x52	; 82
     a0e:	09 f4       	brne	.+2      	; 0xa12 <main+0x37e>
     a10:	1f c1       	rjmp	.+574    	; 0xc50 <__stack+0x151>
     a12:	65 c1       	rjmp	.+714    	; 0xcde <__stack+0x1df>
					SEND_CONSTANT_VALUES;
					break;
				}
				case DEF_CONSTANTS: 	/* Set Default Constants Values */
				{
					READ_CONSTANTS__PGM;
     a14:	44 e1       	ldi	r20, 0x14	; 20
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	62 eb       	ldi	r22, 0xB2	; 178
     a1a:	72 e0       	ldi	r23, 0x02	; 2
     a1c:	8b e7       	ldi	r24, 0x7B	; 123
     a1e:	92 e0       	ldi	r25, 0x02	; 2
     a20:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <memcpy_P>
					UPDATE_CONSTANTS__EEMEM;
     a24:	44 e1       	ldi	r20, 0x14	; 20
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	60 e1       	ldi	r22, 0x10	; 16
     a2a:	70 e0       	ldi	r23, 0x00	; 0
     a2c:	8b e7       	ldi	r24, 0x7B	; 123
     a2e:	92 e0       	ldi	r25, 0x02	; 2
     a30:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     a34:	6e e0       	ldi	r22, 0x0E	; 14
     a36:	72 e0       	ldi	r23, 0x02	; 2
     a38:	e5 c2       	rjmp	.+1482   	; 0x1004 <__stack+0x505>
					break;
				}
				case GET_CORRECTIONS:	/* Get Corrections Values */
				{
					SEND_CORRECTION_VALUES;
     a3a:	60 91 6b 02 	lds	r22, 0x026B
     a3e:	70 91 6c 02 	lds	r23, 0x026C
     a42:	80 91 6d 02 	lds	r24, 0x026D
     a46:	90 91 6e 02 	lds	r25, 0x026E
     a4a:	44 e0       	ldi	r20, 0x04	; 4
     a4c:	5b dd       	rcall	.-1354   	; 0x504 <dtostr>
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	8a e0       	ldi	r24, 0x0A	; 10
     a54:	92 e0       	ldi	r25, 0x02	; 2
     a56:	9f 93       	push	r25
     a58:	8f 93       	push	r24
     a5a:	1f 93       	push	r17
     a5c:	0f 93       	push	r16
     a5e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     a62:	60 91 6f 02 	lds	r22, 0x026F
     a66:	70 91 70 02 	lds	r23, 0x0270
     a6a:	80 91 71 02 	lds	r24, 0x0271
     a6e:	90 91 72 02 	lds	r25, 0x0272
     a72:	44 e0       	ldi	r20, 0x04	; 4
     a74:	47 dd       	rcall	.-1394   	; 0x504 <dtostr>
     a76:	9f 93       	push	r25
     a78:	8f 93       	push	r24
     a7a:	86 e0       	ldi	r24, 0x06	; 6
     a7c:	92 e0       	ldi	r25, 0x02	; 2
     a7e:	9f 93       	push	r25
     a80:	8f 93       	push	r24
     a82:	1f 93       	push	r17
     a84:	0f 93       	push	r16
     a86:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     a8a:	60 91 73 02 	lds	r22, 0x0273
     a8e:	70 91 74 02 	lds	r23, 0x0274
     a92:	80 91 75 02 	lds	r24, 0x0275
     a96:	90 91 76 02 	lds	r25, 0x0276
     a9a:	44 e0       	ldi	r20, 0x04	; 4
     a9c:	33 dd       	rcall	.-1434   	; 0x504 <dtostr>
     a9e:	9f 93       	push	r25
     aa0:	8f 93       	push	r24
     aa2:	82 e0       	ldi	r24, 0x02	; 2
     aa4:	92 e0       	ldi	r25, 0x02	; 2
     aa6:	9f 93       	push	r25
     aa8:	8f 93       	push	r24
     aaa:	1f 93       	push	r17
     aac:	0f 93       	push	r16
     aae:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     ab2:	60 91 77 02 	lds	r22, 0x0277
     ab6:	70 91 78 02 	lds	r23, 0x0278
     aba:	80 91 79 02 	lds	r24, 0x0279
     abe:	90 91 7a 02 	lds	r25, 0x027A
     ac2:	44 e0       	ldi	r20, 0x04	; 4
     ac4:	1f dd       	rcall	.-1474   	; 0x504 <dtostr>
     ac6:	9f 93       	push	r25
     ac8:	8f 93       	push	r24
     aca:	8d ef       	ldi	r24, 0xFD	; 253
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	9f 93       	push	r25
     ad0:	8f 93       	push	r24
     ad2:	1f 93       	push	r17
     ad4:	0f 93       	push	r16
     ad6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     ada:	0f b6       	in	r0, 0x3f	; 63
     adc:	f8 94       	cli
     ade:	de bf       	out	0x3e, r29	; 62
     ae0:	0f be       	out	0x3f, r0	; 63
     ae2:	cd bf       	out	0x3d, r28	; 61
     ae4:	a4 c2       	rjmp	.+1352   	; 0x102e <__stack+0x52f>
					break;
				}
				case DEF_CORRECTIONS:	/* Set Default Corrections Values */
				{
					READ_CORRECTIONS__PGM;
     ae6:	40 e1       	ldi	r20, 0x10	; 16
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	62 ea       	ldi	r22, 0xA2	; 162
     aec:	72 e0       	ldi	r23, 0x02	; 2
     aee:	8b e6       	ldi	r24, 0x6B	; 107
     af0:	92 e0       	ldi	r25, 0x02	; 2
     af2:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <memcpy_P>
					UPDATE_CORRECTIONS__EEMEM;
     af6:	40 e1       	ldi	r20, 0x10	; 16
     af8:	50 e0       	ldi	r21, 0x00	; 0
     afa:	60 e0       	ldi	r22, 0x00	; 0
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	8b e6       	ldi	r24, 0x6B	; 107
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     b06:	68 ef       	ldi	r22, 0xF8	; 248
     b08:	71 e0       	ldi	r23, 0x01	; 1
     b0a:	7c c2       	rjmp	.+1272   	; 0x1004 <__stack+0x505>
}

/* Capacity Measuring Function */
STATUS_t CapacityMeasurement(void)
{
	MEASURING_SYSTEM_ON;
     b0c:	46 98       	cbi	0x08, 6	; 8

	TCNT0 = 0x00;                   // Clear Timer/Counter0
     b0e:	16 bc       	out	0x26, r1	; 38
	TCNT1 = 0x00;                   // Clear Timer/Counter1
     b10:	10 92 85 00 	sts	0x0085, r1
     b14:	10 92 84 00 	sts	0x0084, r1
	GTCCR = 0x01;                   // Prescaler Reset for Synchronous Timer/Counters
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	83 bd       	out	0x23, r24	; 35
	TCCR0B = 0x05;                  // Start Timer0 - clk/1024 (from prescaler)
     b1c:	85 e0       	ldi	r24, 0x05	; 5
     b1e:	85 bd       	out	0x25, r24	; 37
	TCCR1B = 0xC7;                  // Input Capture Noise Canceler, rising edge, start Timer1 - External clock source on T1 pin, clock on rising edge
     b20:	87 ec       	ldi	r24, 0xC7	; 199
     b22:	80 93 81 00 	sts	0x0081, r24

	timer_ovf = 0;
     b26:	10 92 ae 03 	sts	0x03AE, r1
	stop_meas = 0;
     b2a:	10 92 b0 03 	sts	0x03B0, r1
	m_gate = 0;
     b2e:	10 92 af 03 	sts	0x03AF, r1
		// TIMER1_CAPT interrupt service saves the number of measured impulses m_ts at T1 input and increments m_gate
		// if m_ts > 2^15 the measurement is finished
		// or TIMER1_OVF interrupt service stops measurement


	while(stop_meas == 0) {};
     b32:	80 91 b0 03 	lds	r24, 0x03B0
     b36:	88 23       	and	r24, r24
     b38:	e1 f3       	breq	.-8      	; 0xb32 <__stack+0x33>

	pulses_ts = n_ts - n_ts_first;
     b3a:	80 91 9c 02 	lds	r24, 0x029C
     b3e:	90 91 9d 02 	lds	r25, 0x029D
     b42:	20 91 b1 03 	lds	r18, 0x03B1
     b46:	30 91 b2 03 	lds	r19, 0x03B2
     b4a:	82 1b       	sub	r24, r18
     b4c:	93 0b       	sbc	r25, r19
     b4e:	90 93 ad 03 	sts	0x03AD, r25
     b52:	80 93 ac 03 	sts	0x03AC, r24

	m_gate--;						// decrement the number of the open gate interval
     b56:	80 91 af 03 	lds	r24, 0x03AF
     b5a:	81 50       	subi	r24, 0x01	; 1
     b5c:	80 93 af 03 	sts	0x03AF, r24

	TCCR1B = 0xC0;                  // Input Capture Noise Canceler, rising edge, stop Timer1
     b60:	80 ec       	ldi	r24, 0xC0	; 192
     b62:	80 93 81 00 	sts	0x0081, r24
	TCCR0B = 0x00;                  // Stop Timer0
     b66:	15 bc       	out	0x25, r1	; 37

	MEASURING_SYSTEM_OFF;
     b68:	46 9a       	sbi	0x08, 6	; 8

	STATUS_t Status = TemperatureMeasurement();
     b6a:	e8 dc       	rcall	.-1584   	; 0x53c <TemperatureMeasurement>
	if (Status == Status_OK)
     b6c:	81 11       	cpse	r24, r1
     b6e:	33 c0       	rjmp	.+102    	; 0xbd6 <__stack+0xd7>
	{
		fprintf_P(&USB_Stream, PSTR("%c %s "), SEND_TEMP, dtostr(System.Temperature, AFTERPOINT));
     b70:	60 91 a4 03 	lds	r22, 0x03A4
     b74:	70 91 a5 03 	lds	r23, 0x03A5
     b78:	80 91 a6 03 	lds	r24, 0x03A6
     b7c:	90 91 a7 03 	lds	r25, 0x03A7
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	c0 dc       	rcall	.-1664   	; 0x504 <dtostr>
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	1f 92       	push	r1
     b8a:	84 e5       	ldi	r24, 0x54	; 84
     b8c:	8f 93       	push	r24
     b8e:	82 ec       	ldi	r24, 0xC2	; 194
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	9f 93       	push	r25
     b94:	8f 93       	push	r24
     b96:	1f 93       	push	r17
     b98:	0f 93       	push	r16
     b9a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
		fprintf_P(&USB_Stream, PSTR("%c %s "), SEND_RH, dtostr(System.Humidity, AFTERPOINT));
     b9e:	60 91 a8 03 	lds	r22, 0x03A8
     ba2:	70 91 a9 03 	lds	r23, 0x03A9
     ba6:	80 91 aa 03 	lds	r24, 0x03AA
     baa:	90 91 ab 03 	lds	r25, 0x03AB
     bae:	41 e0       	ldi	r20, 0x01	; 1
     bb0:	a9 dc       	rcall	.-1710   	; 0x504 <dtostr>
     bb2:	9f 93       	push	r25
     bb4:	8f 93       	push	r24
     bb6:	1f 92       	push	r1
     bb8:	88 e4       	ldi	r24, 0x48	; 72
     bba:	8f 93       	push	r24
     bbc:	8b eb       	ldi	r24, 0xBB	; 187
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	9f 93       	push	r25
     bc2:	8f 93       	push	r24
     bc4:	1f 93       	push	r17
     bc6:	0f 93       	push	r16
     bc8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
	}

	fprintf_P(&USB_Stream, PSTR("%c %u %u "), SEND_SP, pulses_ts, m_gate);
     bd6:	20 91 af 03 	lds	r18, 0x03AF
     bda:	80 91 ac 03 	lds	r24, 0x03AC
     bde:	90 91 ad 03 	lds	r25, 0x03AD
     be2:	1f 92       	push	r1
     be4:	2f 93       	push	r18
     be6:	9f 93       	push	r25
     be8:	8f 93       	push	r24
     bea:	1f 92       	push	r1
     bec:	83 e4       	ldi	r24, 0x43	; 67
     bee:	8f 93       	push	r24
     bf0:	81 eb       	ldi	r24, 0xB1	; 177
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	9f 93       	push	r25
     bf6:	8f 93       	push	r24
     bf8:	1f 93       	push	r17
     bfa:	0f 93       	push	r16
     bfc:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>

	/* Calculate Frequency */
	double Freq = (double)pulses_ts;
     c00:	60 91 ac 03 	lds	r22, 0x03AC
     c04:	70 91 ad 03 	lds	r23, 0x03AD
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__floatunsisf>
	Freq = Freq / 0.00512;
     c10:	2c ea       	ldi	r18, 0xAC	; 172
     c12:	35 ec       	ldi	r19, 0xC5	; 197
     c14:	47 ea       	ldi	r20, 0xA7	; 167
     c16:	5b e3       	ldi	r21, 0x3B	; 59
     c18:	0e 94 cb 12 	call	0x2596	; 0x2596 <__divsf3>
     c1c:	2b 01       	movw	r4, r22
     c1e:	3c 01       	movw	r6, r24
	Freq = Freq / m_gate;
     c20:	60 91 af 03 	lds	r22, 0x03AF

	fprintf_P(&USB_Stream, PSTR("%s\r\n"), dtostr(Freq, 3));
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 66 13 	call	0x26cc	; 0x26cc <__floatsisf>
     c2e:	9b 01       	movw	r18, r22
     c30:	ac 01       	movw	r20, r24
     c32:	c3 01       	movw	r24, r6
     c34:	b2 01       	movw	r22, r4
     c36:	0e 94 cb 12 	call	0x2596	; 0x2596 <__divsf3>
     c3a:	43 e0       	ldi	r20, 0x03	; 3
     c3c:	63 dc       	rcall	.-1850   	; 0x504 <dtostr>
     c3e:	9f 93       	push	r25
     c40:	8f 93       	push	r24
     c42:	8c ea       	ldi	r24, 0xAC	; 172
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	9f 93       	push	r25
     c48:	8f 93       	push	r24
     c4a:	1f 93       	push	r17
     c4c:	0f 93       	push	r16
     c4e:	43 cf       	rjmp	.-378    	; 0xad6 <main+0x442>
					CapacityMeasurement();
					break;
				}
				case GET_TEMP_RH: 		/* Get Temperature and Humidity */
				{
					STATUS_t Status = TemperatureMeasurement();
     c50:	75 dc       	rcall	.-1814   	; 0x53c <TemperatureMeasurement>
					if (Status == Status_OK)
     c52:	81 11       	cpse	r24, r1
     c54:	27 c0       	rjmp	.+78     	; 0xca4 <__stack+0x1a5>
					{
						fprintf_P(&USB_Stream, PSTR("%s "), dtostr(System.Temperature, AFTERPOINT));
     c56:	60 91 a4 03 	lds	r22, 0x03A4
     c5a:	70 91 a5 03 	lds	r23, 0x03A5
     c5e:	80 91 a6 03 	lds	r24, 0x03A6
     c62:	90 91 a7 03 	lds	r25, 0x03A7
     c66:	41 e0       	ldi	r20, 0x01	; 1
     c68:	4d dc       	rcall	.-1894   	; 0x504 <dtostr>
     c6a:	9f 93       	push	r25
     c6c:	8f 93       	push	r24
     c6e:	84 ef       	ldi	r24, 0xF4	; 244
     c70:	91 e0       	ldi	r25, 0x01	; 1
     c72:	9f 93       	push	r25
     c74:	8f 93       	push	r24
     c76:	1f 93       	push	r17
     c78:	0f 93       	push	r16
     c7a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
						fprintf_P(&USB_Stream, PSTR("%s\r\n"), dtostr(System.Humidity, AFTERPOINT));
     c7e:	60 91 a8 03 	lds	r22, 0x03A8
     c82:	70 91 a9 03 	lds	r23, 0x03A9
     c86:	80 91 aa 03 	lds	r24, 0x03AA
     c8a:	90 91 ab 03 	lds	r25, 0x03AB
     c8e:	41 e0       	ldi	r20, 0x01	; 1
     c90:	39 dc       	rcall	.-1934   	; 0x504 <dtostr>
     c92:	9f 93       	push	r25
     c94:	8f 93       	push	r24
     c96:	8f ee       	ldi	r24, 0xEF	; 239
     c98:	91 e0       	ldi	r25, 0x01	; 1
     c9a:	9f 93       	push	r25
     c9c:	8f 93       	push	r24
     c9e:	1f 93       	push	r17
     ca0:	0f 93       	push	r16
     ca2:	19 cf       	rjmp	.-462    	; 0xad6 <main+0x442>
					}
					else if (Status == Status_Error)
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	31 f4       	brne	.+12     	; 0xcb4 <__stack+0x1b5>
					{
						fprintf_P(&USB_Stream, PSTR("Device Error: Read temperature unexpected error: %u\r\n"), twi_status());
     ca8:	83 d2       	rcall	.+1286   	; 0x11b0 <twi_status>
     caa:	1f 92       	push	r1
     cac:	8f 93       	push	r24
     cae:	89 eb       	ldi	r24, 0xB9	; 185
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	b1 c1       	rjmp	.+866    	; 0x1016 <__stack+0x517>
					}
					else /* Status == Status_Unregistered */
					{
						fprintf_P(&USB_Stream, PSTR("Device Error: SHTC3 module unregistered\r\n"));
     cb4:	8f e8       	ldi	r24, 0x8F	; 143
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	9f 93       	push	r25
     cba:	8f 93       	push	r24
     cbc:	1f 93       	push	r17
     cbe:	0f 93       	push	r16
     cc0:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     cc4:	0f 90       	pop	r0
     cc6:	0f 90       	pop	r0
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	b0 c1       	rjmp	.+864    	; 0x102e <__stack+0x52f>
					}
					break;
				}
				case ENABLE_MEAS_CIRCUIT:		/* Set Signal Pin as HIGH */
				{
					MEASURING_SYSTEM_ON;
     cce:	46 98       	cbi	0x08, 6	; 8
					SEND_CONFIRMATION;
     cd0:	6a e8       	ldi	r22, 0x8A	; 138
     cd2:	71 e0       	ldi	r23, 0x01	; 1
     cd4:	97 c1       	rjmp	.+814    	; 0x1004 <__stack+0x505>
					break;
				}
				case SET_NOMINAL:		/* Set Signal Pin as Nominal (HIGH-Z) */
				{
					MEASURING_SYSTEM_OFF;
     cd6:	46 9a       	sbi	0x08, 6	; 8
					SEND_CONFIRMATION;
     cd8:	65 e8       	ldi	r22, 0x85	; 133
     cda:	71 e0       	ldi	r23, 0x01	; 1
     cdc:	93 c1       	rjmp	.+806    	; 0x1004 <__stack+0x505>
					break;
				}
				default:				/* Unrecognized Command Signalization */
				{
					fprintf_P(&USB_Stream, PSTR("Device Error: Unrecognized Command: %c\r\n"), CMD_Buffer[0]);
     cde:	1f 92       	push	r1
     ce0:	8f 93       	push	r24
     ce2:	8c e5       	ldi	r24, 0x5C	; 92
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	97 c1       	rjmp	.+814    	; 0x1016 <__stack+0x517>
			}
		}
		else
		{
			/* Secondary Commands */
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' ');
     ce8:	40 e2       	ldi	r20, 0x20	; 32
     cea:	65 e4       	ldi	r22, 0x45	; 69
     cec:	71 e0       	ldi	r23, 0x01	; 1
     cee:	85 ec       	ldi	r24, 0xC5	; 197
     cf0:	91 e0       	ldi	r25, 0x01	; 1
     cf2:	51 d5       	rcall	.+2722   	; 0x1796 <RingBuffer_GetAsString>
			switch (CMD_Buffer[0])
     cf4:	80 91 45 01 	lds	r24, 0x0145
     cf8:	83 35       	cpi	r24, 0x53	; 83
     cfa:	09 f4       	brne	.+2      	; 0xcfe <__stack+0x1ff>
     cfc:	59 c0       	rjmp	.+178    	; 0xdb0 <__stack+0x2b1>
     cfe:	87 35       	cpi	r24, 0x57	; 87
     d00:	09 f4       	brne	.+2      	; 0xd04 <__stack+0x205>
     d02:	bd c0       	rjmp	.+378    	; 0xe7e <__stack+0x37f>
     d04:	8f 34       	cpi	r24, 0x4F	; 79
     d06:	09 f0       	breq	.+2      	; 0xd0a <__stack+0x20b>
     d08:	82 c1       	rjmp	.+772    	; 0x100e <__stack+0x50f>
					SEND_CONFIRMATION;
					break;
				}
				case SET_CORRECTIONS:
				{
					Corrections.A0 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     d0a:	40 e2       	ldi	r20, 0x20	; 32
     d0c:	65 e4       	ldi	r22, 0x45	; 69
     d0e:	71 e0       	ldi	r23, 0x01	; 1
     d10:	85 ec       	ldi	r24, 0xC5	; 197
     d12:	91 e0       	ldi	r25, 0x01	; 1
     d14:	40 d5       	rcall	.+2688   	; 0x1796 <RingBuffer_GetAsString>
     d16:	60 e0       	ldi	r22, 0x00	; 0
     d18:	70 e0       	ldi	r23, 0x00	; 0
     d1a:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     d1e:	60 93 6b 02 	sts	0x026B, r22
     d22:	70 93 6c 02 	sts	0x026C, r23
     d26:	80 93 6d 02 	sts	0x026D, r24
     d2a:	90 93 6e 02 	sts	0x026E, r25
					Corrections.A1 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     d2e:	40 e2       	ldi	r20, 0x20	; 32
     d30:	65 e4       	ldi	r22, 0x45	; 69
     d32:	71 e0       	ldi	r23, 0x01	; 1
     d34:	85 ec       	ldi	r24, 0xC5	; 197
     d36:	91 e0       	ldi	r25, 0x01	; 1
     d38:	2e d5       	rcall	.+2652   	; 0x1796 <RingBuffer_GetAsString>
     d3a:	60 e0       	ldi	r22, 0x00	; 0
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     d42:	60 93 6f 02 	sts	0x026F, r22
     d46:	70 93 70 02 	sts	0x0270, r23
     d4a:	80 93 71 02 	sts	0x0271, r24
     d4e:	90 93 72 02 	sts	0x0272, r25
					Corrections.A2 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     d52:	40 e2       	ldi	r20, 0x20	; 32
     d54:	65 e4       	ldi	r22, 0x45	; 69
     d56:	71 e0       	ldi	r23, 0x01	; 1
     d58:	85 ec       	ldi	r24, 0xC5	; 197
     d5a:	91 e0       	ldi	r25, 0x01	; 1
     d5c:	1c d5       	rcall	.+2616   	; 0x1796 <RingBuffer_GetAsString>
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     d66:	60 93 73 02 	sts	0x0273, r22
     d6a:	70 93 74 02 	sts	0x0274, r23
     d6e:	80 93 75 02 	sts	0x0275, r24
     d72:	90 93 76 02 	sts	0x0276, r25
					Corrections.A3 = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     d76:	40 e2       	ldi	r20, 0x20	; 32
     d78:	65 e4       	ldi	r22, 0x45	; 69
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	85 ec       	ldi	r24, 0xC5	; 197
     d7e:	91 e0       	ldi	r25, 0x01	; 1
     d80:	0a d5       	rcall	.+2580   	; 0x1796 <RingBuffer_GetAsString>
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	70 e0       	ldi	r23, 0x00	; 0
     d86:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     d8a:	60 93 77 02 	sts	0x0277, r22
     d8e:	70 93 78 02 	sts	0x0278, r23
     d92:	80 93 79 02 	sts	0x0279, r24
     d96:	90 93 7a 02 	sts	0x027A, r25
					UPDATE_CORRECTIONS__EEMEM;
     d9a:	40 e1       	ldi	r20, 0x10	; 16
     d9c:	50 e0       	ldi	r21, 0x00	; 0
     d9e:	60 e0       	ldi	r22, 0x00	; 0
     da0:	70 e0       	ldi	r23, 0x00	; 0
     da2:	8b e6       	ldi	r24, 0x6B	; 107
     da4:	92 e0       	ldi	r25, 0x02	; 2
     da6:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     daa:	62 e5       	ldi	r22, 0x52	; 82
     dac:	71 e0       	ldi	r23, 0x01	; 1
     dae:	2a c1       	rjmp	.+596    	; 0x1004 <__stack+0x505>
			RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' ');
			switch (CMD_Buffer[0])
			{
				case SET_CONSTANTS:
				{
					Constants.H_THR  = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     db0:	40 e2       	ldi	r20, 0x20	; 32
     db2:	65 e4       	ldi	r22, 0x45	; 69
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	85 ec       	ldi	r24, 0xC5	; 197
     db8:	91 e0       	ldi	r25, 0x01	; 1
     dba:	ed d4       	rcall	.+2522   	; 0x1796 <RingBuffer_GetAsString>
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     dc4:	60 93 7b 02 	sts	0x027B, r22
     dc8:	70 93 7c 02 	sts	0x027C, r23
     dcc:	80 93 7d 02 	sts	0x027D, r24
     dd0:	90 93 7e 02 	sts	0x027E, r25
					Constants.L_THR  = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     dd4:	40 e2       	ldi	r20, 0x20	; 32
     dd6:	65 e4       	ldi	r22, 0x45	; 69
     dd8:	71 e0       	ldi	r23, 0x01	; 1
     dda:	85 ec       	ldi	r24, 0xC5	; 197
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	db d4       	rcall	.+2486   	; 0x1796 <RingBuffer_GetAsString>
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     de8:	60 93 7f 02 	sts	0x027F, r22
     dec:	70 93 80 02 	sts	0x0280, r23
     df0:	80 93 81 02 	sts	0x0281, r24
     df4:	90 93 82 02 	sts	0x0282, r25
					Constants.H_VOUT = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     df8:	40 e2       	ldi	r20, 0x20	; 32
     dfa:	65 e4       	ldi	r22, 0x45	; 69
     dfc:	71 e0       	ldi	r23, 0x01	; 1
     dfe:	85 ec       	ldi	r24, 0xC5	; 197
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	c9 d4       	rcall	.+2450   	; 0x1796 <RingBuffer_GetAsString>
     e04:	60 e0       	ldi	r22, 0x00	; 0
     e06:	70 e0       	ldi	r23, 0x00	; 0
     e08:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     e0c:	60 93 83 02 	sts	0x0283, r22
     e10:	70 93 84 02 	sts	0x0284, r23
     e14:	80 93 85 02 	sts	0x0285, r24
     e18:	90 93 86 02 	sts	0x0286, r25
					Constants.L_VOUT = strtod((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ' '), NULL);
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	65 e4       	ldi	r22, 0x45	; 69
     e20:	71 e0       	ldi	r23, 0x01	; 1
     e22:	85 ec       	ldi	r24, 0xC5	; 197
     e24:	91 e0       	ldi	r25, 0x01	; 1
     e26:	b7 d4       	rcall	.+2414   	; 0x1796 <RingBuffer_GetAsString>
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	0e 94 be 14 	call	0x297c	; 0x297c <strtod>
     e30:	60 93 87 02 	sts	0x0287, r22
     e34:	70 93 88 02 	sts	0x0288, r23
     e38:	80 93 89 02 	sts	0x0289, r24
     e3c:	90 93 8a 02 	sts	0x028A, r25
					Constants.R_MEAS = strtoul((const char *)RingBuffer_GetAsString(&USB_Buffer, CMD_Buffer, ENDCMD), NULL, 10);
     e40:	4a e0       	ldi	r20, 0x0A	; 10
     e42:	65 e4       	ldi	r22, 0x45	; 69
     e44:	71 e0       	ldi	r23, 0x01	; 1
     e46:	85 ec       	ldi	r24, 0xC5	; 197
     e48:	91 e0       	ldi	r25, 0x01	; 1
     e4a:	a5 d4       	rcall	.+2378   	; 0x1796 <RingBuffer_GetAsString>
     e4c:	4a e0       	ldi	r20, 0x0A	; 10
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	0e 94 16 16 	call	0x2c2c	; 0x2c2c <strtoul>
     e58:	60 93 8b 02 	sts	0x028B, r22
     e5c:	70 93 8c 02 	sts	0x028C, r23
     e60:	80 93 8d 02 	sts	0x028D, r24
     e64:	90 93 8e 02 	sts	0x028E, r25
					UPDATE_CONSTANTS__EEMEM;
     e68:	44 e1       	ldi	r20, 0x14	; 20
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	60 e1       	ldi	r22, 0x10	; 16
     e6e:	70 e0       	ldi	r23, 0x00	; 0
     e70:	8b e7       	ldi	r24, 0x7B	; 123
     e72:	92 e0       	ldi	r25, 0x02	; 2
     e74:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <__eeupd_block_m32u4>
					SEND_CONFIRMATION;
     e78:	67 e5       	ldi	r22, 0x57	; 87
     e7a:	71 e0       	ldi	r23, 0x01	; 1
     e7c:	c3 c0       	rjmp	.+390    	; 0x1004 <__stack+0x505>
					SEND_CONFIRMATION;
					break;
				}
				case LCD_AFTERMEAS:
				{
					if (System.IsLCDRegistered)
     e7e:	80 91 9e 02 	lds	r24, 0x029E
     e82:	80 ff       	sbrs	r24, 0
     e84:	bd c0       	rjmp	.+378    	; 0x1000 <__stack+0x501>
					{
						byte TimeStamp[10], Capacity[10], TicksCP[7], TicksDP[7], Progress[5];

						RingBuffer_GetAsString(&USB_Buffer, TimeStamp, ' ');
     e86:	40 e2       	ldi	r20, 0x20	; 32
     e88:	b6 01       	movw	r22, r12
     e8a:	85 ec       	ldi	r24, 0xC5	; 197
     e8c:	91 e0       	ldi	r25, 0x01	; 1
     e8e:	83 d4       	rcall	.+2310   	; 0x1796 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, Capacity, ' ');
     e90:	40 e2       	ldi	r20, 0x20	; 32
     e92:	be 01       	movw	r22, r28
     e94:	6f 5f       	subi	r22, 0xFF	; 255
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	85 ec       	ldi	r24, 0xC5	; 197
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	7c d4       	rcall	.+2296   	; 0x1796 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, TicksCP, ' ');
     e9e:	40 e2       	ldi	r20, 0x20	; 32
     ea0:	b1 01       	movw	r22, r2
     ea2:	85 ec       	ldi	r24, 0xC5	; 197
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	77 d4       	rcall	.+2286   	; 0x1796 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, TicksDP, ' ');
     ea8:	40 e2       	ldi	r20, 0x20	; 32
     eaa:	b5 01       	movw	r22, r10
     eac:	85 ec       	ldi	r24, 0xC5	; 197
     eae:	91 e0       	ldi	r25, 0x01	; 1
     eb0:	72 d4       	rcall	.+2276   	; 0x1796 <RingBuffer_GetAsString>
						RingBuffer_GetAsString(&USB_Buffer, Progress, ENDCMD);
     eb2:	4a e0       	ldi	r20, 0x0A	; 10
     eb4:	b4 01       	movw	r22, r8
     eb6:	85 ec       	ldi	r24, 0xC5	; 197
     eb8:	91 e0       	ldi	r25, 0x01	; 1
     eba:	6d d4       	rcall	.+2266   	; 0x1796 <RingBuffer_GetAsString>

						lcd_cls();
     ebc:	49 d2       	rcall	.+1170   	; 0x1350 <lcd_cls>
						if (Progress[0])
     ebe:	8b a1       	ldd	r24, Y+35	; 0x23
     ec0:	88 23       	and	r24, r24
     ec2:	d1 f0       	breq	.+52     	; 0xef8 <__stack+0x3f9>
						{
							fprintf_P(&LCD_Stream, PSTR("t %s "), TimeStamp);
     ec4:	df 92       	push	r13
     ec6:	cf 92       	push	r12
     ec8:	8c e4       	ldi	r24, 0x4C	; 76
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	9f 93       	push	r25
     ece:	8f 93       	push	r24
     ed0:	ff 92       	push	r15
     ed2:	ef 92       	push	r14
     ed4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
							fprintf_P(&LCD_Stream, PSTR("P %s/100"), Progress);
     ed8:	9f 92       	push	r9
     eda:	8f 92       	push	r8
     edc:	83 e4       	ldi	r24, 0x43	; 67
     ede:	91 e0       	ldi	r25, 0x01	; 1
     ee0:	9f 93       	push	r25
     ee2:	8f 93       	push	r24
     ee4:	ff 92       	push	r15
     ee6:	ef 92       	push	r14
     ee8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	10 c0       	rjmp	.+32     	; 0xf18 <__stack+0x419>
						}
						else
						{
							fprintf_P(&LCD_Stream, PSTR("TimeStamp  %s"), TimeStamp);
     ef8:	df 92       	push	r13
     efa:	cf 92       	push	r12
     efc:	85 e3       	ldi	r24, 0x35	; 53
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	ff 92       	push	r15
     f06:	ef 92       	push	r14
     f08:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
						}
						lcd_locate(1, 0);
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	23 d2       	rcall	.+1094   	; 0x1364 <lcd_locate>
						fprintf_P(&LCD_Stream, PSTR("Capacity %s pF"), Capacity);
     f1e:	21 e0       	ldi	r18, 0x01	; 1
     f20:	30 e0       	ldi	r19, 0x00	; 0
     f22:	2c 0f       	add	r18, r28
     f24:	3d 1f       	adc	r19, r29
     f26:	3f 93       	push	r19
     f28:	2f 93       	push	r18
     f2a:	86 e2       	ldi	r24, 0x26	; 38
     f2c:	91 e0       	ldi	r25, 0x01	; 1
     f2e:	9f 93       	push	r25
     f30:	8f 93       	push	r24
     f32:	ff 92       	push	r15
     f34:	ef 92       	push	r14
     f36:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
						lcd_locate(2, 0);
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	12 d2       	rcall	.+1060   	; 0x1364 <lcd_locate>
						fprintf_P(&LCD_Stream, PSTR("Ticks %s / "), TicksCP);
     f40:	3f 92       	push	r3
     f42:	2f 92       	push	r2
     f44:	8a e1       	ldi	r24, 0x1A	; 26
     f46:	91 e0       	ldi	r25, 0x01	; 1
     f48:	9f 93       	push	r25
     f4a:	8f 93       	push	r24
     f4c:	ff 92       	push	r15
     f4e:	ef 92       	push	r14
     f50:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
						fprintf_P(&LCD_Stream, PSTR("%s"), TicksDP);
     f54:	bf 92       	push	r11
     f56:	af 92       	push	r10
     f58:	87 e1       	ldi	r24, 0x17	; 23
     f5a:	91 e0       	ldi	r25, 0x01	; 1
     f5c:	9f 93       	push	r25
     f5e:	8f 93       	push	r24
     f60:	ff 92       	push	r15
     f62:	ef 92       	push	r14
     f64:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
						lcd_locate(3, 0);
     f68:	60 e0       	ldi	r22, 0x00	; 0
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	fb d1       	rcall	.+1014   	; 0x1364 <lcd_locate>
						if (System.IsSHTRegistered)
     f6e:	80 91 9e 02 	lds	r24, 0x029E
     f72:	0f b6       	in	r0, 0x3f	; 63
     f74:	f8 94       	cli
     f76:	de bf       	out	0x3e, r29	; 62
     f78:	0f be       	out	0x3f, r0	; 63
     f7a:	cd bf       	out	0x3d, r28	; 61
     f7c:	81 ff       	sbrs	r24, 1
     f7e:	34 c0       	rjmp	.+104    	; 0xfe8 <__stack+0x4e9>
						{
							fprintf_P(&LCD_Stream, PSTR("T %s%cC "), dtostr(System.Temperature, AFTERPOINT), 223);
     f80:	60 91 a4 03 	lds	r22, 0x03A4
     f84:	70 91 a5 03 	lds	r23, 0x03A5
     f88:	80 91 a6 03 	lds	r24, 0x03A6
     f8c:	90 91 a7 03 	lds	r25, 0x03A7
     f90:	41 e0       	ldi	r20, 0x01	; 1
     f92:	b8 da       	rcall	.-2704   	; 0x504 <dtostr>
     f94:	1f 92       	push	r1
     f96:	2f ed       	ldi	r18, 0xDF	; 223
     f98:	2f 93       	push	r18
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	8e e0       	ldi	r24, 0x0E	; 14
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	9f 93       	push	r25
     fa4:	8f 93       	push	r24
     fa6:	ff 92       	push	r15
     fa8:	ef 92       	push	r14
     faa:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
							lcd_locate(3, 10);
     fae:	6a e0       	ldi	r22, 0x0A	; 10
     fb0:	83 e0       	ldi	r24, 0x03	; 3
     fb2:	d8 d1       	rcall	.+944    	; 0x1364 <lcd_locate>
							fprintf_P(&LCD_Stream, PSTR("RH %s %%"), dtostr(System.Humidity, AFTERPOINT));
     fb4:	60 91 a8 03 	lds	r22, 0x03A8
     fb8:	70 91 a9 03 	lds	r23, 0x03A9
     fbc:	80 91 aa 03 	lds	r24, 0x03AA
     fc0:	90 91 ab 03 	lds	r25, 0x03AB
     fc4:	41 e0       	ldi	r20, 0x01	; 1
     fc6:	9e da       	rcall	.-2756   	; 0x504 <dtostr>
     fc8:	9f 93       	push	r25
     fca:	8f 93       	push	r24
     fcc:	85 e0       	ldi	r24, 0x05	; 5
     fce:	91 e0       	ldi	r25, 0x01	; 1
     fd0:	9f 93       	push	r25
     fd2:	8f 93       	push	r24
     fd4:	ff 92       	push	r15
     fd6:	ef 92       	push	r14
     fd8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	0c c0       	rjmp	.+24     	; 0x1000 <__stack+0x501>
						}
						else
						{
							fprintf_P(&LCD_Stream, PSTR("T ------  RH ------ "));
     fe8:	20 ef       	ldi	r18, 0xF0	; 240
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	3f 93       	push	r19
     fee:	2f 93       	push	r18
     ff0:	ff 92       	push	r15
     ff2:	ef 92       	push	r14
     ff4:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
     ff8:	0f 90       	pop	r0
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	0f 90       	pop	r0
						}
					}
					SEND_CONFIRMATION;
    1000:	6b ee       	ldi	r22, 0xEB	; 235
    1002:	70 e0       	ldi	r23, 0x00	; 0
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	91 e0       	ldi	r25, 0x01	; 1
    1008:	0e 94 c2 10 	call	0x2184	; 0x2184 <CDC_Device_SendString_P>
    100c:	10 c0       	rjmp	.+32     	; 0x102e <__stack+0x52f>
					break;
				}
				default:
				{
					fprintf_P(&USB_Stream, PSTR("Error: Unrecognized Command: %c\r\n"), CMD_Buffer[0]);
    100e:	1f 92       	push	r1
    1010:	8f 93       	push	r24
    1012:	89 ec       	ldi	r24, 0xC9	; 201
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	9f 93       	push	r25
    1018:	8f 93       	push	r24
    101a:	1f 93       	push	r17
    101c:	0f 93       	push	r16
    101e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <fprintf_P>
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
				}
			}
		}
		RingBuffer_Clear(&USB_Buffer);
    102e:	85 ec       	ldi	r24, 0xC5	; 197
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	65 d3       	rcall	.+1738   	; 0x16fe <RingBuffer_Clear>
		LED_CMD_REC_OFF;
    1034:	47 98       	cbi	0x08, 7	; 8
		/* Check & Accumulate Available Data from USB */
		USB_ReceiveData();
		/* Parse Received Commands from Host */
		CMD_Parse();
		/* USB Communication Required Tasks */
		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	91 e0       	ldi	r25, 0x01	; 1
    103a:	0e 94 4f 11 	call	0x229e	; 0x229e <CDC_Device_USBTask>
		USB_USBTask();
    103e:	0e 94 84 10 	call	0x2108	; 0x2108 <USB_USBTask>
	}
    1042:	1a cc       	rjmp	.-1996   	; 0x878 <main+0x1e4>

00001044 <__vector_16>:
	cbi(TIMSK1, ICIE1);
}

/* Input Capture Interrupt */
ISR(TIMER1_CAPT_vect, ISR_BLOCK)
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	8f 93       	push	r24
    1050:	9f 93       	push	r25
	n_ts = ICR1;
    1052:	80 91 86 00 	lds	r24, 0x0086
    1056:	90 91 87 00 	lds	r25, 0x0087
    105a:	90 93 9d 02 	sts	0x029D, r25
    105e:	80 93 9c 02 	sts	0x029C, r24
	if (m_gate == 0)
    1062:	80 91 af 03 	lds	r24, 0x03AF
    1066:	81 11       	cpse	r24, r1
    1068:	08 c0       	rjmp	.+16     	; 0x107a <__vector_16+0x36>
	{
		n_ts_first = n_ts;
    106a:	80 91 9c 02 	lds	r24, 0x029C
    106e:	90 91 9d 02 	lds	r25, 0x029D
    1072:	90 93 b2 03 	sts	0x03B2, r25
    1076:	80 93 b1 03 	sts	0x03B1, r24
	}
	if (n_ts > 0xFFFF)
    107a:	80 91 9c 02 	lds	r24, 0x029C
    107e:	90 91 9d 02 	lds	r25, 0x029D
	{
		stop_meas = 1;
	}
	else
	{
		m_gate++;
    1082:	80 91 af 03 	lds	r24, 0x03AF
    1086:	8f 5f       	subi	r24, 0xFF	; 255
    1088:	80 93 af 03 	sts	0x03AF, r24
	}
}
    108c:	9f 91       	pop	r25
    108e:	8f 91       	pop	r24
    1090:	0f 90       	pop	r0
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	0f 90       	pop	r0
    1096:	1f 90       	pop	r1
    1098:	18 95       	reti

0000109a <__vector_20>:

ISR(TIMER1_OVF_vect)
{
    109a:	1f 92       	push	r1
    109c:	0f 92       	push	r0
    109e:	0f b6       	in	r0, 0x3f	; 63
    10a0:	0f 92       	push	r0
    10a2:	11 24       	eor	r1, r1
    10a4:	8f 93       	push	r24
	timer_ovf = 1;
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	80 93 ae 03 	sts	0x03AE, r24
	stop_meas = 1;
    10ac:	80 93 b0 03 	sts	0x03B0, r24
}
    10b0:	8f 91       	pop	r24
    10b2:	0f 90       	pop	r0
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	0f 90       	pop	r0
    10b8:	1f 90       	pop	r1
    10ba:	18 95       	reti

000010bc <EVENT_USB_Device_Connect>:
}

/* Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
	LED_USB_CONN;
    10bc:	5d 9a       	sbi	0x0b, 5	; 11
    10be:	08 95       	ret

000010c0 <EVENT_USB_Device_Disconnect>:
}
/* Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
	LED_USB_ERROR;
    10c0:	28 98       	cbi	0x05, 0	; 5
	LED_USB_DISCONN;
    10c2:	5d 98       	cbi	0x0b, 5	; 11
	System.IsHostReady = false;
    10c4:	ee e9       	ldi	r30, 0x9E	; 158
    10c6:	f2 e0       	ldi	r31, 0x02	; 2
    10c8:	80 81       	ld	r24, Z
    10ca:	8b 7f       	andi	r24, 0xFB	; 251
    10cc:	80 83       	st	Z, r24
    10ce:	08 95       	ret

000010d0 <EVENT_USB_Device_ConfigurationChanged>:
}
/* Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;
	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	91 e0       	ldi	r25, 0x01	; 1
    10d4:	0e 94 9d 10 	call	0x213a	; 0x213a <CDC_Device_ConfigureEndpoints>
	if (ConfigSuccess)
    10d8:	88 23       	and	r24, r24
    10da:	11 f0       	breq	.+4      	; 0x10e0 <EVENT_USB_Device_ConfigurationChanged+0x10>
	{
		LED_USB_READY;
    10dc:	28 9a       	sbi	0x05, 0	; 5
    10de:	08 95       	ret
	}
	else
	{
		LED_USB_ERROR;
    10e0:	28 98       	cbi	0x05, 0	; 5
    10e2:	08 95       	ret

000010e4 <EVENT_USB_Device_ControlRequest>:
	}
}
/* Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0c 94 b6 11 	jmp	0x236c	; 0x236c <CDC_Device_ProcessControlRequest>

000010ec <EVENT_CDC_Device_ControLineStateChanged>:
}
/* CDC class driver callback function the processing of changes to the virtual control lines sent from the host. */
void EVENT_CDC_Device_ControLineStateChanged(USB_ClassInfo_CDC_Device_t *const CDCInterfaceInfo)
{
	System.IsHostReady = (CDCInterfaceInfo->State.ControlLineStates.HostToDevice & CDC_CONTROL_LINE_OUT_DTR) != 0;
    10ec:	fc 01       	movw	r30, r24
    10ee:	90 89       	ldd	r25, Z+16	; 0x10
    10f0:	80 91 9e 02 	lds	r24, 0x029E
    10f4:	90 fb       	bst	r25, 0
    10f6:	82 f9       	bld	r24, 2
    10f8:	80 93 9e 02 	sts	0x029E, r24
	if (System.IsHostReady)
    10fc:	80 91 9e 02 	lds	r24, 0x029E
    1100:	82 ff       	sbrs	r24, 2
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <EVENT_CDC_Device_ControLineStateChanged+0x1c>
	{
		LED_USB_READY;
    1104:	28 9a       	sbi	0x05, 0	; 5
    1106:	08 95       	ret
	}
	else
	{
		LED_USB_ERROR;
    1108:	28 98       	cbi	0x05, 0	; 5
    110a:	08 95       	ret

0000110c <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    110c:	29 2f       	mov	r18, r25
    110e:	33 27       	eor	r19, r19
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	59 f0       	breq	.+22     	; 0x112c <CALLBACK_USB_GetDescriptor+0x20>
    1116:	23 30       	cpi	r18, 0x03	; 3
    1118:	31 05       	cpc	r19, r1
    111a:	69 f0       	breq	.+26     	; 0x1136 <CALLBACK_USB_GetDescriptor+0x2a>
    111c:	21 30       	cpi	r18, 0x01	; 1
    111e:	31 05       	cpc	r19, r1
    1120:	e9 f4       	brne	.+58     	; 0x115c <CALLBACK_USB_GetDescriptor+0x50>
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    1122:	82 e1       	ldi	r24, 0x12	; 18
    1124:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    1126:	22 e8       	ldi	r18, 0x82	; 130
    1128:	33 e0       	ldi	r19, 0x03	; 3
    112a:	1c c0       	rjmp	.+56     	; 0x1164 <CALLBACK_USB_GetDescriptor+0x58>
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    112c:	8e e3       	ldi	r24, 0x3E	; 62
    112e:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    1130:	24 e4       	ldi	r18, 0x44	; 68
    1132:	33 e0       	ldi	r19, 0x03	; 3
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    1134:	17 c0       	rjmp	.+46     	; 0x1164 <CALLBACK_USB_GetDescriptor+0x58>
		case DTYPE_String:
			switch (DescriptorNumber)
    1136:	99 27       	eor	r25, r25
    1138:	81 30       	cpi	r24, 0x01	; 1
    113a:	91 05       	cpc	r25, r1
    113c:	49 f0       	breq	.+18     	; 0x1150 <CALLBACK_USB_GetDescriptor+0x44>
    113e:	28 f0       	brcs	.+10     	; 0x114a <CALLBACK_USB_GetDescriptor+0x3e>
    1140:	02 97       	sbiw	r24, 0x02	; 2
    1142:	61 f4       	brne	.+24     	; 0x115c <CALLBACK_USB_GetDescriptor+0x50>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1144:	e6 ec       	ldi	r30, 0xC6	; 198
    1146:	f2 e0       	ldi	r31, 0x02	; 2
    1148:	05 c0       	rjmp	.+10     	; 0x1154 <CALLBACK_USB_GetDescriptor+0x48>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    114a:	e0 e4       	ldi	r30, 0x40	; 64
    114c:	f3 e0       	ldi	r31, 0x03	; 3
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <CALLBACK_USB_GetDescriptor+0x48>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    1150:	e0 e0       	ldi	r30, 0x00	; 0
    1152:	f3 e0       	ldi	r31, 0x03	; 3
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    1154:	84 91       	lpm	r24, Z
    1156:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
    1158:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <CALLBACK_USB_GetDescriptor+0x58>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    1164:	fa 01       	movw	r30, r20
    1166:	31 83       	std	Z+1, r19	; 0x01
    1168:	20 83       	st	Z, r18
	return Size;
}
    116a:	08 95       	ret

0000116c <twi_set_bit_rate>:

	twi_set_bit_rate(freq);
}

void twi_set_bit_rate(TWI_SCL_FREQ_t freq)
{
    116c:	9b 01       	movw	r18, r22
    116e:	ac 01       	movw	r20, r24
	uint temp = ((F_CPU / freq) - 15);
    1170:	60 e0       	ldi	r22, 0x00	; 0
    1172:	74 e2       	ldi	r23, 0x24	; 36
    1174:	84 ef       	ldi	r24, 0xF4	; 244
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__udivmodsi4>
    117c:	2f 50       	subi	r18, 0x0F	; 15
    117e:	31 09       	sbc	r19, r1
	TWBR = temp / 2 + temp % 2;
    1180:	c9 01       	movw	r24, r18
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	21 70       	andi	r18, 0x01	; 1
    1188:	28 0f       	add	r18, r24
    118a:	20 93 b8 00 	sts	0x00B8, r18
    118e:	08 95       	ret

00001190 <twi_init>:
		if (TWI_SR.error)   { return 0; }

void twi_init(TWI_SCL_FREQ_t freq)
{
	// init status register
	TWI_SR.error = false;
    1190:	ef e8       	ldi	r30, 0x8F	; 143
    1192:	f2 e0       	ldi	r31, 0x02	; 2
    1194:	10 82       	st	Z, r1
	TWI_SR.status = 0;
    1196:	11 82       	std	Z+1, r1	; 0x01

	DDRD  |= (1 << PD0) | (1 << PD1);
    1198:	2a b1       	in	r18, 0x0a	; 10
    119a:	23 60       	ori	r18, 0x03	; 3
    119c:	2a b9       	out	0x0a, r18	; 10
	PORTD |= (1 << PD0) | (1 << PD1);
    119e:	2b b1       	in	r18, 0x0b	; 11
    11a0:	23 60       	ori	r18, 0x03	; 3
    11a2:	2b b9       	out	0x0b, r18	; 11

	twi_set_bit_rate(freq);
    11a4:	e3 cf       	rjmp	.-58     	; 0x116c <twi_set_bit_rate>

000011a6 <twi_error>:
	TWBR = temp / 2 + temp % 2;
}

bool twi_error()
{
	bool err = TWI_SR.error;
    11a6:	ef e8       	ldi	r30, 0x8F	; 143
    11a8:	f2 e0       	ldi	r31, 0x02	; 2
    11aa:	80 81       	ld	r24, Z
	TWI_SR.error = false;
    11ac:	10 82       	st	Z, r1
	return err;
}
    11ae:	08 95       	ret

000011b0 <twi_status>:

byte twi_status(void)
{
	return TWI_SR.status;
}
    11b0:	80 91 90 02 	lds	r24, 0x0290
    11b4:	08 95       	ret

000011b6 <twi_start>:

void twi_start(void)
{
	TW_CHECK_ERROR_STATUS;
    11b6:	80 91 8f 02 	lds	r24, 0x028F
    11ba:	81 11       	cpse	r24, r1
    11bc:	07 c0       	rjmp	.+14     	; 0x11cc <twi_start+0x16>

	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTA);
    11be:	84 ea       	ldi	r24, 0xA4	; 164
    11c0:	80 93 bc 00 	sts	0x00BC, r24

	loop_until_bit_is_set(TWCR, TWINT);
    11c4:	80 91 bc 00 	lds	r24, 0x00BC
    11c8:	87 ff       	sbrs	r24, 7
    11ca:	fc cf       	rjmp	.-8      	; 0x11c4 <twi_start+0xe>
    11cc:	08 95       	ret

000011ce <twi_stop>:
#endif
}

void twi_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    11ce:	84 e9       	ldi	r24, 0x94	; 148
    11d0:	80 93 bc 00 	sts	0x00BC, r24
    11d4:	08 95       	ret

000011d6 <twi_write_sla>:
}

void twi_write_sla(byte SLA)
{
	TW_CHECK_ERROR_STATUS;
    11d6:	90 91 8f 02 	lds	r25, 0x028F
    11da:	91 11       	cpse	r25, r1
    11dc:	1b c0       	rjmp	.+54     	; 0x1214 <twi_write_sla+0x3e>

	TWDR = SLA;
    11de:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    11e2:	84 e8       	ldi	r24, 0x84	; 132
    11e4:	80 93 bc 00 	sts	0x00BC, r24

	loop_until_bit_is_set(TWCR, TWINT);
    11e8:	80 91 bc 00 	lds	r24, 0x00BC
    11ec:	87 ff       	sbrs	r24, 7
    11ee:	fc cf       	rjmp	.-8      	; 0x11e8 <twi_write_sla+0x12>

	if (TW_STATUS != TW_MT_SLA_ACK && TW_STATUS != TW_MR_SLA_ACK)
    11f0:	80 91 b9 00 	lds	r24, 0x00B9
    11f4:	88 7f       	andi	r24, 0xF8	; 248
    11f6:	88 31       	cpi	r24, 0x18	; 24
    11f8:	69 f0       	breq	.+26     	; 0x1214 <twi_write_sla+0x3e>
    11fa:	80 91 b9 00 	lds	r24, 0x00B9
    11fe:	88 7f       	andi	r24, 0xF8	; 248
    1200:	80 34       	cpi	r24, 0x40	; 64
    1202:	41 f0       	breq	.+16     	; 0x1214 <twi_write_sla+0x3e>
	{
		TWI_SR.error = true;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	80 93 8f 02 	sts	0x028F, r24
		TWI_SR.status = TW_STATUS;
    120a:	80 91 b9 00 	lds	r24, 0x00B9
    120e:	88 7f       	andi	r24, 0xF8	; 248
    1210:	80 93 90 02 	sts	0x0290, r24
    1214:	08 95       	ret

00001216 <twi_detect>:
	}
}

bool twi_detect(byte SLA)
{
    1216:	cf 93       	push	r28
    1218:	c8 2f       	mov	r28, r24
	twi_start();
    121a:	cd df       	rcall	.-102    	; 0x11b6 <twi_start>
	twi_write_sla(TW_SLA_W(SLA));
    121c:	8c 2f       	mov	r24, r28
    121e:	88 0f       	add	r24, r24
    1220:	da df       	rcall	.-76     	; 0x11d6 <twi_write_sla>
#endif
}

void twi_stop(void)
{
	TWCR = _BV(TWINT) | _BV(TWEN) | _BV(TWSTO);
    1222:	84 e9       	ldi	r24, 0x94	; 148
    1224:	80 93 bc 00 	sts	0x00BC, r24
	TWBR = temp / 2 + temp % 2;
}

bool twi_error()
{
	bool err = TWI_SR.error;
    1228:	ef e8       	ldi	r30, 0x8F	; 143
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	90 81       	ld	r25, Z
	TWI_SR.error = false;
    122e:	10 82       	st	Z, r1
	twi_start();
	twi_write_sla(TW_SLA_W(SLA));
	twi_stop();

	return !twi_error();
}
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	89 27       	eor	r24, r25
    1234:	cf 91       	pop	r28
    1236:	08 95       	ret

00001238 <twi_write>:

void twi_write(byte data)
{
	TW_CHECK_ERROR_STATUS;
    1238:	90 91 8f 02 	lds	r25, 0x028F
    123c:	91 11       	cpse	r25, r1
    123e:	09 c0       	rjmp	.+18     	; 0x1252 <twi_write+0x1a>

	TWDR = data;
    1240:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = _BV(TWINT) | _BV(TWEN);
    1244:	84 e8       	ldi	r24, 0x84	; 132
    1246:	80 93 bc 00 	sts	0x00BC, r24

	loop_until_bit_is_set(TWCR, TWINT);
    124a:	80 91 bc 00 	lds	r24, 0x00BC
    124e:	87 ff       	sbrs	r24, 7
    1250:	fc cf       	rjmp	.-8      	; 0x124a <twi_write+0x12>
    1252:	08 95       	ret

00001254 <twi_read>:
#endif
}

byte twi_read(bool ACK)
{
	TW_CHECK_ERROR_STATUS_RET;
    1254:	90 91 8f 02 	lds	r25, 0x028F
    1258:	91 11       	cpse	r25, r1
    125a:	24 c0       	rjmp	.+72     	; 0x12a4 <twi_read+0x50>

	TWCR = _BV(TWINT) | _BV(TWEN) | (ACK << TWEA);
    125c:	90 e4       	ldi	r25, 0x40	; 64
    125e:	89 9f       	mul	r24, r25
    1260:	90 01       	movw	r18, r0
    1262:	11 24       	eor	r1, r1
    1264:	24 68       	ori	r18, 0x84	; 132
    1266:	20 93 bc 00 	sts	0x00BC, r18

	loop_until_bit_is_set(TWCR, TWINT);
    126a:	90 91 bc 00 	lds	r25, 0x00BC
    126e:	97 ff       	sbrs	r25, 7
    1270:	fc cf       	rjmp	.-8      	; 0x126a <twi_read+0x16>

	if (TW_STATUS != ( ACK ? TW_MR_DATA_ACK : TW_MR_DATA_NACK ))
    1272:	20 91 b9 00 	lds	r18, 0x00B9
    1276:	28 7f       	andi	r18, 0xF8	; 248
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	81 11       	cpse	r24, r1
    127c:	03 c0       	rjmp	.+6      	; 0x1284 <twi_read+0x30>
    127e:	88 e5       	ldi	r24, 0x58	; 88
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <twi_read+0x34>
    1284:	80 e5       	ldi	r24, 0x50	; 80
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	82 17       	cp	r24, r18
    128a:	93 07       	cpc	r25, r19
    128c:	41 f0       	breq	.+16     	; 0x129e <twi_read+0x4a>
	{
		TWI_SR.error = true;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	80 93 8f 02 	sts	0x028F, r24
		TWI_SR.status = TW_STATUS;
    1294:	80 91 b9 00 	lds	r24, 0x00B9
    1298:	88 7f       	andi	r24, 0xF8	; 248
    129a:	80 93 90 02 	sts	0x0290, r24
	}

	return TWDR;
    129e:	80 91 bb 00 	lds	r24, 0x00BB
    12a2:	08 95       	ret
#endif
}

byte twi_read(bool ACK)
{
	TW_CHECK_ERROR_STATUS_RET;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
		TWI_SR.error = true;
		TWI_SR.status = TW_STATUS;
	}

	return TWDR;
}
    12a6:	08 95       	ret

000012a8 <lcd_send>:
	while (*text)
	{
		lcd_char(*text);
		text++;
	}
}
    12a8:	ef 92       	push	r14
    12aa:	ff 92       	push	r15
    12ac:	0f 93       	push	r16
    12ae:	1f 93       	push	r17
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <lcd_send+0xe>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <lcd_send+0x10>
    12b8:	cd b7       	in	r28, 0x3d	; 61
    12ba:	de b7       	in	r29, 0x3e	; 62
    12bc:	90 91 91 02 	lds	r25, 0x0291
    12c0:	69 2b       	or	r22, r25
    12c2:	38 2f       	mov	r19, r24
    12c4:	32 95       	swap	r19
    12c6:	3f 70       	andi	r19, 0x0F	; 15
    12c8:	30 ff       	sbrs	r19, 0
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <lcd_send+0x28>
    12cc:	20 e1       	ldi	r18, 0x10	; 16
    12ce:	01 c0       	rjmp	.+2      	; 0x12d2 <lcd_send+0x2a>
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	31 fd       	sbrc	r19, 1
    12d4:	20 62       	ori	r18, 0x20	; 32
    12d6:	32 fd       	sbrc	r19, 2
    12d8:	20 64       	ori	r18, 0x40	; 64
    12da:	38 70       	andi	r19, 0x08	; 8
    12dc:	09 f0       	breq	.+2      	; 0x12e0 <lcd_send+0x38>
    12de:	20 68       	ori	r18, 0x80	; 128
    12e0:	26 2b       	or	r18, r22
    12e2:	80 ff       	sbrs	r24, 0
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <lcd_send+0x42>
    12e6:	90 e1       	ldi	r25, 0x10	; 16
    12e8:	01 c0       	rjmp	.+2      	; 0x12ec <lcd_send+0x44>
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	81 fd       	sbrc	r24, 1
    12ee:	90 62       	ori	r25, 0x20	; 32
    12f0:	82 fd       	sbrc	r24, 2
    12f2:	90 64       	ori	r25, 0x40	; 64
    12f4:	83 fd       	sbrc	r24, 3
    12f6:	90 68       	ori	r25, 0x80	; 128
    12f8:	96 2b       	or	r25, r22
    12fa:	82 2f       	mov	r24, r18
    12fc:	84 60       	ori	r24, 0x04	; 4
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	2a 83       	std	Y+2, r18	; 0x02
    1302:	89 2f       	mov	r24, r25
    1304:	84 60       	ori	r24, 0x04	; 4
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	55 df       	rcall	.-342    	; 0x11b6 <twi_start>
    130c:	8e e4       	ldi	r24, 0x4E	; 78
    130e:	63 df       	rcall	.-314    	; 0x11d6 <twi_write_sla>
    1310:	8e 01       	movw	r16, r28
    1312:	0f 5f       	subi	r16, 0xFF	; 255
    1314:	1f 4f       	sbci	r17, 0xFF	; 255
    1316:	7e 01       	movw	r14, r28
    1318:	85 e0       	ldi	r24, 0x05	; 5
    131a:	e8 0e       	add	r14, r24
    131c:	f1 1c       	adc	r15, r1
    131e:	f8 01       	movw	r30, r16
    1320:	81 91       	ld	r24, Z+
    1322:	8f 01       	movw	r16, r30
    1324:	89 df       	rcall	.-238    	; 0x1238 <twi_write>
    1326:	0e 15       	cp	r16, r14
    1328:	1f 05       	cpc	r17, r15
    132a:	c9 f7       	brne	.-14     	; 0x131e <lcd_send+0x76>
    132c:	50 df       	rcall	.-352    	; 0x11ce <twi_stop>
    132e:	8f ed       	ldi	r24, 0xDF	; 223
    1330:	91 e0       	ldi	r25, 0x01	; 1
    1332:	01 97       	sbiw	r24, 0x01	; 1
    1334:	f1 f7       	brne	.-4      	; 0x1332 <lcd_send+0x8a>
    1336:	00 c0       	rjmp	.+0      	; 0x1338 <lcd_send+0x90>
    1338:	00 00       	nop
    133a:	0f 90       	pop	r0
    133c:	0f 90       	pop	r0
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	08 95       	ret

00001350 <lcd_cls>:
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	a9 df       	rcall	.-174    	; 0x12a8 <lcd_send>
    1356:	8f e8       	ldi	r24, 0x8F	; 143
    1358:	9c e4       	ldi	r25, 0x4C	; 76
    135a:	01 97       	sbiw	r24, 0x01	; 1
    135c:	f1 f7       	brne	.-4      	; 0x135a <lcd_cls+0xa>
    135e:	00 c0       	rjmp	.+0      	; 0x1360 <lcd_cls+0x10>
    1360:	00 00       	nop
    1362:	08 95       	ret

00001364 <lcd_locate>:
    1364:	81 30       	cpi	r24, 0x01	; 1
    1366:	31 f0       	breq	.+12     	; 0x1374 <lcd_locate+0x10>
    1368:	82 30       	cpi	r24, 0x02	; 2
    136a:	31 f0       	breq	.+12     	; 0x1378 <lcd_locate+0x14>
    136c:	83 30       	cpi	r24, 0x03	; 3
    136e:	31 f0       	breq	.+12     	; 0x137c <lcd_locate+0x18>
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	05 c0       	rjmp	.+10     	; 0x137e <lcd_locate+0x1a>
    1374:	98 e2       	ldi	r25, 0x28	; 40
    1376:	03 c0       	rjmp	.+6      	; 0x137e <lcd_locate+0x1a>
    1378:	94 e1       	ldi	r25, 0x14	; 20
    137a:	01 c0       	rjmp	.+2      	; 0x137e <lcd_locate+0x1a>
    137c:	94 e5       	ldi	r25, 0x54	; 84
    137e:	80 e8       	ldi	r24, 0x80	; 128
    1380:	86 0f       	add	r24, r22
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	89 0f       	add	r24, r25
    1386:	90 cf       	rjmp	.-224    	; 0x12a8 <lcd_send>

00001388 <lcd_create_stream>:
    1388:	fc 01       	movw	r30, r24
    138a:	8e e0       	ldi	r24, 0x0E	; 14
    138c:	df 01       	movw	r26, r30
    138e:	1d 92       	st	X+, r1
    1390:	8a 95       	dec	r24
    1392:	e9 f7       	brne	.-6      	; 0x138e <lcd_create_stream+0x6>
    1394:	82 e0       	ldi	r24, 0x02	; 2
    1396:	83 83       	std	Z+3, r24	; 0x03
    1398:	84 e3       	ldi	r24, 0x34	; 52
    139a:	9a e0       	ldi	r25, 0x0A	; 10
    139c:	91 87       	std	Z+9, r25	; 0x09
    139e:	80 87       	std	Z+8, r24	; 0x08
    13a0:	08 95       	ret

000013a2 <lcd_backlight_on>:
    13a2:	88 e0       	ldi	r24, 0x08	; 8
    13a4:	80 93 91 02 	sts	0x0291, r24
    13a8:	06 df       	rcall	.-500    	; 0x11b6 <twi_start>
    13aa:	8e e4       	ldi	r24, 0x4E	; 78
    13ac:	14 df       	rcall	.-472    	; 0x11d6 <twi_write_sla>
    13ae:	80 91 91 02 	lds	r24, 0x0291
    13b2:	80 6f       	ori	r24, 0xF0	; 240
    13b4:	41 df       	rcall	.-382    	; 0x1238 <twi_write>
    13b6:	0b cf       	rjmp	.-490    	; 0x11ce <twi_stop>

000013b8 <lcd_init>:
    13b8:	ef 92       	push	r14
    13ba:	ff 92       	push	r15
    13bc:	0f 93       	push	r16
    13be:	1f 93       	push	r17
    13c0:	cf 93       	push	r28
    13c2:	df 93       	push	r29
    13c4:	00 d0       	rcall	.+0      	; 0x13c6 <lcd_init+0xe>
    13c6:	00 d0       	rcall	.+0      	; 0x13c8 <lcd_init+0x10>
    13c8:	cd b7       	in	r28, 0x3d	; 61
    13ca:	de b7       	in	r29, 0x3e	; 62
    13cc:	ea df       	rcall	.-44     	; 0x13a2 <lcd_backlight_on>
    13ce:	f3 de       	rcall	.-538    	; 0x11b6 <twi_start>
    13d0:	8e e4       	ldi	r24, 0x4E	; 78
    13d2:	01 df       	rcall	.-510    	; 0x11d6 <twi_write_sla>
    13d4:	80 91 91 02 	lds	r24, 0x0291
    13d8:	80 6f       	ori	r24, 0xF0	; 240
    13da:	2e df       	rcall	.-420    	; 0x1238 <twi_write>
    13dc:	f8 de       	rcall	.-528    	; 0x11ce <twi_stop>
    13de:	28 98       	cbi	0x05, 0	; 5
    13e0:	8f e5       	ldi	r24, 0x5F	; 95
    13e2:	9a ee       	ldi	r25, 0xEA	; 234
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	f1 f7       	brne	.-4      	; 0x13e4 <lcd_init+0x2c>
    13e8:	00 c0       	rjmp	.+0      	; 0x13ea <lcd_init+0x32>
    13ea:	00 00       	nop
    13ec:	80 e3       	ldi	r24, 0x30	; 48
    13ee:	89 83       	std	Y+1, r24	; 0x01
    13f0:	8a 83       	std	Y+2, r24	; 0x02
    13f2:	8b 83       	std	Y+3, r24	; 0x03
    13f4:	80 e2       	ldi	r24, 0x20	; 32
    13f6:	8c 83       	std	Y+4, r24	; 0x04
    13f8:	de de       	rcall	.-580    	; 0x11b6 <twi_start>
    13fa:	8e e4       	ldi	r24, 0x4E	; 78
    13fc:	ec de       	rcall	.-552    	; 0x11d6 <twi_write_sla>
    13fe:	fe 01       	movw	r30, r28
    1400:	31 96       	adiw	r30, 0x01	; 1
    1402:	7f 01       	movw	r14, r30
    1404:	10 e0       	ldi	r17, 0x00	; 0
    1406:	f7 01       	movw	r30, r14
    1408:	01 91       	ld	r16, Z+
    140a:	7f 01       	movw	r14, r30
    140c:	80 91 91 02 	lds	r24, 0x0291
    1410:	84 60       	ori	r24, 0x04	; 4
    1412:	80 2b       	or	r24, r16
    1414:	11 df       	rcall	.-478    	; 0x1238 <twi_write>
    1416:	80 91 91 02 	lds	r24, 0x0291
    141a:	80 2b       	or	r24, r16
    141c:	0d df       	rcall	.-486    	; 0x1238 <twi_write>
    141e:	11 11       	cpse	r17, r1
    1420:	06 c0       	rjmp	.+12     	; 0x142e <lcd_init+0x76>
    1422:	8f e8       	ldi	r24, 0x8F	; 143
    1424:	9c e4       	ldi	r25, 0x4C	; 76
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	f1 f7       	brne	.-4      	; 0x1426 <lcd_init+0x6e>
    142a:	00 c0       	rjmp	.+0      	; 0x142c <lcd_init+0x74>
    142c:	00 00       	nop
    142e:	1f 5f       	subi	r17, 0xFF	; 255
    1430:	14 30       	cpi	r17, 0x04	; 4
    1432:	49 f7       	brne	.-46     	; 0x1406 <lcd_init+0x4e>
    1434:	cc de       	rcall	.-616    	; 0x11ce <twi_stop>
    1436:	60 e0       	ldi	r22, 0x00	; 0
    1438:	88 e2       	ldi	r24, 0x28	; 40
    143a:	36 df       	rcall	.-404    	; 0x12a8 <lcd_send>
    143c:	60 e0       	ldi	r22, 0x00	; 0
    143e:	88 e0       	ldi	r24, 0x08	; 8
    1440:	33 df       	rcall	.-410    	; 0x12a8 <lcd_send>
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	86 e0       	ldi	r24, 0x06	; 6
    1446:	30 df       	rcall	.-416    	; 0x12a8 <lcd_send>
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	8c e0       	ldi	r24, 0x0C	; 12
    144c:	2d df       	rcall	.-422    	; 0x12a8 <lcd_send>
    144e:	0f 90       	pop	r0
    1450:	0f 90       	pop	r0
    1452:	0f 90       	pop	r0
    1454:	0f 90       	pop	r0
    1456:	df 91       	pop	r29
    1458:	cf 91       	pop	r28
    145a:	1f 91       	pop	r17
    145c:	0f 91       	pop	r16
    145e:	ff 90       	pop	r15
    1460:	ef 90       	pop	r14
    1462:	76 cf       	rjmp	.-276    	; 0x1350 <lcd_cls>

00001464 <lcd_char>:
    1464:	61 e0       	ldi	r22, 0x01	; 1
    1466:	20 cf       	rjmp	.-448    	; 0x12a8 <lcd_send>

00001468 <lcd_char_stream>:
    1468:	fd df       	rcall	.-6      	; 0x1464 <lcd_char>
    146a:	80 e0       	ldi	r24, 0x00	; 0
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	08 95       	ret

00001470 <lcd_str_P>:

#if USE_LCD_STR_P
void lcd_str_P(const char * text)
{
    1470:	cf 93       	push	r28
    1472:	df 93       	push	r29
    1474:	ec 01       	movw	r28, r24
	register char _char = 0;
	while (1)
	{
		_char = pgm_read_byte(text);
    1476:	fe 01       	movw	r30, r28
    1478:	84 91       	lpm	r24, Z

		if (_char == 0) break;
    147a:	88 23       	and	r24, r24
    147c:	19 f0       	breq	.+6      	; 0x1484 <lcd_str_P+0x14>

		text++;
    147e:	21 96       	adiw	r28, 0x01	; 1
		lcd_char(_char);
    1480:	f1 df       	rcall	.-30     	; 0x1464 <lcd_char>
	}
    1482:	f9 cf       	rjmp	.-14     	; 0x1476 <lcd_str_P+0x6>
}
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	08 95       	ret

0000148a <sht_checkCRC>:
	}
}

void sht_low_pwr(bool value)
{
	SHTSR.low_pwr = value;
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
    148e:	00 d0       	rcall	.+0      	; 0x1490 <sht_checkCRC+0x6>
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	89 83       	std	Y+1, r24	; 0x01
    1496:	6a 83       	std	Y+2, r22	; 0x02
    1498:	fe 01       	movw	r30, r28
    149a:	31 96       	adiw	r30, 0x01	; 1
    149c:	9e 01       	movw	r18, r28
    149e:	2d 5f       	subi	r18, 0xFD	; 253
    14a0:	3f 4f       	sbci	r19, 0xFF	; 255
    14a2:	9f ef       	ldi	r25, 0xFF	; 255
    14a4:	51 e3       	ldi	r21, 0x31	; 49
    14a6:	81 91       	ld	r24, Z+
    14a8:	98 27       	eor	r25, r24
    14aa:	88 e0       	ldi	r24, 0x08	; 8
    14ac:	97 ff       	sbrs	r25, 7
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <sht_checkCRC+0x2c>
    14b0:	99 0f       	add	r25, r25
    14b2:	95 27       	eor	r25, r21
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <sht_checkCRC+0x2e>
    14b6:	99 0f       	add	r25, r25
    14b8:	81 50       	subi	r24, 0x01	; 1
    14ba:	c1 f7       	brne	.-16     	; 0x14ac <sht_checkCRC+0x22>
    14bc:	e2 17       	cp	r30, r18
    14be:	f3 07       	cpc	r31, r19
    14c0:	91 f7       	brne	.-28     	; 0x14a6 <sht_checkCRC+0x1c>
    14c2:	81 e0       	ldi	r24, 0x01	; 1
    14c4:	94 13       	cpse	r25, r20
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	0f 90       	pop	r0
    14ca:	0f 90       	pop	r0
    14cc:	df 91       	pop	r29
    14ce:	cf 91       	pop	r28
    14d0:	08 95       	ret

000014d2 <sht_command>:
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29
    14d6:	ec 01       	movw	r28, r24
    14d8:	6e de       	rcall	.-804    	; 0x11b6 <twi_start>
    14da:	80 ee       	ldi	r24, 0xE0	; 224
    14dc:	7c de       	rcall	.-776    	; 0x11d6 <twi_write_sla>
    14de:	8d 2f       	mov	r24, r29
    14e0:	ab de       	rcall	.-682    	; 0x1238 <twi_write>
    14e2:	8c 2f       	mov	r24, r28
    14e4:	a9 de       	rcall	.-686    	; 0x1238 <twi_write>
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	71 ce       	rjmp	.-798    	; 0x11ce <twi_stop>

000014ec <sht_checkID>:
}

SHT_STATUS_t sht_checkID(void)
{
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
	sht_command(SHT_READID);
    14f2:	88 ec       	ldi	r24, 0xC8	; 200
    14f4:	9f ee       	ldi	r25, 0xEF	; 239
    14f6:	ed df       	rcall	.-38     	; 0x14d2 <sht_command>

	twi_start();
    14f8:	5e de       	rcall	.-836    	; 0x11b6 <twi_start>
	twi_write_sla(TW_SLA_R(SHT_ADDR));
    14fa:	81 ee       	ldi	r24, 0xE1	; 225
    14fc:	6c de       	rcall	.-808    	; 0x11d6 <twi_write_sla>
	byte ID_MSB = twi_read(ACK);
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	a9 de       	rcall	.-686    	; 0x1254 <twi_read>
    1502:	d8 2f       	mov	r29, r24
	byte ID_LSB = twi_read(ACK);
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	a6 de       	rcall	.-692    	; 0x1254 <twi_read>
    1508:	c8 2f       	mov	r28, r24
	byte ID_CRC = twi_read(ACK);
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	a3 de       	rcall	.-698    	; 0x1254 <twi_read>
    150e:	18 2f       	mov	r17, r24
	twi_stop();
    1510:	5e de       	rcall	.-836    	; 0x11ce <twi_stop>

	uint16_t ID = MERGE(ID_MSB, ID_LSB);

	if (sht_checkCRC(ID_MSB, ID_LSB, ID_CRC))
    1512:	41 2f       	mov	r20, r17
    1514:	6c 2f       	mov	r22, r28
    1516:	8d 2f       	mov	r24, r29
    1518:	b8 df       	rcall	.-144    	; 0x148a <sht_checkCRC>
    151a:	88 23       	and	r24, r24
    151c:	51 f0       	breq	.+20     	; 0x1532 <sht_checkID+0x46>
	{
		if ((ID & 0x083F) != 0x0807)
    151e:	8c 2f       	mov	r24, r28
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	9d 2b       	or	r25, r29
    1524:	8f 73       	andi	r24, 0x3F	; 63
    1526:	98 70       	andi	r25, 0x08	; 8
    1528:	87 30       	cpi	r24, 0x07	; 7
    152a:	98 40       	sbci	r25, 0x08	; 8
    152c:	21 f4       	brne	.+8      	; 0x1536 <sht_checkID+0x4a>
		{
			return SHT_Status_ID_Fail;
		}

		return SHT_Status_Nominal;
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <sht_checkID+0x4c>
	}

	return SHT_Status_Error;
    1532:	81 e0       	ldi	r24, 0x01	; 1
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <sht_checkID+0x4c>

	if (sht_checkCRC(ID_MSB, ID_LSB, ID_CRC))
	{
		if ((ID & 0x083F) != 0x0807)
		{
			return SHT_Status_ID_Fail;
    1536:	83 e0       	ldi	r24, 0x03	; 3

		return SHT_Status_Nominal;
	}

	return SHT_Status_Error;
}
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	08 95       	ret

00001540 <sht_init>:

SHT_STATUS_t sht_init(void)
{
    1540:	cf 93       	push	r28
}

static inline void sht_wakeup(void);
static inline void sht_wakeup(void)
{
	sht_command(SHT_WAKEUP);
    1542:	87 e1       	ldi	r24, 0x17	; 23
    1544:	95 e3       	ldi	r25, 0x35	; 53
    1546:	c5 df       	rcall	.-118    	; 0x14d2 <sht_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1548:	8f eb       	ldi	r24, 0xBF	; 191
    154a:	93 e0       	ldi	r25, 0x03	; 3
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	f1 f7       	brne	.-4      	; 0x154c <sht_init+0xc>
    1550:	00 c0       	rjmp	.+0      	; 0x1552 <sht_init+0x12>
    1552:	00 00       	nop

SHT_STATUS_t sht_init(void)
{
	byte retval = 0;
	sht_wakeup();
	retval = sht_checkID();
    1554:	cb df       	rcall	.-106    	; 0x14ec <sht_checkID>
    1556:	c8 2f       	mov	r28, r24
}

static inline void sht_sleep(void);
static inline void sht_sleep(void)
{
	sht_command(SHT_SLEEP);
    1558:	88 e9       	ldi	r24, 0x98	; 152
    155a:	90 eb       	ldi	r25, 0xB0	; 176
    155c:	ba df       	rcall	.-140    	; 0x14d2 <sht_command>
    155e:	8f eb       	ldi	r24, 0xBF	; 191
    1560:	93 e0       	ldi	r25, 0x03	; 3
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <sht_init+0x22>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <sht_init+0x28>
    1568:	00 00       	nop
	}
}

void sht_low_pwr(bool value)
{
	SHTSR.low_pwr = value;
    156a:	10 92 93 02 	sts	0x0293, r1
	sht_wakeup();
	retval = sht_checkID();
	sht_sleep();
	sht_low_pwr(false);
	return retval;
}
    156e:	8c 2f       	mov	r24, r28
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <sht_meas>:

SHT_STATUS_t sht_meas(void)
{
    1574:	ef 92       	push	r14
    1576:	ff 92       	push	r15
    1578:	0f 93       	push	r16
    157a:	1f 93       	push	r17
    157c:	cf 93       	push	r28
    157e:	df 93       	push	r29
}

static inline void sht_wakeup(void);
static inline void sht_wakeup(void)
{
	sht_command(SHT_WAKEUP);
    1580:	87 e1       	ldi	r24, 0x17	; 23
    1582:	95 e3       	ldi	r25, 0x35	; 53
    1584:	a6 df       	rcall	.-180    	; 0x14d2 <sht_command>
    1586:	8f eb       	ldi	r24, 0xBF	; 191
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	f1 f7       	brne	.-4      	; 0x158a <sht_meas+0x16>
    158e:	00 c0       	rjmp	.+0      	; 0x1590 <sht_meas+0x1c>
    1590:	00 00       	nop
}

static inline void sht_mode(void);
static inline void sht_mode(void)
{
	if (SHTSR.low_pwr)
    1592:	80 91 93 02 	lds	r24, 0x0293
    1596:	88 23       	and	r24, r24
    1598:	41 f0       	breq	.+16     	; 0x15aa <sht_meas+0x36>
	{
		sht_command((SHT_COMMAND_t)SHT_LOWPOW_MEAS_TFIRST);
    159a:	8c e9       	ldi	r24, 0x9C	; 156
    159c:	90 e6       	ldi	r25, 0x60	; 96
    159e:	99 df       	rcall	.-206    	; 0x14d2 <sht_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15a0:	8f e9       	ldi	r24, 0x9F	; 159
    15a2:	9f e0       	ldi	r25, 0x0F	; 15
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	f1 f7       	brne	.-4      	; 0x15a4 <sht_meas+0x30>
    15a8:	07 c0       	rjmp	.+14     	; 0x15b8 <sht_meas+0x44>
		_delay_ms(1);
	}
	else
	{
		sht_command((SHT_COMMAND_t)SHT_NORMAL_MEAS_TFIRST);
    15aa:	86 e6       	ldi	r24, 0x66	; 102
    15ac:	98 e7       	ldi	r25, 0x78	; 120
    15ae:	91 df       	rcall	.-222    	; 0x14d2 <sht_command>
    15b0:	8f e5       	ldi	r24, 0x5F	; 95
    15b2:	9a ee       	ldi	r25, 0xEA	; 234
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	f1 f7       	brne	.-4      	; 0x15b4 <sht_meas+0x40>
    15b8:	00 c0       	rjmp	.+0      	; 0x15ba <sht_meas+0x46>
    15ba:	00 00       	nop
SHT_STATUS_t sht_meas(void)
{
	sht_wakeup();
	sht_mode();

	twi_start();
    15bc:	fc dd       	rcall	.-1032   	; 0x11b6 <twi_start>
	twi_write_sla(TW_SLA_R(SHT_ADDR));
    15be:	81 ee       	ldi	r24, 0xE1	; 225
    15c0:	0a de       	rcall	.-1004   	; 0x11d6 <twi_write_sla>
	byte T_MSB = twi_read(ACK);
    15c2:	81 e0       	ldi	r24, 0x01	; 1
    15c4:	47 de       	rcall	.-882    	; 0x1254 <twi_read>
    15c6:	08 2f       	mov	r16, r24
	byte T_LSB = twi_read(ACK);
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	44 de       	rcall	.-888    	; 0x1254 <twi_read>
    15cc:	d8 2f       	mov	r29, r24
	byte T_CRC = twi_read(ACK);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	41 de       	rcall	.-894    	; 0x1254 <twi_read>
    15d2:	e8 2e       	mov	r14, r24
	byte H_MSB = twi_read(ACK);
    15d4:	81 e0       	ldi	r24, 0x01	; 1
    15d6:	3e de       	rcall	.-900    	; 0x1254 <twi_read>
    15d8:	18 2f       	mov	r17, r24
	byte H_LSB = twi_read(ACK);
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	3b de       	rcall	.-906    	; 0x1254 <twi_read>
    15de:	c8 2f       	mov	r28, r24
	byte H_CRC = twi_read(ACK);
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	38 de       	rcall	.-912    	; 0x1254 <twi_read>
    15e4:	f8 2e       	mov	r15, r24
	twi_stop();
    15e6:	f3 dd       	rcall	.-1050   	; 0x11ce <twi_stop>
}

static inline void sht_sleep(void);
static inline void sht_sleep(void)
{
	sht_command(SHT_SLEEP);
    15e8:	88 e9       	ldi	r24, 0x98	; 152
    15ea:	90 eb       	ldi	r25, 0xB0	; 176
    15ec:	72 df       	rcall	.-284    	; 0x14d2 <sht_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15ee:	8f eb       	ldi	r24, 0xBF	; 191
    15f0:	93 e0       	ldi	r25, 0x03	; 3
    15f2:	01 97       	sbiw	r24, 0x01	; 1
    15f4:	f1 f7       	brne	.-4      	; 0x15f2 <sht_meas+0x7e>
    15f6:	00 c0       	rjmp	.+0      	; 0x15f8 <sht_meas+0x84>
    15f8:	00 00       	nop
	byte H_CRC = twi_read(ACK);
	twi_stop();

	sht_sleep();

	if (sht_checkCRC(T_MSB, T_LSB, T_CRC) && sht_checkCRC(H_MSB, H_LSB, H_CRC))
    15fa:	4e 2d       	mov	r20, r14
    15fc:	6d 2f       	mov	r22, r29
    15fe:	80 2f       	mov	r24, r16
    1600:	44 df       	rcall	.-376    	; 0x148a <sht_checkCRC>
    1602:	88 23       	and	r24, r24
    1604:	09 f4       	brne	.+2      	; 0x1608 <sht_meas+0x94>
    1606:	41 c0       	rjmp	.+130    	; 0x168a <sht_meas+0x116>
    1608:	4f 2d       	mov	r20, r15
    160a:	6c 2f       	mov	r22, r28
    160c:	81 2f       	mov	r24, r17
    160e:	3d df       	rcall	.-390    	; 0x148a <sht_checkCRC>
    1610:	88 23       	and	r24, r24
    1612:	d9 f1       	breq	.+118    	; 0x168a <sht_meas+0x116>
static SHT_SR_t SHTSR;

static inline void sht_calcT(uint16_t temperature);
static inline void sht_calcT(uint16_t temperature)
{
	SHTSR.T = (double)temperature * 175. / 65535. - 45.;
    1614:	6d 2f       	mov	r22, r29
    1616:	70 e0       	ldi	r23, 0x00	; 0
    1618:	70 2b       	or	r23, r16
    161a:	80 e0       	ldi	r24, 0x00	; 0
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__floatunsisf>
    1622:	20 e0       	ldi	r18, 0x00	; 0
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	4f e2       	ldi	r20, 0x2F	; 47
    1628:	53 e4       	ldi	r21, 0x43	; 67
    162a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    162e:	20 e0       	ldi	r18, 0x00	; 0
    1630:	3f ef       	ldi	r19, 0xFF	; 255
    1632:	4f e7       	ldi	r20, 0x7F	; 127
    1634:	57 e4       	ldi	r21, 0x47	; 71
    1636:	af d7       	rcall	.+3934   	; 0x2596 <__divsf3>
    1638:	20 e0       	ldi	r18, 0x00	; 0
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	44 e3       	ldi	r20, 0x34	; 52
    163e:	52 e4       	ldi	r21, 0x42	; 66
    1640:	45 d7       	rcall	.+3722   	; 0x24cc <__subsf3>
    1642:	60 93 94 02 	sts	0x0294, r22
    1646:	70 93 95 02 	sts	0x0295, r23
    164a:	80 93 96 02 	sts	0x0296, r24
    164e:	90 93 97 02 	sts	0x0297, r25
}

static inline void sht_calcRH(uint16_t humidity);
static inline void sht_calcRH(uint16_t humidity)
{
	SHTSR.RH = (double)humidity / 65535. * 100.;
    1652:	6c 2f       	mov	r22, r28
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	71 2b       	or	r23, r17
    1658:	80 e0       	ldi	r24, 0x00	; 0
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	0e 94 64 13 	call	0x26c8	; 0x26c8 <__floatunsisf>
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	3f ef       	ldi	r19, 0xFF	; 255
    1664:	4f e7       	ldi	r20, 0x7F	; 127
    1666:	57 e4       	ldi	r21, 0x47	; 71
    1668:	96 d7       	rcall	.+3884   	; 0x2596 <__divsf3>
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	48 ec       	ldi	r20, 0xC8	; 200
    1670:	52 e4       	ldi	r21, 0x42	; 66
    1672:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <__mulsf3>
    1676:	60 93 98 02 	sts	0x0298, r22
    167a:	70 93 99 02 	sts	0x0299, r23
    167e:	80 93 9a 02 	sts	0x029A, r24
    1682:	90 93 9b 02 	sts	0x029B, r25

	if (sht_checkCRC(T_MSB, T_LSB, T_CRC) && sht_checkCRC(H_MSB, H_LSB, H_CRC))
	{
		sht_calcT(MERGE(T_MSB, T_LSB));
		sht_calcRH(MERGE(H_MSB, H_LSB));
		return SHT_Status_Nominal;
    1686:	80 e0       	ldi	r24, 0x00	; 0
    1688:	15 c0       	rjmp	.+42     	; 0x16b4 <sht_meas+0x140>
	}

	SHTSR.T = -45.;
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a4 e3       	ldi	r26, 0x34	; 52
    1690:	b2 ec       	ldi	r27, 0xC2	; 194
    1692:	80 93 94 02 	sts	0x0294, r24
    1696:	90 93 95 02 	sts	0x0295, r25
    169a:	a0 93 96 02 	sts	0x0296, r26
    169e:	b0 93 97 02 	sts	0x0297, r27
	SHTSR.RH = 0.;
    16a2:	10 92 98 02 	sts	0x0298, r1
    16a6:	10 92 99 02 	sts	0x0299, r1
    16aa:	10 92 9a 02 	sts	0x029A, r1
    16ae:	10 92 9b 02 	sts	0x029B, r1
	return SHT_Status_CRC_Fail;
    16b2:	82 e0       	ldi	r24, 0x02	; 2
}
    16b4:	df 91       	pop	r29
    16b6:	cf 91       	pop	r28
    16b8:	1f 91       	pop	r17
    16ba:	0f 91       	pop	r16
    16bc:	ff 90       	pop	r15
    16be:	ef 90       	pop	r14
    16c0:	08 95       	ret

000016c2 <sht_temperature>:

double sht_temperature(void)
{
	return SHTSR.T;
    16c2:	60 91 94 02 	lds	r22, 0x0294
    16c6:	70 91 95 02 	lds	r23, 0x0295
    16ca:	80 91 96 02 	lds	r24, 0x0296
    16ce:	90 91 97 02 	lds	r25, 0x0297
}
    16d2:	08 95       	ret

000016d4 <sht_humidity>:

double sht_humidity(void)
{
	return SHTSR.RH;
    16d4:	60 91 98 02 	lds	r22, 0x0298
    16d8:	70 91 99 02 	lds	r23, 0x0299
    16dc:	80 91 9a 02 	lds	r24, 0x029A
    16e0:	90 91 9b 02 	lds	r25, 0x029B
}
    16e4:	08 95       	ret

000016e6 <RingBuffer_Init>:
}

size_t RingBuffer_Capacity(RingBuffer_t * Q)
{
	return Q->Size;
}
    16e6:	fc 01       	movw	r30, r24
    16e8:	71 83       	std	Z+1, r23	; 0x01
    16ea:	60 83       	st	Z, r22
    16ec:	55 83       	std	Z+5, r21	; 0x05
    16ee:	44 83       	std	Z+4, r20	; 0x04
    16f0:	17 82       	std	Z+7, r1	; 0x07
    16f2:	16 82       	std	Z+6, r1	; 0x06
    16f4:	11 86       	std	Z+9, r1	; 0x09
    16f6:	10 86       	std	Z+8, r1	; 0x08
    16f8:	13 82       	std	Z+3, r1	; 0x03
    16fa:	12 82       	std	Z+2, r1	; 0x02
    16fc:	08 95       	ret

000016fe <RingBuffer_Clear>:
    16fe:	fc 01       	movw	r30, r24
    1700:	17 82       	std	Z+7, r1	; 0x07
    1702:	16 82       	std	Z+6, r1	; 0x06
    1704:	11 86       	std	Z+9, r1	; 0x09
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	13 82       	std	Z+3, r1	; 0x03
    170a:	12 82       	std	Z+2, r1	; 0x02
    170c:	08 95       	ret

0000170e <RingBuffer_Insert>:
    170e:	fc 01       	movw	r30, r24
    1710:	86 81       	ldd	r24, Z+6	; 0x06
    1712:	97 81       	ldd	r25, Z+7	; 0x07
    1714:	01 96       	adiw	r24, 0x01	; 1
    1716:	24 81       	ldd	r18, Z+4	; 0x04
    1718:	35 81       	ldd	r19, Z+5	; 0x05
    171a:	82 17       	cp	r24, r18
    171c:	93 07       	cpc	r25, r19
    171e:	11 f4       	brne	.+4      	; 0x1724 <RingBuffer_Insert+0x16>
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	20 85       	ldd	r18, Z+8	; 0x08
    1726:	31 85       	ldd	r19, Z+9	; 0x09
    1728:	82 17       	cp	r24, r18
    172a:	93 07       	cpc	r25, r19
    172c:	71 f0       	breq	.+28     	; 0x174a <RingBuffer_Insert+0x3c>
    172e:	a0 81       	ld	r26, Z
    1730:	b1 81       	ldd	r27, Z+1	; 0x01
    1732:	a8 0f       	add	r26, r24
    1734:	b9 1f       	adc	r27, r25
    1736:	6c 93       	st	X, r22
    1738:	97 83       	std	Z+7, r25	; 0x07
    173a:	86 83       	std	Z+6, r24	; 0x06
    173c:	82 81       	ldd	r24, Z+2	; 0x02
    173e:	93 81       	ldd	r25, Z+3	; 0x03
    1740:	01 96       	adiw	r24, 0x01	; 1
    1742:	93 83       	std	Z+3, r25	; 0x03
    1744:	82 83       	std	Z+2, r24	; 0x02
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	08 95       	ret
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	08 95       	ret

0000174e <RingBuffer_Get>:
    174e:	fc 01       	movw	r30, r24
    1750:	80 85       	ldd	r24, Z+8	; 0x08
    1752:	91 85       	ldd	r25, Z+9	; 0x09
    1754:	26 81       	ldd	r18, Z+6	; 0x06
    1756:	37 81       	ldd	r19, Z+7	; 0x07
    1758:	28 17       	cp	r18, r24
    175a:	39 07       	cpc	r19, r25
    175c:	d1 f0       	breq	.+52     	; 0x1792 <RingBuffer_Get+0x44>
    175e:	01 96       	adiw	r24, 0x01	; 1
    1760:	91 87       	std	Z+9, r25	; 0x09
    1762:	80 87       	std	Z+8, r24	; 0x08
    1764:	24 81       	ldd	r18, Z+4	; 0x04
    1766:	35 81       	ldd	r19, Z+5	; 0x05
    1768:	82 17       	cp	r24, r18
    176a:	93 07       	cpc	r25, r19
    176c:	11 f4       	brne	.+4      	; 0x1772 <RingBuffer_Get+0x24>
    176e:	11 86       	std	Z+9, r1	; 0x09
    1770:	10 86       	std	Z+8, r1	; 0x08
    1772:	a0 81       	ld	r26, Z
    1774:	b1 81       	ldd	r27, Z+1	; 0x01
    1776:	80 85       	ldd	r24, Z+8	; 0x08
    1778:	91 85       	ldd	r25, Z+9	; 0x09
    177a:	a8 0f       	add	r26, r24
    177c:	b9 1f       	adc	r27, r25
    177e:	8c 91       	ld	r24, X
    1780:	db 01       	movw	r26, r22
    1782:	8c 93       	st	X, r24
    1784:	82 81       	ldd	r24, Z+2	; 0x02
    1786:	93 81       	ldd	r25, Z+3	; 0x03
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	93 83       	std	Z+3, r25	; 0x03
    178c:	82 83       	std	Z+2, r24	; 0x02
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	08 95       	ret
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	08 95       	ret

00001796 <RingBuffer_GetAsString>:
    1796:	9f 92       	push	r9
    1798:	af 92       	push	r10
    179a:	bf 92       	push	r11
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	1f 92       	push	r1
    17ae:	cd b7       	in	r28, 0x3d	; 61
    17b0:	de b7       	in	r29, 0x3e	; 62
    17b2:	5c 01       	movw	r10, r24
    17b4:	8b 01       	movw	r16, r22
    17b6:	94 2e       	mov	r9, r20
    17b8:	6b 01       	movw	r12, r22
    17ba:	76 01       	movw	r14, r12
    17bc:	e0 1a       	sub	r14, r16
    17be:	f1 0a       	sbc	r15, r17
    17c0:	be 01       	movw	r22, r28
    17c2:	6f 5f       	subi	r22, 0xFF	; 255
    17c4:	7f 4f       	sbci	r23, 0xFF	; 255
    17c6:	c5 01       	movw	r24, r10
    17c8:	c2 df       	rcall	.-124    	; 0x174e <RingBuffer_Get>
    17ca:	88 23       	and	r24, r24
    17cc:	39 f0       	breq	.+14     	; 0x17dc <RingBuffer_GetAsString+0x46>
    17ce:	89 81       	ldd	r24, Y+1	; 0x01
    17d0:	89 15       	cp	r24, r9
    17d2:	21 f0       	breq	.+8      	; 0x17dc <RingBuffer_GetAsString+0x46>
    17d4:	f6 01       	movw	r30, r12
    17d6:	81 93       	st	Z+, r24
    17d8:	6f 01       	movw	r12, r30
    17da:	ef cf       	rjmp	.-34     	; 0x17ba <RingBuffer_GetAsString+0x24>
    17dc:	f8 01       	movw	r30, r16
    17de:	ee 0d       	add	r30, r14
    17e0:	ff 1d       	adc	r31, r15
    17e2:	10 82       	st	Z, r1
    17e4:	c8 01       	movw	r24, r16
    17e6:	0f 90       	pop	r0
    17e8:	df 91       	pop	r29
    17ea:	cf 91       	pop	r28
    17ec:	1f 91       	pop	r17
    17ee:	0f 91       	pop	r16
    17f0:	ff 90       	pop	r15
    17f2:	ef 90       	pop	r14
    17f4:	df 90       	pop	r13
    17f6:	cf 90       	pop	r12
    17f8:	bf 90       	pop	r11
    17fa:	af 90       	pop	r10
    17fc:	9f 90       	pop	r9
    17fe:	08 95       	ret

00001800 <RingBuffer_IsFull>:
    1800:	fc 01       	movw	r30, r24
    1802:	26 81       	ldd	r18, Z+6	; 0x06
    1804:	37 81       	ldd	r19, Z+7	; 0x07
    1806:	2f 5f       	subi	r18, 0xFF	; 255
    1808:	3f 4f       	sbci	r19, 0xFF	; 255
    180a:	84 81       	ldd	r24, Z+4	; 0x04
    180c:	95 81       	ldd	r25, Z+5	; 0x05
    180e:	28 17       	cp	r18, r24
    1810:	39 07       	cpc	r19, r25
    1812:	11 f4       	brne	.+4      	; 0x1818 <RingBuffer_IsFull+0x18>
    1814:	20 e0       	ldi	r18, 0x00	; 0
    1816:	30 e0       	ldi	r19, 0x00	; 0
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	40 85       	ldd	r20, Z+8	; 0x08
    181c:	51 85       	ldd	r21, Z+9	; 0x09
    181e:	42 17       	cp	r20, r18
    1820:	53 07       	cpc	r21, r19
    1822:	09 f0       	breq	.+2      	; 0x1826 <RingBuffer_IsFull+0x26>
    1824:	80 e0       	ldi	r24, 0x00	; 0
    1826:	08 95       	ret

00001828 <RingBuffer_Size>:

size_t RingBuffer_Size(RingBuffer_t * Q)
{
	return Q->Count;
}
    1828:	fc 01       	movw	r30, r24
    182a:	82 81       	ldd	r24, Z+2	; 0x02
    182c:	93 81       	ldd	r25, Z+3	; 0x03
    182e:	08 95       	ret

00001830 <Endpoint_Write_PStream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1830:	cf 92       	push	r12
    1832:	df 92       	push	r13
    1834:	ef 92       	push	r14
    1836:	ff 92       	push	r15
    1838:	0f 93       	push	r16
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	8b 01       	movw	r16, r22
    1844:	7a 01       	movw	r14, r20
    1846:	68 d1       	rcall	.+720    	; 0x1b18 <Endpoint_WaitUntilReady>
    1848:	81 11       	cpse	r24, r1
    184a:	34 c0       	rjmp	.+104    	; 0x18b4 <Endpoint_Write_PStream_LE+0x84>
    184c:	e1 14       	cp	r14, r1
    184e:	f1 04       	cpc	r15, r1
    1850:	39 f0       	breq	.+14     	; 0x1860 <Endpoint_Write_PStream_LE+0x30>
    1852:	f7 01       	movw	r30, r14
    1854:	80 81       	ld	r24, Z
    1856:	91 81       	ldd	r25, Z+1	; 0x01
    1858:	08 1b       	sub	r16, r24
    185a:	19 0b       	sbc	r17, r25
    185c:	c8 0f       	add	r28, r24
    185e:	d9 1f       	adc	r29, r25
    1860:	c1 2c       	mov	r12, r1
    1862:	d1 2c       	mov	r13, r1
    1864:	01 15       	cp	r16, r1
    1866:	11 05       	cpc	r17, r1
    1868:	21 f1       	breq	.+72     	; 0x18b2 <Endpoint_Write_PStream_LE+0x82>
    186a:	80 91 e8 00 	lds	r24, 0x00E8
    186e:	85 fd       	sbrc	r24, 5
    1870:	15 c0       	rjmp	.+42     	; 0x189c <Endpoint_Write_PStream_LE+0x6c>
    1872:	80 91 e8 00 	lds	r24, 0x00E8
    1876:	8e 77       	andi	r24, 0x7E	; 126
    1878:	80 93 e8 00 	sts	0x00E8, r24
    187c:	e1 14       	cp	r14, r1
    187e:	f1 04       	cpc	r15, r1
    1880:	49 f0       	breq	.+18     	; 0x1894 <Endpoint_Write_PStream_LE+0x64>
    1882:	f7 01       	movw	r30, r14
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	c8 0e       	add	r12, r24
    188a:	d9 1e       	adc	r13, r25
    188c:	d1 82       	std	Z+1, r13	; 0x01
    188e:	c0 82       	st	Z, r12
    1890:	85 e0       	ldi	r24, 0x05	; 5
    1892:	10 c0       	rjmp	.+32     	; 0x18b4 <Endpoint_Write_PStream_LE+0x84>
    1894:	41 d1       	rcall	.+642    	; 0x1b18 <Endpoint_WaitUntilReady>
    1896:	88 23       	and	r24, r24
    1898:	29 f3       	breq	.-54     	; 0x1864 <Endpoint_Write_PStream_LE+0x34>
    189a:	0c c0       	rjmp	.+24     	; 0x18b4 <Endpoint_Write_PStream_LE+0x84>
    189c:	fe 01       	movw	r30, r28
    189e:	84 91       	lpm	r24, Z
    18a0:	80 93 f1 00 	sts	0x00F1, r24
    18a4:	21 96       	adiw	r28, 0x01	; 1
    18a6:	01 50       	subi	r16, 0x01	; 1
    18a8:	11 09       	sbc	r17, r1
    18aa:	ff ef       	ldi	r31, 0xFF	; 255
    18ac:	cf 1a       	sub	r12, r31
    18ae:	df 0a       	sbc	r13, r31
    18b0:	d9 cf       	rjmp	.-78     	; 0x1864 <Endpoint_Write_PStream_LE+0x34>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	ff 90       	pop	r15
    18be:	ef 90       	pop	r14
    18c0:	df 90       	pop	r13
    18c2:	cf 90       	pop	r12
    18c4:	08 95       	ret

000018c6 <Endpoint_Write_Control_Stream_LE>:
    18c6:	20 91 bd 03 	lds	r18, 0x03BD
    18ca:	30 91 be 03 	lds	r19, 0x03BE
    18ce:	26 17       	cp	r18, r22
    18d0:	37 07       	cpc	r19, r23
    18d2:	48 f0       	brcs	.+18     	; 0x18e6 <Endpoint_Write_Control_Stream_LE+0x20>
    18d4:	61 15       	cp	r22, r1
    18d6:	71 05       	cpc	r23, r1
    18d8:	39 f4       	brne	.+14     	; 0x18e8 <Endpoint_Write_Control_Stream_LE+0x22>
    18da:	20 91 e8 00 	lds	r18, 0x00E8
    18de:	2e 77       	andi	r18, 0x7E	; 126
    18e0:	20 93 e8 00 	sts	0x00E8, r18
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <Endpoint_Write_Control_Stream_LE+0x22>
    18e6:	b9 01       	movw	r22, r18
    18e8:	fc 01       	movw	r30, r24
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	61 15       	cp	r22, r1
    18ee:	71 05       	cpc	r23, r1
    18f0:	71 f1       	breq	.+92     	; 0x194e <Endpoint_Write_Control_Stream_LE+0x88>
    18f2:	8e b3       	in	r24, 0x1e	; 30
    18f4:	88 23       	and	r24, r24
    18f6:	e9 f1       	breq	.+122    	; 0x1972 <Endpoint_Write_Control_Stream_LE+0xac>
    18f8:	85 30       	cpi	r24, 0x05	; 5
    18fa:	e9 f1       	breq	.+122    	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xb0>
    18fc:	80 91 e8 00 	lds	r24, 0x00E8
    1900:	83 fd       	sbrc	r24, 3
    1902:	3b c0       	rjmp	.+118    	; 0x197a <Endpoint_Write_Control_Stream_LE+0xb4>
    1904:	80 91 e8 00 	lds	r24, 0x00E8
    1908:	82 fd       	sbrc	r24, 2
    190a:	2d c0       	rjmp	.+90     	; 0x1966 <Endpoint_Write_Control_Stream_LE+0xa0>
    190c:	80 91 e8 00 	lds	r24, 0x00E8
    1910:	80 ff       	sbrs	r24, 0
    1912:	ec cf       	rjmp	.-40     	; 0x18ec <Endpoint_Write_Control_Stream_LE+0x26>
    1914:	20 91 f3 00 	lds	r18, 0x00F3
    1918:	80 91 f2 00 	lds	r24, 0x00F2
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	92 2b       	or	r25, r18
    1920:	61 15       	cp	r22, r1
    1922:	71 05       	cpc	r23, r1
    1924:	51 f0       	breq	.+20     	; 0x193a <Endpoint_Write_Control_Stream_LE+0x74>
    1926:	88 30       	cpi	r24, 0x08	; 8
    1928:	91 05       	cpc	r25, r1
    192a:	38 f4       	brcc	.+14     	; 0x193a <Endpoint_Write_Control_Stream_LE+0x74>
    192c:	21 91       	ld	r18, Z+
    192e:	20 93 f1 00 	sts	0x00F1, r18
    1932:	61 50       	subi	r22, 0x01	; 1
    1934:	71 09       	sbc	r23, r1
    1936:	01 96       	adiw	r24, 0x01	; 1
    1938:	f3 cf       	rjmp	.-26     	; 0x1920 <Endpoint_Write_Control_Stream_LE+0x5a>
    193a:	21 e0       	ldi	r18, 0x01	; 1
    193c:	08 97       	sbiw	r24, 0x08	; 8
    193e:	09 f0       	breq	.+2      	; 0x1942 <Endpoint_Write_Control_Stream_LE+0x7c>
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	80 91 e8 00 	lds	r24, 0x00E8
    1946:	8e 77       	andi	r24, 0x7E	; 126
    1948:	80 93 e8 00 	sts	0x00E8, r24
    194c:	cf cf       	rjmp	.-98     	; 0x18ec <Endpoint_Write_Control_Stream_LE+0x26>
    194e:	21 11       	cpse	r18, r1
    1950:	d0 cf       	rjmp	.-96     	; 0x18f2 <Endpoint_Write_Control_Stream_LE+0x2c>
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <Endpoint_Write_Control_Stream_LE+0xa0>
    1954:	8e b3       	in	r24, 0x1e	; 30
    1956:	88 23       	and	r24, r24
    1958:	61 f0       	breq	.+24     	; 0x1972 <Endpoint_Write_Control_Stream_LE+0xac>
    195a:	85 30       	cpi	r24, 0x05	; 5
    195c:	61 f0       	breq	.+24     	; 0x1976 <Endpoint_Write_Control_Stream_LE+0xb0>
    195e:	80 91 e8 00 	lds	r24, 0x00E8
    1962:	83 fd       	sbrc	r24, 3
    1964:	0a c0       	rjmp	.+20     	; 0x197a <Endpoint_Write_Control_Stream_LE+0xb4>
    1966:	80 91 e8 00 	lds	r24, 0x00E8
    196a:	82 ff       	sbrs	r24, 2
    196c:	f3 cf       	rjmp	.-26     	; 0x1954 <Endpoint_Write_Control_Stream_LE+0x8e>
    196e:	80 e0       	ldi	r24, 0x00	; 0
    1970:	08 95       	ret
    1972:	82 e0       	ldi	r24, 0x02	; 2
    1974:	08 95       	ret
    1976:	83 e0       	ldi	r24, 0x03	; 3
    1978:	08 95       	ret
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	08 95       	ret

0000197e <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    197e:	20 91 bd 03 	lds	r18, 0x03BD
    1982:	30 91 be 03 	lds	r19, 0x03BE
    1986:	26 17       	cp	r18, r22
    1988:	37 07       	cpc	r19, r23
    198a:	48 f0       	brcs	.+18     	; 0x199e <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    198c:	61 15       	cp	r22, r1
    198e:	71 05       	cpc	r23, r1
    1990:	39 f4       	brne	.+14     	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1992:	20 91 e8 00 	lds	r18, 0x00E8
    1996:	2e 77       	andi	r18, 0x7E	; 126
    1998:	20 93 e8 00 	sts	0x00E8, r18
    199c:	01 c0       	rjmp	.+2      	; 0x19a0 <Endpoint_Write_Control_PStream_LE+0x22>
    199e:	b9 01       	movw	r22, r18
    19a0:	fc 01       	movw	r30, r24
    19a2:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19a4:	61 15       	cp	r22, r1
    19a6:	71 05       	cpc	r23, r1
    19a8:	89 f1       	breq	.+98     	; 0x1a0c <Endpoint_Write_Control_PStream_LE+0x8e>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19aa:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19ac:	88 23       	and	r24, r24
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <Endpoint_Write_Control_PStream_LE+0x34>
    19b0:	3f c0       	rjmp	.+126    	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19b2:	85 30       	cpi	r24, 0x05	; 5
    19b4:	09 f4       	brne	.+2      	; 0x19b8 <Endpoint_Write_Control_PStream_LE+0x3a>
    19b6:	3e c0       	rjmp	.+124    	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19b8:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19bc:	83 fd       	sbrc	r24, 3
    19be:	3c c0       	rjmp	.+120    	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19c0:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    19c4:	82 fd       	sbrc	r24, 2
    19c6:	2e c0       	rjmp	.+92     	; 0x1a24 <Endpoint_Write_Control_PStream_LE+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    19c8:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    19cc:	80 ff       	sbrs	r24, 0
    19ce:	ea cf       	rjmp	.-44     	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    19d0:	20 91 f3 00 	lds	r18, 0x00F3
    19d4:	80 91 f2 00 	lds	r24, 0x00F2
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    19dc:	61 15       	cp	r22, r1
    19de:	71 05       	cpc	r23, r1
    19e0:	59 f0       	breq	.+22     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x7a>
    19e2:	88 30       	cpi	r24, 0x08	; 8
    19e4:	91 05       	cpc	r25, r1
    19e6:	40 f4       	brcc	.+16     	; 0x19f8 <Endpoint_Write_Control_PStream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    19e8:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    19ea:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    19ee:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    19f0:	61 50       	subi	r22, 0x01	; 1
    19f2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	f2 cf       	rjmp	.-28     	; 0x19dc <Endpoint_Write_Control_PStream_LE+0x5e>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    19f8:	21 e0       	ldi	r18, 0x01	; 1
    19fa:	08 97       	sbiw	r24, 0x08	; 8
    19fc:	09 f0       	breq	.+2      	; 0x1a00 <Endpoint_Write_Control_PStream_LE+0x82>
    19fe:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a00:	80 91 e8 00 	lds	r24, 0x00E8
    1a04:	8e 77       	andi	r24, 0x7E	; 126
    1a06:	80 93 e8 00 	sts	0x00E8, r24
    1a0a:	cc cf       	rjmp	.-104    	; 0x19a4 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1a0c:	21 11       	cpse	r18, r1
    1a0e:	cd cf       	rjmp	.-102    	; 0x19aa <Endpoint_Write_Control_PStream_LE+0x2c>
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <Endpoint_Write_Control_PStream_LE+0xa6>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1a12:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1a14:	88 23       	and	r24, r24
    1a16:	61 f0       	breq	.+24     	; 0x1a30 <Endpoint_Write_Control_PStream_LE+0xb2>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1a18:	85 30       	cpi	r24, 0x05	; 5
    1a1a:	61 f0       	breq	.+24     	; 0x1a34 <Endpoint_Write_Control_PStream_LE+0xb6>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1a1c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1a20:	83 fd       	sbrc	r24, 3
    1a22:	0a c0       	rjmp	.+20     	; 0x1a38 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a24:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    1a28:	82 ff       	sbrs	r24, 2
    1a2a:	f3 cf       	rjmp	.-26     	; 0x1a12 <Endpoint_Write_Control_PStream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1a30:	82 e0       	ldi	r24, 0x02	; 2
    1a32:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    1a34:	83 e0       	ldi	r24, 0x03	; 3
    1a36:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    1a38:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1a3a:	08 95       	ret

00001a3c <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
    1a3c:	8f 70       	andi	r24, 0x0F	; 15
    1a3e:	80 93 e9 00 	sts	0x00E9, r24
    1a42:	eb ee       	ldi	r30, 0xEB	; 235
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	81 60       	ori	r24, 0x01	; 1
    1a4a:	80 83       	st	Z, r24
    1a4c:	ed ee       	ldi	r30, 0xED	; 237
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	10 82       	st	Z, r1
    1a52:	60 93 ec 00 	sts	0x00EC, r22
    1a56:	40 83       	st	Z, r20
    1a58:	80 91 ee 00 	lds	r24, 0x00EE
    1a5c:	88 1f       	adc	r24, r24
    1a5e:	88 27       	eor	r24, r24
    1a60:	88 1f       	adc	r24, r24
    1a62:	08 95       	ret

00001a64 <Endpoint_ConfigureEndpointTable>:
    1a64:	0f 93       	push	r16
    1a66:	1f 93       	push	r17
    1a68:	cf 93       	push	r28
    1a6a:	df 93       	push	r29
    1a6c:	06 2f       	mov	r16, r22
    1a6e:	ec 01       	movw	r28, r24
    1a70:	10 e0       	ldi	r17, 0x00	; 0
    1a72:	10 17       	cp	r17, r16
    1a74:	71 f1       	breq	.+92     	; 0x1ad2 <Endpoint_ConfigureEndpointTable+0x6e>
    1a76:	68 81       	ld	r22, Y
    1a78:	61 11       	cpse	r22, r1
    1a7a:	03 c0       	rjmp	.+6      	; 0x1a82 <Endpoint_ConfigureEndpointTable+0x1e>
    1a7c:	1f 5f       	subi	r17, 0xFF	; 255
    1a7e:	25 96       	adiw	r28, 0x05	; 5
    1a80:	f8 cf       	rjmp	.-16     	; 0x1a72 <Endpoint_ConfigureEndpointTable+0xe>
    1a82:	2c 81       	ldd	r18, Y+4	; 0x04
    1a84:	a9 81       	ldd	r26, Y+1	; 0x01
    1a86:	ba 81       	ldd	r27, Y+2	; 0x02
    1a88:	9b 81       	ldd	r25, Y+3	; 0x03
    1a8a:	86 2f       	mov	r24, r22
    1a8c:	8f 70       	andi	r24, 0x0F	; 15
    1a8e:	87 30       	cpi	r24, 0x07	; 7
    1a90:	10 f0       	brcs	.+4      	; 0x1a96 <Endpoint_ConfigureEndpointTable+0x32>
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	1f c0       	rjmp	.+62     	; 0x1ad4 <Endpoint_ConfigureEndpointTable+0x70>
    1a96:	22 30       	cpi	r18, 0x02	; 2
    1a98:	10 f4       	brcc	.+4      	; 0x1a9e <Endpoint_ConfigureEndpointTable+0x3a>
    1a9a:	42 e0       	ldi	r20, 0x02	; 2
    1a9c:	01 c0       	rjmp	.+2      	; 0x1aa0 <Endpoint_ConfigureEndpointTable+0x3c>
    1a9e:	46 e0       	ldi	r20, 0x06	; 6
    1aa0:	e8 e0       	ldi	r30, 0x08	; 8
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	20 e0       	ldi	r18, 0x00	; 0
    1aa6:	ea 17       	cp	r30, r26
    1aa8:	fb 07       	cpc	r31, r27
    1aaa:	20 f4       	brcc	.+8      	; 0x1ab4 <Endpoint_ConfigureEndpointTable+0x50>
    1aac:	2f 5f       	subi	r18, 0xFF	; 255
    1aae:	ee 0f       	add	r30, r30
    1ab0:	ff 1f       	adc	r31, r31
    1ab2:	f9 cf       	rjmp	.-14     	; 0x1aa6 <Endpoint_ConfigureEndpointTable+0x42>
    1ab4:	22 95       	swap	r18
    1ab6:	20 7f       	andi	r18, 0xF0	; 240
    1ab8:	42 2b       	or	r20, r18
    1aba:	50 e4       	ldi	r21, 0x40	; 64
    1abc:	95 9f       	mul	r25, r21
    1abe:	90 01       	movw	r18, r0
    1ac0:	11 24       	eor	r1, r1
    1ac2:	66 1f       	adc	r22, r22
    1ac4:	66 27       	eor	r22, r22
    1ac6:	66 1f       	adc	r22, r22
    1ac8:	62 2b       	or	r22, r18
    1aca:	b8 df       	rcall	.-144    	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
    1acc:	81 11       	cpse	r24, r1
    1ace:	d6 cf       	rjmp	.-84     	; 0x1a7c <Endpoint_ConfigureEndpointTable+0x18>
    1ad0:	e0 cf       	rjmp	.-64     	; 0x1a92 <Endpoint_ConfigureEndpointTable+0x2e>
    1ad2:	81 e0       	ldi	r24, 0x01	; 1
    1ad4:	df 91       	pop	r29
    1ad6:	cf 91       	pop	r28
    1ad8:	1f 91       	pop	r17
    1ada:	0f 91       	pop	r16
    1adc:	08 95       	ret

00001ade <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1ade:	80 91 b7 03 	lds	r24, 0x03B7
    1ae2:	87 ff       	sbrs	r24, 7
    1ae4:	0f c0       	rjmp	.+30     	; 0x1b04 <Endpoint_ClearStatusStage+0x26>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ae6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1aea:	82 fd       	sbrc	r24, 2
    1aec:	04 c0       	rjmp	.+8      	; 0x1af6 <Endpoint_ClearStatusStage+0x18>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1aee:	8e b3       	in	r24, 0x1e	; 30
    1af0:	81 11       	cpse	r24, r1
    1af2:	f9 cf       	rjmp	.-14     	; 0x1ae6 <Endpoint_ClearStatusStage+0x8>
    1af4:	10 c0       	rjmp	.+32     	; 0x1b16 <Endpoint_ClearStatusStage+0x38>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1af6:	80 91 e8 00 	lds	r24, 0x00E8
    1afa:	8b 77       	andi	r24, 0x7B	; 123
    1afc:	0a c0       	rjmp	.+20     	; 0x1b12 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1afe:	8e b3       	in	r24, 0x1e	; 30
    1b00:	88 23       	and	r24, r24
    1b02:	49 f0       	breq	.+18     	; 0x1b16 <Endpoint_ClearStatusStage+0x38>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b04:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1b08:	80 ff       	sbrs	r24, 0
    1b0a:	f9 cf       	rjmp	.-14     	; 0x1afe <Endpoint_ClearStatusStage+0x20>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1b0c:	80 91 e8 00 	lds	r24, 0x00E8
    1b10:	8e 77       	andi	r24, 0x7E	; 126
    1b12:	80 93 e8 00 	sts	0x00E8, r24
    1b16:	08 95       	ret

00001b18 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1b18:	20 91 e4 00 	lds	r18, 0x00E4
    1b1c:	30 91 e5 00 	lds	r19, 0x00E5
    1b20:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1b22:	40 91 ec 00 	lds	r20, 0x00EC
    1b26:	84 2f       	mov	r24, r20
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	40 ff       	sbrs	r20, 0
    1b2c:	22 c0       	rjmp	.+68     	; 0x1b72 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1b2e:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1b32:	80 fd       	sbrc	r24, 0
    1b34:	1c c0       	rjmp	.+56     	; 0x1b6e <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1b36:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1b38:	88 23       	and	r24, r24
    1b3a:	99 f0       	breq	.+38     	; 0x1b62 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1b3c:	85 30       	cpi	r24, 0x05	; 5
    1b3e:	99 f0       	breq	.+38     	; 0x1b66 <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1b40:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1b44:	85 fd       	sbrc	r24, 5
    1b46:	11 c0       	rjmp	.+34     	; 0x1b6a <Endpoint_WaitUntilReady+0x52>
    1b48:	40 91 e4 00 	lds	r20, 0x00E4
    1b4c:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1b50:	24 17       	cp	r18, r20
    1b52:	35 07       	cpc	r19, r21
    1b54:	31 f3       	breq	.-52     	; 0x1b22 <Endpoint_WaitUntilReady+0xa>
    1b56:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1b58:	11 f0       	breq	.+4      	; 0x1b5e <Endpoint_WaitUntilReady+0x46>
    1b5a:	9a 01       	movw	r18, r20
    1b5c:	e2 cf       	rjmp	.-60     	; 0x1b22 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1b5e:	84 e0       	ldi	r24, 0x04	; 4
    1b60:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1b62:	82 e0       	ldi	r24, 0x02	; 2
    1b64:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1b6a:	81 e0       	ldi	r24, 0x01	; 1
    1b6c:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1b72:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1b76:	42 ff       	sbrs	r20, 2
    1b78:	de cf       	rjmp	.-68     	; 0x1b36 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1b7a:	08 95       	ret

00001b7c <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b84:	4a d0       	rcall	.+148    	; 0x1c1a <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b86:	51 d0       	rcall	.+162    	; 0x1c2a <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b88:	c8 ed       	ldi	r28, 0xD8	; 216
    1b8a:	d0 e0       	ldi	r29, 0x00	; 0
    1b8c:	88 81       	ld	r24, Y
    1b8e:	8f 77       	andi	r24, 0x7F	; 127
    1b90:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b92:	88 81       	ld	r24, Y
    1b94:	80 68       	ori	r24, 0x80	; 128
    1b96:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b98:	88 81       	ld	r24, Y
    1b9a:	8f 7d       	andi	r24, 0xDF	; 223
    1b9c:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b9e:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1ba0:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
    1ba2:	10 92 b3 03 	sts	0x03B3, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1ba6:	10 92 b5 03 	sts	0x03B5, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1baa:	10 92 b4 03 	sts	0x03B4, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1bae:	00 ee       	ldi	r16, 0xE0	; 224
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	f8 01       	movw	r30, r16
    1bb4:	80 81       	ld	r24, Z
    1bb6:	8b 7f       	andi	r24, 0xFB	; 251
    1bb8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1bba:	88 81       	ld	r24, Y
    1bbc:	81 60       	ori	r24, 0x01	; 1
    1bbe:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1bc0:	42 e0       	ldi	r20, 0x02	; 2
    1bc2:	60 e0       	ldi	r22, 0x00	; 0
    1bc4:	80 e0       	ldi	r24, 0x00	; 0
    1bc6:	3a df       	rcall	.-396    	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1bc8:	e1 ee       	ldi	r30, 0xE1	; 225
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	80 81       	ld	r24, Z
    1bce:	8e 7f       	andi	r24, 0xFE	; 254
    1bd0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1bd2:	e2 ee       	ldi	r30, 0xE2	; 226
    1bd4:	f0 e0       	ldi	r31, 0x00	; 0
    1bd6:	80 81       	ld	r24, Z
    1bd8:	81 60       	ori	r24, 0x01	; 1
    1bda:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1bdc:	80 81       	ld	r24, Z
    1bde:	88 60       	ori	r24, 0x08	; 8
    1be0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1be2:	f8 01       	movw	r30, r16
    1be4:	80 81       	ld	r24, Z
    1be6:	8e 7f       	andi	r24, 0xFE	; 254
    1be8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1bea:	88 81       	ld	r24, Y
    1bec:	80 61       	ori	r24, 0x10	; 16
    1bee:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	1f 91       	pop	r17
    1bf6:	0f 91       	pop	r16
    1bf8:	08 95       	ret

00001bfa <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1bfa:	e8 ed       	ldi	r30, 0xD8	; 216
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	8f 7e       	andi	r24, 0xEF	; 239
    1c02:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1c04:	e7 ed       	ldi	r30, 0xD7	; 215
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	80 81       	ld	r24, Z
    1c0a:	81 60       	ori	r24, 0x01	; 1
    1c0c:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1c0e:	84 e0       	ldi	r24, 0x04	; 4
    1c10:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	80 93 b6 03 	sts	0x03B6, r24

	USB_ResetInterface();
    1c18:	b1 cf       	rjmp	.-158    	; 0x1b7c <USB_ResetInterface>

00001c1a <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1c1a:	e8 ed       	ldi	r30, 0xD8	; 216
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8e 7f       	andi	r24, 0xFE	; 254
    1c22:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1c24:	10 92 e2 00 	sts	0x00E2, r1
    1c28:	08 95       	ret

00001c2a <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1c2a:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1c2e:	10 92 e1 00 	sts	0x00E1, r1
    1c32:	08 95       	ret

00001c34 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1c34:	1f 92       	push	r1
    1c36:	0f 92       	push	r0
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	0f 92       	push	r0
    1c3c:	11 24       	eor	r1, r1
    1c3e:	2f 93       	push	r18
    1c40:	3f 93       	push	r19
    1c42:	4f 93       	push	r20
    1c44:	5f 93       	push	r21
    1c46:	6f 93       	push	r22
    1c48:	7f 93       	push	r23
    1c4a:	8f 93       	push	r24
    1c4c:	9f 93       	push	r25
    1c4e:	af 93       	push	r26
    1c50:	bf 93       	push	r27
    1c52:	ef 93       	push	r30
    1c54:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c56:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c5a:	82 ff       	sbrs	r24, 2
    1c5c:	0a c0       	rjmp	.+20     	; 0x1c72 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c5e:	80 91 e2 00 	lds	r24, 0x00E2
    1c62:	82 ff       	sbrs	r24, 2
    1c64:	06 c0       	rjmp	.+12     	; 0x1c72 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c66:	80 91 e1 00 	lds	r24, 0x00E1
    1c6a:	8b 7f       	andi	r24, 0xFB	; 251
    1c6c:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c70:	4a d2       	rcall	.+1172   	; 0x2106 <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c72:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c76:	80 ff       	sbrs	r24, 0
    1c78:	1b c0       	rjmp	.+54     	; 0x1cb0 <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c7a:	80 91 d8 00 	lds	r24, 0x00D8
    1c7e:	80 ff       	sbrs	r24, 0
    1c80:	17 c0       	rjmp	.+46     	; 0x1cb0 <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c82:	80 91 da 00 	lds	r24, 0x00DA
    1c86:	8e 7f       	andi	r24, 0xFE	; 254
    1c88:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c8c:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c90:	80 ff       	sbrs	r24, 0
    1c92:	0b c0       	rjmp	.+22     	; 0x1caa <__vector_10+0x76>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c94:	80 e1       	ldi	r24, 0x10	; 16
    1c96:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c98:	82 e1       	ldi	r24, 0x12	; 18
    1c9a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c9c:	09 b4       	in	r0, 0x29	; 41
    1c9e:	00 fe       	sbrs	r0, 0
    1ca0:	fd cf       	rjmp	.-6      	; 0x1c9c <__vector_10+0x68>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1ca2:	81 e0       	ldi	r24, 0x01	; 1
    1ca4:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    1ca6:	0a da       	rcall	.-3052   	; 0x10bc <EVENT_USB_Device_Connect>
    1ca8:	03 c0       	rjmp	.+6      	; 0x1cb0 <__vector_10+0x7c>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1caa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1cac:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
    1cae:	08 da       	rcall	.-3056   	; 0x10c0 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1cb0:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1cb4:	80 ff       	sbrs	r24, 0
    1cb6:	17 c0       	rjmp	.+46     	; 0x1ce6 <__vector_10+0xb2>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1cb8:	80 91 e2 00 	lds	r24, 0x00E2
    1cbc:	80 ff       	sbrs	r24, 0
    1cbe:	13 c0       	rjmp	.+38     	; 0x1ce6 <__vector_10+0xb2>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1cc0:	80 91 e2 00 	lds	r24, 0x00E2
    1cc4:	8e 7f       	andi	r24, 0xFE	; 254
    1cc6:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1cca:	80 91 e2 00 	lds	r24, 0x00E2
    1cce:	80 61       	ori	r24, 0x10	; 16
    1cd0:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1cd4:	80 91 d8 00 	lds	r24, 0x00D8
    1cd8:	80 62       	ori	r24, 0x20	; 32
    1cda:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1cde:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1ce0:	85 e0       	ldi	r24, 0x05	; 5
    1ce2:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
    1ce4:	10 d2       	rcall	.+1056   	; 0x2106 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ce6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1cea:	84 ff       	sbrs	r24, 4
    1cec:	2e c0       	rjmp	.+92     	; 0x1d4a <__vector_10+0x116>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1cee:	80 91 e2 00 	lds	r24, 0x00E2
    1cf2:	84 ff       	sbrs	r24, 4
    1cf4:	2a c0       	rjmp	.+84     	; 0x1d4a <__vector_10+0x116>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1cf6:	80 e1       	ldi	r24, 0x10	; 16
    1cf8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cfa:	82 e1       	ldi	r24, 0x12	; 18
    1cfc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1cfe:	09 b4       	in	r0, 0x29	; 41
    1d00:	00 fe       	sbrs	r0, 0
    1d02:	fd cf       	rjmp	.-6      	; 0x1cfe <__vector_10+0xca>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1d04:	80 91 d8 00 	lds	r24, 0x00D8
    1d08:	8f 7d       	andi	r24, 0xDF	; 223
    1d0a:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1d0e:	80 91 e1 00 	lds	r24, 0x00E1
    1d12:	8f 7e       	andi	r24, 0xEF	; 239
    1d14:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1d18:	80 91 e2 00 	lds	r24, 0x00E2
    1d1c:	8f 7e       	andi	r24, 0xEF	; 239
    1d1e:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1d22:	80 91 e2 00 	lds	r24, 0x00E2
    1d26:	81 60       	ori	r24, 0x01	; 1
    1d28:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1d2c:	80 91 b3 03 	lds	r24, 0x03B3
    1d30:	88 23       	and	r24, r24
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <__vector_10+0x104>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	07 c0       	rjmp	.+14     	; 0x1d46 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1d38:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1d3c:	87 fd       	sbrc	r24, 7
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <__vector_10+0x110>
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	01 c0       	rjmp	.+2      	; 0x1d46 <__vector_10+0x112>
    1d44:	83 e0       	ldi	r24, 0x03	; 3
    1d46:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d48:	de d1       	rcall	.+956    	; 0x2106 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d4a:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d4e:	83 ff       	sbrs	r24, 3
    1d50:	26 c0       	rjmp	.+76     	; 0x1d9e <__vector_10+0x16a>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d52:	80 91 e2 00 	lds	r24, 0x00E2
    1d56:	83 ff       	sbrs	r24, 3
    1d58:	22 c0       	rjmp	.+68     	; 0x1d9e <__vector_10+0x16a>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d5a:	80 91 e1 00 	lds	r24, 0x00E1
    1d5e:	87 7f       	andi	r24, 0xF7	; 247
    1d60:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d64:	82 e0       	ldi	r24, 0x02	; 2
    1d66:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
    1d68:	10 92 b3 03 	sts	0x03B3, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d6c:	80 91 e1 00 	lds	r24, 0x00E1
    1d70:	8e 7f       	andi	r24, 0xFE	; 254
    1d72:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d76:	80 91 e2 00 	lds	r24, 0x00E2
    1d7a:	8e 7f       	andi	r24, 0xFE	; 254
    1d7c:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d80:	80 91 e2 00 	lds	r24, 0x00E2
    1d84:	80 61       	ori	r24, 0x10	; 16
    1d86:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d8a:	42 e0       	ldi	r20, 0x02	; 2
    1d8c:	60 e0       	ldi	r22, 0x00	; 0
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	55 de       	rcall	.-854    	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d92:	80 91 f0 00 	lds	r24, 0x00F0
    1d96:	88 60       	ori	r24, 0x08	; 8
    1d98:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d9c:	b4 d1       	rcall	.+872    	; 0x2106 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d9e:	ff 91       	pop	r31
    1da0:	ef 91       	pop	r30
    1da2:	bf 91       	pop	r27
    1da4:	af 91       	pop	r26
    1da6:	9f 91       	pop	r25
    1da8:	8f 91       	pop	r24
    1daa:	7f 91       	pop	r23
    1dac:	6f 91       	pop	r22
    1dae:	5f 91       	pop	r21
    1db0:	4f 91       	pop	r20
    1db2:	3f 91       	pop	r19
    1db4:	2f 91       	pop	r18
    1db6:	0f 90       	pop	r0
    1db8:	0f be       	out	0x3f, r0	; 63
    1dba:	0f 90       	pop	r0
    1dbc:	1f 90       	pop	r1
    1dbe:	18 95       	reti

00001dc0 <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1dc0:	1f 92       	push	r1
    1dc2:	0f 92       	push	r0
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	0f 92       	push	r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	2f 93       	push	r18
    1dcc:	3f 93       	push	r19
    1dce:	4f 93       	push	r20
    1dd0:	5f 93       	push	r21
    1dd2:	6f 93       	push	r22
    1dd4:	7f 93       	push	r23
    1dd6:	8f 93       	push	r24
    1dd8:	9f 93       	push	r25
    1dda:	af 93       	push	r26
    1ddc:	bf 93       	push	r27
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	ef 93       	push	r30
    1de4:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1de6:	c0 91 e9 00 	lds	r28, 0x00E9
    1dea:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1dec:	80 91 ec 00 	lds	r24, 0x00EC
    1df0:	d8 2f       	mov	r29, r24
    1df2:	d1 70       	andi	r29, 0x01	; 1
    1df4:	80 fd       	sbrc	r24, 0
    1df6:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1df8:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1dfc:	80 91 f0 00 	lds	r24, 0x00F0
    1e00:	87 7f       	andi	r24, 0xF7	; 247
    1e02:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1e06:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1e08:	1e d0       	rcall	.+60     	; 0x1e46 <USB_Device_ProcessControlRequest>
    1e0a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1e0e:	80 91 f0 00 	lds	r24, 0x00F0
    1e12:	88 60       	ori	r24, 0x08	; 8
    1e14:	80 93 f0 00 	sts	0x00F0, r24
    1e18:	cd 2b       	or	r28, r29
    1e1a:	cf 70       	andi	r28, 0x0F	; 15
    1e1c:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1e20:	ff 91       	pop	r31
    1e22:	ef 91       	pop	r30
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0f 90       	pop	r0
    1e42:	1f 90       	pop	r1
    1e44:	18 95       	reti

00001e46 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e46:	1f 93       	push	r17
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	cd b7       	in	r28, 0x3d	; 61
    1e4e:	de b7       	in	r29, 0x3e	; 62
    1e50:	aa 97       	sbiw	r28, 0x2a	; 42
    1e52:	0f b6       	in	r0, 0x3f	; 63
    1e54:	f8 94       	cli
    1e56:	de bf       	out	0x3e, r29	; 62
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	cd bf       	out	0x3d, r28	; 61
    1e5c:	e7 eb       	ldi	r30, 0xB7	; 183
    1e5e:	f3 e0       	ldi	r31, 0x03	; 3
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e60:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e64:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e66:	23 e0       	ldi	r18, 0x03	; 3
    1e68:	ef 3b       	cpi	r30, 0xBF	; 191
    1e6a:	f2 07       	cpc	r31, r18
    1e6c:	c9 f7       	brne	.-14     	; 0x1e60 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e6e:	3a d9       	rcall	.-3468   	; 0x10e4 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e70:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e74:	83 ff       	sbrs	r24, 3
    1e76:	2f c1       	rjmp	.+606    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e78:	80 91 b7 03 	lds	r24, 0x03B7

		switch (USB_ControlRequest.bRequest)
    1e7c:	90 91 b8 03 	lds	r25, 0x03B8
    1e80:	95 30       	cpi	r25, 0x05	; 5
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <USB_Device_ProcessControlRequest+0x40>
    1e84:	83 c0       	rjmp	.+262    	; 0x1f8c <USB_Device_ProcessControlRequest+0x146>
    1e86:	30 f4       	brcc	.+12     	; 0x1e94 <USB_Device_ProcessControlRequest+0x4e>
    1e88:	91 30       	cpi	r25, 0x01	; 1
    1e8a:	a9 f1       	breq	.+106    	; 0x1ef6 <USB_Device_ProcessControlRequest+0xb0>
    1e8c:	68 f0       	brcs	.+26     	; 0x1ea8 <USB_Device_ProcessControlRequest+0x62>
    1e8e:	93 30       	cpi	r25, 0x03	; 3
    1e90:	91 f1       	breq	.+100    	; 0x1ef6 <USB_Device_ProcessControlRequest+0xb0>
    1e92:	21 c1       	rjmp	.+578    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
    1e94:	98 30       	cpi	r25, 0x08	; 8
    1e96:	09 f4       	brne	.+2      	; 0x1e9a <USB_Device_ProcessControlRequest+0x54>
    1e98:	ee c0       	rjmp	.+476    	; 0x2076 <USB_Device_ProcessControlRequest+0x230>
    1e9a:	99 30       	cpi	r25, 0x09	; 9
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <USB_Device_ProcessControlRequest+0x5a>
    1e9e:	fa c0       	rjmp	.+500    	; 0x2094 <USB_Device_ProcessControlRequest+0x24e>
    1ea0:	96 30       	cpi	r25, 0x06	; 6
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <USB_Device_ProcessControlRequest+0x60>
    1ea4:	18 c1       	rjmp	.+560    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
    1ea6:	93 c0       	rjmp	.+294    	; 0x1fce <USB_Device_ProcessControlRequest+0x188>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ea8:	80 38       	cpi	r24, 0x80	; 128
    1eaa:	21 f0       	breq	.+8      	; 0x1eb4 <USB_Device_ProcessControlRequest+0x6e>
    1eac:	82 38       	cpi	r24, 0x82	; 130
    1eae:	09 f0       	breq	.+2      	; 0x1eb2 <USB_Device_ProcessControlRequest+0x6c>
    1eb0:	12 c1       	rjmp	.+548    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
    1eb2:	08 c0       	rjmp	.+16     	; 0x1ec4 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1eb4:	80 91 b4 03 	lds	r24, 0x03B4
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1eb8:	90 91 b5 03 	lds	r25, 0x03B5
    1ebc:	99 23       	and	r25, r25
    1ebe:	89 f0       	breq	.+34     	; 0x1ee2 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1ec0:	82 60       	ori	r24, 0x02	; 2
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ec4:	80 91 bb 03 	lds	r24, 0x03BB
    1ec8:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1eca:	87 30       	cpi	r24, 0x07	; 7
    1ecc:	08 f0       	brcs	.+2      	; 0x1ed0 <USB_Device_ProcessControlRequest+0x8a>
    1ece:	03 c1       	rjmp	.+518    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ed0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ed4:	80 91 eb 00 	lds	r24, 0x00EB
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
    1ed8:	85 fb       	bst	r24, 5
    1eda:	88 27       	eor	r24, r24
    1edc:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ede:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1ee2:	90 91 e8 00 	lds	r25, 0x00E8
    1ee6:	97 7f       	andi	r25, 0xF7	; 247
    1ee8:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1eec:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1ef0:	10 92 f1 00 	sts	0x00F1, r1
    1ef4:	cb c0       	rjmp	.+406    	; 0x208c <USB_Device_ProcessControlRequest+0x246>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	2d 7f       	andi	r18, 0xFD	; 253
    1efa:	09 f0       	breq	.+2      	; 0x1efe <USB_Device_ProcessControlRequest+0xb8>
    1efc:	ec c0       	rjmp	.+472    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1efe:	88 23       	and	r24, r24
    1f00:	19 f0       	breq	.+6      	; 0x1f08 <USB_Device_ProcessControlRequest+0xc2>
    1f02:	82 30       	cpi	r24, 0x02	; 2
    1f04:	61 f0       	breq	.+24     	; 0x1f1e <USB_Device_ProcessControlRequest+0xd8>
    1f06:	e7 c0       	rjmp	.+462    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1f08:	80 91 b9 03 	lds	r24, 0x03B9
    1f0c:	81 30       	cpi	r24, 0x01	; 1
    1f0e:	09 f0       	breq	.+2      	; 0x1f12 <USB_Device_ProcessControlRequest+0xcc>
    1f10:	e2 c0       	rjmp	.+452    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1f12:	93 30       	cpi	r25, 0x03	; 3
    1f14:	09 f0       	breq	.+2      	; 0x1f18 <USB_Device_ProcessControlRequest+0xd2>
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	80 93 b5 03 	sts	0x03B5, r24
    1f1c:	2e c0       	rjmp	.+92     	; 0x1f7a <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1f1e:	80 91 b9 03 	lds	r24, 0x03B9
    1f22:	81 11       	cpse	r24, r1
    1f24:	2a c0       	rjmp	.+84     	; 0x1f7a <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1f26:	80 91 bb 03 	lds	r24, 0x03BB
    1f2a:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
    1f2c:	2f ef       	ldi	r18, 0xFF	; 255
    1f2e:	28 0f       	add	r18, r24
    1f30:	26 30       	cpi	r18, 0x06	; 6
    1f32:	08 f0       	brcs	.+2      	; 0x1f36 <USB_Device_ProcessControlRequest+0xf0>
    1f34:	d0 c0       	rjmp	.+416    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f36:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1f3a:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1f3e:	20 ff       	sbrs	r18, 0
    1f40:	1c c0       	rjmp	.+56     	; 0x1f7a <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1f42:	93 30       	cpi	r25, 0x03	; 3
    1f44:	21 f4       	brne	.+8      	; 0x1f4e <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1f46:	80 91 eb 00 	lds	r24, 0x00EB
    1f4a:	80 62       	ori	r24, 0x20	; 32
    1f4c:	14 c0       	rjmp	.+40     	; 0x1f76 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1f4e:	90 91 eb 00 	lds	r25, 0x00EB
    1f52:	90 61       	ori	r25, 0x10	; 16
    1f54:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f58:	21 e0       	ldi	r18, 0x01	; 1
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	a9 01       	movw	r20, r18
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <USB_Device_ProcessControlRequest+0x11e>
    1f60:	44 0f       	add	r20, r20
    1f62:	55 1f       	adc	r21, r21
    1f64:	8a 95       	dec	r24
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <USB_Device_ProcessControlRequest+0x11a>
    1f68:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1f6c:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f70:	80 91 eb 00 	lds	r24, 0x00EB
    1f74:	88 60       	ori	r24, 0x08	; 8
    1f76:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f7a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f7e:	80 91 e8 00 	lds	r24, 0x00E8
    1f82:	87 7f       	andi	r24, 0xF7	; 247
    1f84:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f88:	aa dd       	rcall	.-1196   	; 0x1ade <Endpoint_ClearStatusStage>
    1f8a:	a5 c0       	rjmp	.+330    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	a3 c0       	rjmp	.+326    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f90:	10 91 b9 03 	lds	r17, 0x03B9
    1f94:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f96:	80 91 e3 00 	lds	r24, 0x00E3
    1f9a:	80 78       	andi	r24, 0x80	; 128
    1f9c:	81 2b       	or	r24, r17
    1f9e:	80 93 e3 00 	sts	0x00E3, r24
    1fa2:	80 91 e8 00 	lds	r24, 0x00E8
    1fa6:	87 7f       	andi	r24, 0xF7	; 247
    1fa8:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1fac:	98 dd       	rcall	.-1232   	; 0x1ade <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1fae:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1fb2:	80 ff       	sbrs	r24, 0
    1fb4:	fc cf       	rjmp	.-8      	; 0x1fae <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1fb6:	80 91 e3 00 	lds	r24, 0x00E3
    1fba:	80 68       	ori	r24, 0x80	; 128
    1fbc:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1fc0:	11 11       	cpse	r17, r1
    1fc2:	02 c0       	rjmp	.+4      	; 0x1fc8 <USB_Device_ProcessControlRequest+0x182>
    1fc4:	82 e0       	ldi	r24, 0x02	; 2
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <USB_Device_ProcessControlRequest+0x184>
    1fc8:	83 e0       	ldi	r24, 0x03	; 3
    1fca:	8e bb       	out	0x1e, r24	; 30
    1fcc:	84 c0       	rjmp	.+264    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1fce:	80 58       	subi	r24, 0x80	; 128
    1fd0:	82 30       	cpi	r24, 0x02	; 2
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <USB_Device_ProcessControlRequest+0x190>
    1fd4:	80 c0       	rjmp	.+256    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1fd6:	80 91 b9 03 	lds	r24, 0x03B9
    1fda:	90 91 ba 03 	lds	r25, 0x03BA
    1fde:	8c 3d       	cpi	r24, 0xDC	; 220
    1fe0:	53 e0       	ldi	r21, 0x03	; 3
    1fe2:	95 07       	cpc	r25, r21
    1fe4:	71 f5       	brne	.+92     	; 0x2042 <USB_Device_ProcessControlRequest+0x1fc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1fea:	8a e2       	ldi	r24, 0x2A	; 42
    1fec:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1fee:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1ff0:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1ff2:	de 01       	movw	r26, r28
    1ff4:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1ff8:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1ffa:	51 e2       	ldi	r21, 0x21	; 33
    1ffc:	e3 2f       	mov	r30, r19
    1ffe:	f0 e0       	ldi	r31, 0x00	; 0
    2000:	50 93 57 00 	sts	0x0057, r21
    2004:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    2006:	20 ff       	sbrs	r18, 0
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <USB_Device_ProcessControlRequest+0x1ca>
					{
						SerialByte >>= 4;
    200a:	e2 95       	swap	r30
    200c:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    200e:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    2010:	ef 70       	andi	r30, 0x0F	; 15
    2012:	8e 2f       	mov	r24, r30
    2014:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    2016:	ea 30       	cpi	r30, 0x0A	; 10
    2018:	10 f0       	brcs	.+4      	; 0x201e <USB_Device_ProcessControlRequest+0x1d8>
    201a:	c7 96       	adiw	r24, 0x37	; 55
    201c:	01 c0       	rjmp	.+2      	; 0x2020 <USB_Device_ProcessControlRequest+0x1da>
    201e:	c0 96       	adiw	r24, 0x30	; 48
    2020:	8d 93       	st	X+, r24
    2022:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    2024:	2f 5f       	subi	r18, 0xFF	; 255
    2026:	24 31       	cpi	r18, 0x14	; 20
    2028:	49 f7       	brne	.-46     	; 0x1ffc <USB_Device_ProcessControlRequest+0x1b6>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    202a:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    202c:	80 91 e8 00 	lds	r24, 0x00E8
    2030:	87 7f       	andi	r24, 0xF7	; 247
    2032:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    2036:	6a e2       	ldi	r22, 0x2A	; 42
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	ce 01       	movw	r24, r28
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	43 dc       	rcall	.-1914   	; 0x18c6 <Endpoint_Write_Control_Stream_LE>
    2040:	14 c0       	rjmp	.+40     	; 0x206a <USB_Device_ProcessControlRequest+0x224>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    2042:	60 91 bb 03 	lds	r22, 0x03BB
    2046:	70 91 bc 03 	lds	r23, 0x03BC
    204a:	ae 01       	movw	r20, r28
    204c:	4f 5f       	subi	r20, 0xFF	; 255
    204e:	5f 4f       	sbci	r21, 0xFF	; 255
    2050:	5d d8       	rcall	.-3910   	; 0x110c <CALLBACK_USB_GetDescriptor>
    2052:	bc 01       	movw	r22, r24
    2054:	89 2b       	or	r24, r25
    2056:	09 f4       	brne	.+2      	; 0x205a <USB_Device_ProcessControlRequest+0x214>
    2058:	3e c0       	rjmp	.+124    	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
    205a:	90 91 e8 00 	lds	r25, 0x00E8
    205e:	97 7f       	andi	r25, 0xF7	; 247
    2060:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    2064:	89 81       	ldd	r24, Y+1	; 0x01
    2066:	9a 81       	ldd	r25, Y+2	; 0x02
    2068:	8a dc       	rcall	.-1772   	; 0x197e <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    206a:	80 91 e8 00 	lds	r24, 0x00E8
    206e:	8b 77       	andi	r24, 0x7B	; 123
    2070:	80 93 e8 00 	sts	0x00E8, r24
    2074:	30 c0       	rjmp	.+96     	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2076:	80 38       	cpi	r24, 0x80	; 128
    2078:	71 f5       	brne	.+92     	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    207a:	80 91 e8 00 	lds	r24, 0x00E8
    207e:	87 7f       	andi	r24, 0xF7	; 247
    2080:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2084:	80 91 b3 03 	lds	r24, 0x03B3
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2088:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    208c:	80 91 e8 00 	lds	r24, 0x00E8
    2090:	8e 77       	andi	r24, 0x7E	; 126
    2092:	78 cf       	rjmp	.-272    	; 0x1f84 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2094:	81 11       	cpse	r24, r1
    2096:	1f c0       	rjmp	.+62     	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    2098:	80 91 b9 03 	lds	r24, 0x03B9
    209c:	90 91 ba 03 	lds	r25, 0x03BA
    20a0:	99 27       	eor	r25, r25
    20a2:	02 97       	sbiw	r24, 0x02	; 2
    20a4:	c4 f4       	brge	.+48     	; 0x20d6 <USB_Device_ProcessControlRequest+0x290>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20a6:	80 91 e8 00 	lds	r24, 0x00E8
    20aa:	87 7f       	andi	r24, 0xF7	; 247
    20ac:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    20b0:	80 91 b9 03 	lds	r24, 0x03B9
    20b4:	80 93 b3 03 	sts	0x03B3, r24

	Endpoint_ClearStatusStage();
    20b8:	12 dd       	rcall	.-1500   	; 0x1ade <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    20ba:	80 91 b3 03 	lds	r24, 0x03B3
    20be:	81 11       	cpse	r24, r1
    20c0:	06 c0       	rjmp	.+12     	; 0x20ce <USB_Device_ProcessControlRequest+0x288>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    20c2:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    20c6:	87 fd       	sbrc	r24, 7
    20c8:	02 c0       	rjmp	.+4      	; 0x20ce <USB_Device_ProcessControlRequest+0x288>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	01 c0       	rjmp	.+2      	; 0x20d0 <USB_Device_ProcessControlRequest+0x28a>
    20ce:	84 e0       	ldi	r24, 0x04	; 4
    20d0:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
    20d2:	0e 94 68 08 	call	0x10d0	; 0x10d0 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    20d6:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    20da:	83 ff       	sbrs	r24, 3
    20dc:	0a c0       	rjmp	.+20     	; 0x20f2 <USB_Device_ProcessControlRequest+0x2ac>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    20de:	80 91 e8 00 	lds	r24, 0x00E8
    20e2:	87 7f       	andi	r24, 0xF7	; 247
    20e4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    20e8:	80 91 eb 00 	lds	r24, 0x00EB
    20ec:	80 62       	ori	r24, 0x20	; 32
    20ee:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    20f2:	aa 96       	adiw	r28, 0x2a	; 42
    20f4:	0f b6       	in	r0, 0x3f	; 63
    20f6:	f8 94       	cli
    20f8:	de bf       	out	0x3e, r29	; 62
    20fa:	0f be       	out	0x3f, r0	; 63
    20fc:	cd bf       	out	0x3d, r28	; 61
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	08 95       	ret

00002106 <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
    2106:	08 95       	ret

00002108 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    2108:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
    210a:	8e b3       	in	r24, 0x1e	; 30
    210c:	88 23       	and	r24, r24
    210e:	99 f0       	breq	.+38     	; 0x2136 <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2110:	c0 91 e9 00 	lds	r28, 0x00E9
    2114:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    2116:	90 91 ec 00 	lds	r25, 0x00EC
    211a:	89 2f       	mov	r24, r25
    211c:	81 70       	andi	r24, 0x01	; 1
    211e:	90 fd       	sbrc	r25, 0
    2120:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    2122:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2124:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2128:	80 91 e8 00 	lds	r24, 0x00E8

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
    212c:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
    212e:	8b de       	rcall	.-746    	; 0x1e46 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2130:	cf 70       	andi	r28, 0x0F	; 15
    2132:	c0 93 e9 00 	sts	0x00E9, r28
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
    2136:	cf 91       	pop	r28
    2138:	08 95       	ret

0000213a <CDC_Device_ConfigureEndpoints>:

	void CDC_Device_CreateBlockingStream(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
	                                     FILE* const Stream)
	{
		*Stream = (FILE)FDEV_SETUP_STREAM(CDC_Device_putchar, CDC_Device_getchar_Blocking, _FDEV_SETUP_RW);
		fdev_set_udata(Stream, CDCInterfaceInfo);
    213a:	cf 93       	push	r28
    213c:	df 93       	push	r29
    213e:	ec 01       	movw	r28, r24
    2140:	fc 01       	movw	r30, r24
    2142:	70 96       	adiw	r30, 0x10	; 16
    2144:	8b e0       	ldi	r24, 0x0B	; 11
    2146:	df 01       	movw	r26, r30
    2148:	1d 92       	st	X+, r1
    214a:	8a 95       	dec	r24
    214c:	e9 f7       	brne	.-6      	; 0x2148 <CDC_Device_ConfigureEndpoints+0xe>
    214e:	82 e0       	ldi	r24, 0x02	; 2
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	89 87       	std	Y+9, r24	; 0x09
    2154:	83 e0       	ldi	r24, 0x03	; 3
    2156:	8e 87       	std	Y+14, r24	; 0x0e
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	ce 01       	movw	r24, r28
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	82 dc       	rcall	.-1788   	; 0x1a64 <Endpoint_ConfigureEndpointTable>
    2160:	88 23       	and	r24, r24
    2162:	61 f0       	breq	.+24     	; 0x217c <CDC_Device_ConfigureEndpoints+0x42>
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	ce 01       	movw	r24, r28
    2168:	06 96       	adiw	r24, 0x06	; 6
    216a:	7c dc       	rcall	.-1800   	; 0x1a64 <Endpoint_ConfigureEndpointTable>
    216c:	88 23       	and	r24, r24
    216e:	31 f0       	breq	.+12     	; 0x217c <CDC_Device_ConfigureEndpoints+0x42>
    2170:	61 e0       	ldi	r22, 0x01	; 1
    2172:	ce 01       	movw	r24, r28
    2174:	0b 96       	adiw	r24, 0x0b	; 11
    2176:	df 91       	pop	r29
    2178:	cf 91       	pop	r28
    217a:	74 cc       	rjmp	.-1816   	; 0x1a64 <Endpoint_ConfigureEndpointTable>
    217c:	80 e0       	ldi	r24, 0x00	; 0
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <CDC_Device_SendString_P>:
    2184:	0f 93       	push	r16
    2186:	1f 93       	push	r17
    2188:	cf 93       	push	r28
    218a:	df 93       	push	r29
    218c:	2e b3       	in	r18, 0x1e	; 30
    218e:	24 30       	cpi	r18, 0x04	; 4
    2190:	c9 f4       	brne	.+50     	; 0x21c4 <CDC_Device_SendString_P+0x40>
    2192:	fc 01       	movw	r30, r24
    2194:	04 89       	ldd	r16, Z+20	; 0x14
    2196:	15 89       	ldd	r17, Z+21	; 0x15
    2198:	26 89       	ldd	r18, Z+22	; 0x16
    219a:	37 89       	ldd	r19, Z+23	; 0x17
    219c:	01 2b       	or	r16, r17
    219e:	02 2b       	or	r16, r18
    21a0:	03 2b       	or	r16, r19
    21a2:	81 f0       	breq	.+32     	; 0x21c4 <CDC_Device_SendString_P+0x40>
    21a4:	eb 01       	movw	r28, r22
    21a6:	81 81       	ldd	r24, Z+1	; 0x01
    21a8:	8f 70       	andi	r24, 0x0F	; 15
    21aa:	80 93 e9 00 	sts	0x00E9, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	5f d6       	rcall	.+3262   	; 0x2e70 <__strlen_P>
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	bc 01       	movw	r22, r24
    21b8:	ce 01       	movw	r24, r28
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	36 cb       	rjmp	.-2452   	; 0x1830 <Endpoint_Write_PStream_LE>
    21c4:	82 e0       	ldi	r24, 0x02	; 2
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	1f 91       	pop	r17
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <CDC_Device_SendByte>:
    21d0:	0f 93       	push	r16
    21d2:	1f 93       	push	r17
    21d4:	cf 93       	push	r28
    21d6:	2e b3       	in	r18, 0x1e	; 30
    21d8:	24 30       	cpi	r18, 0x04	; 4
    21da:	f9 f4       	brne	.+62     	; 0x221a <CDC_Device_SendByte+0x4a>
    21dc:	fc 01       	movw	r30, r24
    21de:	04 89       	ldd	r16, Z+20	; 0x14
    21e0:	15 89       	ldd	r17, Z+21	; 0x15
    21e2:	26 89       	ldd	r18, Z+22	; 0x16
    21e4:	37 89       	ldd	r19, Z+23	; 0x17
    21e6:	01 2b       	or	r16, r17
    21e8:	02 2b       	or	r16, r18
    21ea:	03 2b       	or	r16, r19
    21ec:	b1 f0       	breq	.+44     	; 0x221a <CDC_Device_SendByte+0x4a>
    21ee:	c6 2f       	mov	r28, r22
    21f0:	81 81       	ldd	r24, Z+1	; 0x01
    21f2:	8f 70       	andi	r24, 0x0F	; 15
    21f4:	80 93 e9 00 	sts	0x00E9, r24
    21f8:	80 91 e8 00 	lds	r24, 0x00E8
    21fc:	85 ff       	sbrs	r24, 5
    21fe:	04 c0       	rjmp	.+8      	; 0x2208 <CDC_Device_SendByte+0x38>
    2200:	c0 93 f1 00 	sts	0x00F1, r28
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	0a c0       	rjmp	.+20     	; 0x221c <CDC_Device_SendByte+0x4c>
    2208:	80 91 e8 00 	lds	r24, 0x00E8
    220c:	8e 77       	andi	r24, 0x7E	; 126
    220e:	80 93 e8 00 	sts	0x00E8, r24
    2212:	82 dc       	rcall	.-1788   	; 0x1b18 <Endpoint_WaitUntilReady>
    2214:	88 23       	and	r24, r24
    2216:	a1 f3       	breq	.-24     	; 0x2200 <CDC_Device_SendByte+0x30>
    2218:	01 c0       	rjmp	.+2      	; 0x221c <CDC_Device_SendByte+0x4c>
    221a:	82 e0       	ldi	r24, 0x02	; 2
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	08 95       	ret

00002224 <CDC_Device_putchar>:
    2224:	cf 93       	push	r28
    2226:	c8 2f       	mov	r28, r24
    2228:	fb 01       	movw	r30, r22
    222a:	68 2f       	mov	r22, r24
    222c:	84 85       	ldd	r24, Z+12	; 0x0c
    222e:	95 85       	ldd	r25, Z+13	; 0x0d
    2230:	cf df       	rcall	.-98     	; 0x21d0 <CDC_Device_SendByte>
    2232:	81 11       	cpse	r24, r1
    2234:	03 c0       	rjmp	.+6      	; 0x223c <CDC_Device_putchar+0x18>
    2236:	8c 2f       	mov	r24, r28
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	02 c0       	rjmp	.+4      	; 0x2240 <CDC_Device_putchar+0x1c>
    223c:	8f ef       	ldi	r24, 0xFF	; 255
    223e:	9f ef       	ldi	r25, 0xFF	; 255
    2240:	cf 91       	pop	r28
    2242:	08 95       	ret

00002244 <CDC_Device_Flush>:
    2244:	2e b3       	in	r18, 0x1e	; 30
    2246:	24 30       	cpi	r18, 0x04	; 4
    2248:	41 f5       	brne	.+80     	; 0x229a <CDC_Device_Flush+0x56>
    224a:	fc 01       	movw	r30, r24
    224c:	44 89       	ldd	r20, Z+20	; 0x14
    224e:	55 89       	ldd	r21, Z+21	; 0x15
    2250:	66 89       	ldd	r22, Z+22	; 0x16
    2252:	77 89       	ldd	r23, Z+23	; 0x17
    2254:	45 2b       	or	r20, r21
    2256:	46 2b       	or	r20, r22
    2258:	47 2b       	or	r20, r23
    225a:	f9 f0       	breq	.+62     	; 0x229a <CDC_Device_Flush+0x56>
    225c:	81 81       	ldd	r24, Z+1	; 0x01
    225e:	8f 70       	andi	r24, 0x0F	; 15
    2260:	80 93 e9 00 	sts	0x00E9, r24
    2264:	20 91 f3 00 	lds	r18, 0x00F3
    2268:	80 91 f2 00 	lds	r24, 0x00F2
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	92 2b       	or	r25, r18
    2270:	89 2b       	or	r24, r25
    2272:	89 f0       	breq	.+34     	; 0x2296 <CDC_Device_Flush+0x52>
    2274:	90 91 e8 00 	lds	r25, 0x00E8
    2278:	80 91 e8 00 	lds	r24, 0x00E8
    227c:	8e 77       	andi	r24, 0x7E	; 126
    227e:	80 93 e8 00 	sts	0x00E8, r24
    2282:	95 fd       	sbrc	r25, 5
    2284:	08 c0       	rjmp	.+16     	; 0x2296 <CDC_Device_Flush+0x52>
    2286:	48 dc       	rcall	.-1904   	; 0x1b18 <Endpoint_WaitUntilReady>
    2288:	81 11       	cpse	r24, r1
    228a:	08 c0       	rjmp	.+16     	; 0x229c <CDC_Device_Flush+0x58>
    228c:	80 91 e8 00 	lds	r24, 0x00E8
    2290:	8e 77       	andi	r24, 0x7E	; 126
    2292:	80 93 e8 00 	sts	0x00E8, r24
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	08 95       	ret
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	08 95       	ret

0000229e <CDC_Device_USBTask>:
    229e:	2e b3       	in	r18, 0x1e	; 30
    22a0:	24 30       	cpi	r18, 0x04	; 4
    22a2:	89 f4       	brne	.+34     	; 0x22c6 <CDC_Device_USBTask+0x28>
    22a4:	fc 01       	movw	r30, r24
    22a6:	44 89       	ldd	r20, Z+20	; 0x14
    22a8:	55 89       	ldd	r21, Z+21	; 0x15
    22aa:	66 89       	ldd	r22, Z+22	; 0x16
    22ac:	77 89       	ldd	r23, Z+23	; 0x17
    22ae:	45 2b       	or	r20, r21
    22b0:	46 2b       	or	r20, r22
    22b2:	47 2b       	or	r20, r23
    22b4:	41 f0       	breq	.+16     	; 0x22c6 <CDC_Device_USBTask+0x28>
    22b6:	21 81       	ldd	r18, Z+1	; 0x01
    22b8:	2f 70       	andi	r18, 0x0F	; 15
    22ba:	20 93 e9 00 	sts	0x00E9, r18
    22be:	20 91 e8 00 	lds	r18, 0x00E8
    22c2:	20 fd       	sbrc	r18, 0
    22c4:	bf cf       	rjmp	.-130    	; 0x2244 <CDC_Device_Flush>
    22c6:	08 95       	ret

000022c8 <CDC_Device_ReceiveByte>:
    22c8:	2e b3       	in	r18, 0x1e	; 30
    22ca:	24 30       	cpi	r18, 0x04	; 4
    22cc:	19 f0       	breq	.+6      	; 0x22d4 <CDC_Device_ReceiveByte+0xc>
    22ce:	8f ef       	ldi	r24, 0xFF	; 255
    22d0:	9f ef       	ldi	r25, 0xFF	; 255
    22d2:	08 95       	ret
    22d4:	fc 01       	movw	r30, r24
    22d6:	44 89       	ldd	r20, Z+20	; 0x14
    22d8:	55 89       	ldd	r21, Z+21	; 0x15
    22da:	66 89       	ldd	r22, Z+22	; 0x16
    22dc:	77 89       	ldd	r23, Z+23	; 0x17
    22de:	45 2b       	or	r20, r21
    22e0:	46 2b       	or	r20, r22
    22e2:	47 2b       	or	r20, r23
    22e4:	a1 f3       	breq	.-24     	; 0x22ce <CDC_Device_ReceiveByte+0x6>
    22e6:	86 81       	ldd	r24, Z+6	; 0x06
    22e8:	8f 70       	andi	r24, 0x0F	; 15
    22ea:	80 93 e9 00 	sts	0x00E9, r24
    22ee:	80 91 e8 00 	lds	r24, 0x00E8
    22f2:	82 ff       	sbrs	r24, 2
    22f4:	ec cf       	rjmp	.-40     	; 0x22ce <CDC_Device_ReceiveByte+0x6>
    22f6:	20 91 f3 00 	lds	r18, 0x00F3
    22fa:	80 91 f2 00 	lds	r24, 0x00F2
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	92 2b       	or	r25, r18
    2302:	89 2b       	or	r24, r25
    2304:	21 f0       	breq	.+8      	; 0x230e <CDC_Device_ReceiveByte+0x46>
    2306:	20 91 f1 00 	lds	r18, 0x00F1
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <CDC_Device_ReceiveByte+0x4a>
    230e:	2f ef       	ldi	r18, 0xFF	; 255
    2310:	3f ef       	ldi	r19, 0xFF	; 255
    2312:	40 91 f3 00 	lds	r20, 0x00F3
    2316:	80 91 f2 00 	lds	r24, 0x00F2
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	94 2b       	or	r25, r20
    231e:	89 2b       	or	r24, r25
    2320:	29 f4       	brne	.+10     	; 0x232c <CDC_Device_ReceiveByte+0x64>
    2322:	80 91 e8 00 	lds	r24, 0x00E8
    2326:	8b 77       	andi	r24, 0x7B	; 123
    2328:	80 93 e8 00 	sts	0x00E8, r24
    232c:	c9 01       	movw	r24, r18
    232e:	08 95       	ret

00002330 <CDC_Device_getchar>:
    2330:	fc 01       	movw	r30, r24
    2332:	84 85       	ldd	r24, Z+12	; 0x0c
    2334:	95 85       	ldd	r25, Z+13	; 0x0d
    2336:	c8 df       	rcall	.-112    	; 0x22c8 <CDC_Device_ReceiveByte>
    2338:	97 ff       	sbrs	r25, 7
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <CDC_Device_getchar+0x10>
    233c:	8e ef       	ldi	r24, 0xFE	; 254
    233e:	9f ef       	ldi	r25, 0xFF	; 255
    2340:	08 95       	ret

00002342 <CDC_Device_CreateStream>:
    2342:	fb 01       	movw	r30, r22
    2344:	2e e0       	ldi	r18, 0x0E	; 14
    2346:	db 01       	movw	r26, r22
    2348:	1d 92       	st	X+, r1
    234a:	2a 95       	dec	r18
    234c:	e9 f7       	brne	.-6      	; 0x2348 <CDC_Device_CreateStream+0x6>
    234e:	23 e0       	ldi	r18, 0x03	; 3
    2350:	23 83       	std	Z+3, r18	; 0x03
    2352:	22 e1       	ldi	r18, 0x12	; 18
    2354:	31 e1       	ldi	r19, 0x11	; 17
    2356:	31 87       	std	Z+9, r19	; 0x09
    2358:	20 87       	std	Z+8, r18	; 0x08
    235a:	28 e9       	ldi	r18, 0x98	; 152
    235c:	31 e1       	ldi	r19, 0x11	; 17
    235e:	33 87       	std	Z+11, r19	; 0x0b
    2360:	22 87       	std	Z+10, r18	; 0x0a
    2362:	95 87       	std	Z+13, r25	; 0x0d
    2364:	84 87       	std	Z+12, r24	; 0x0c
    2366:	08 95       	ret

00002368 <CDC_Device_Event_Stub>:
		return ReceivedByte;
	}
#endif

void CDC_Device_Event_Stub(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    2368:	08 95       	ret

0000236a <CDC_Device_Event_Stub_2>:

}

void CDC_Device_Event_Stub_2(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo, const uint8_t _1)
{
    236a:	08 95       	ret

0000236c <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29
    2370:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2372:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    2376:	83 ff       	sbrs	r24, 3
    2378:	a6 c0       	rjmp	.+332    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    237a:	88 81       	ld	r24, Y
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	20 91 bb 03 	lds	r18, 0x03BB
    2382:	30 91 bc 03 	lds	r19, 0x03BC
    2386:	28 17       	cp	r18, r24
    2388:	39 07       	cpc	r19, r25
    238a:	09 f0       	breq	.+2      	; 0x238e <CDC_Device_ProcessControlRequest+0x22>
    238c:	9c c0       	rjmp	.+312    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
	  return;

	switch (USB_ControlRequest.bRequest)
    238e:	80 91 b8 03 	lds	r24, 0x03B8
    2392:	81 32       	cpi	r24, 0x21	; 33
    2394:	61 f0       	breq	.+24     	; 0x23ae <CDC_Device_ProcessControlRequest+0x42>
    2396:	20 f4       	brcc	.+8      	; 0x23a0 <CDC_Device_ProcessControlRequest+0x34>
    2398:	80 32       	cpi	r24, 0x20	; 32
    239a:	09 f4       	brne	.+2      	; 0x239e <CDC_Device_ProcessControlRequest+0x32>
    239c:	3e c0       	rjmp	.+124    	; 0x241a <CDC_Device_ProcessControlRequest+0xae>
    239e:	93 c0       	rjmp	.+294    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
    23a0:	82 32       	cpi	r24, 0x22	; 34
    23a2:	09 f4       	brne	.+2      	; 0x23a6 <CDC_Device_ProcessControlRequest+0x3a>
    23a4:	6b c0       	rjmp	.+214    	; 0x247c <CDC_Device_ProcessControlRequest+0x110>
    23a6:	83 32       	cpi	r24, 0x23	; 35
    23a8:	09 f4       	brne	.+2      	; 0x23ac <CDC_Device_ProcessControlRequest+0x40>
    23aa:	7d c0       	rjmp	.+250    	; 0x24a6 <CDC_Device_ProcessControlRequest+0x13a>
    23ac:	8c c0       	rjmp	.+280    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    23ae:	80 91 b7 03 	lds	r24, 0x03B7
    23b2:	81 3a       	cpi	r24, 0xA1	; 161
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <CDC_Device_ProcessControlRequest+0x4c>
    23b6:	87 c0       	rjmp	.+270    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    23b8:	80 91 e8 00 	lds	r24, 0x00E8
    23bc:	87 7f       	andi	r24, 0xF7	; 247
    23be:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    23c2:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    23c6:	80 ff       	sbrs	r24, 0
    23c8:	fc cf       	rjmp	.-8      	; 0x23c2 <CDC_Device_ProcessControlRequest+0x56>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    23ca:	8c 89       	ldd	r24, Y+20	; 0x14
    23cc:	9d 89       	ldd	r25, Y+21	; 0x15
    23ce:	ae 89       	ldd	r26, Y+22	; 0x16
    23d0:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    23d2:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    23d6:	49 2f       	mov	r20, r25
    23d8:	5a 2f       	mov	r21, r26
    23da:	6b 2f       	mov	r22, r27
    23dc:	77 27       	eor	r23, r23
    23de:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 16);
    23e2:	ad 01       	movw	r20, r26
    23e4:	66 27       	eor	r22, r22
    23e6:	77 27       	eor	r23, r23
    23e8:	40 93 f1 00 	sts	0x00F1, r20
				UEDATX = (Data >> 24);
    23ec:	8b 2f       	mov	r24, r27
    23ee:	99 27       	eor	r25, r25
    23f0:	aa 27       	eor	r26, r26
    23f2:	bb 27       	eor	r27, r27
    23f4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    23f8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    23fa:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    23fe:	89 8d       	ldd	r24, Y+25	; 0x19
    2400:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    2404:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2406:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    240a:	80 91 e8 00 	lds	r24, 0x00E8
    240e:	8e 77       	andi	r24, 0x7E	; 126
    2410:	80 93 e8 00 	sts	0x00E8, r24
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2414:	df 91       	pop	r29
    2416:	cf 91       	pop	r28
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    2418:	62 cb       	rjmp	.-2364   	; 0x1ade <Endpoint_ClearStatusStage>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    241a:	80 91 b7 03 	lds	r24, 0x03B7
    241e:	81 32       	cpi	r24, 0x21	; 33
    2420:	09 f0       	breq	.+2      	; 0x2424 <CDC_Device_ProcessControlRequest+0xb8>
    2422:	51 c0       	rjmp	.+162    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2424:	80 91 e8 00 	lds	r24, 0x00E8
    2428:	87 7f       	andi	r24, 0xF7	; 247
    242a:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    242e:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    2432:	82 fd       	sbrc	r24, 2
    2434:	04 c0       	rjmp	.+8      	; 0x243e <CDC_Device_ProcessControlRequest+0xd2>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    2436:	8e b3       	in	r24, 0x1e	; 30
    2438:	81 11       	cpse	r24, r1
    243a:	f9 cf       	rjmp	.-14     	; 0x242e <CDC_Device_ProcessControlRequest+0xc2>
    243c:	44 c0       	rjmp	.+136    	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    243e:	30 91 f1 00 	lds	r19, 0x00F1
				Data.Bytes[1] = UEDATX;
    2442:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[2] = UEDATX;
    2446:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[3] = UEDATX;
    244a:	80 91 f1 00 	lds	r24, 0x00F1
					  return;
				}

				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    244e:	3c 8b       	std	Y+20, r19	; 0x14
    2450:	2d 8b       	std	Y+21, r18	; 0x15
    2452:	9e 8b       	std	Y+22, r25	; 0x16
    2454:	8f 8b       	std	Y+23, r24	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2456:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    245a:	88 8f       	std	Y+24, r24	; 0x18
    245c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    2460:	89 8f       	std	Y+25, r24	; 0x19
    2462:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    2466:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2468:	80 91 e8 00 	lds	r24, 0x00E8
    246c:	8b 77       	andi	r24, 0x7B	; 123
    246e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    2472:	35 db       	rcall	.-2454   	; 0x1ade <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    2474:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    2476:	df 91       	pop	r29
    2478:	cf 91       	pop	r28
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    247a:	76 cf       	rjmp	.-276    	; 0x2368 <CDC_Device_Event_Stub>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    247c:	80 91 b7 03 	lds	r24, 0x03B7
    2480:	81 32       	cpi	r24, 0x21	; 33
    2482:	09 f5       	brne	.+66     	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2484:	80 91 e8 00 	lds	r24, 0x00E8
    2488:	87 7f       	andi	r24, 0xF7	; 247
    248a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    248e:	27 db       	rcall	.-2482   	; 0x1ade <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    2490:	80 91 b9 03 	lds	r24, 0x03B9
    2494:	90 91 ba 03 	lds	r25, 0x03BA
    2498:	99 8b       	std	Y+17, r25	; 0x11
    249a:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    249c:	ce 01       	movw	r24, r28
				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
			}

			break;
	}
}
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    24a2:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <EVENT_CDC_Device_ControLineStateChanged>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    24a6:	80 91 b7 03 	lds	r24, 0x03B7
    24aa:	81 32       	cpi	r24, 0x21	; 33
    24ac:	61 f4       	brne	.+24     	; 0x24c6 <CDC_Device_ProcessControlRequest+0x15a>
    24ae:	80 91 e8 00 	lds	r24, 0x00E8
    24b2:	87 7f       	andi	r24, 0xF7	; 247
    24b4:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    24b8:	12 db       	rcall	.-2524   	; 0x1ade <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    24ba:	60 91 b9 03 	lds	r22, 0x03B9
    24be:	ce 01       	movw	r24, r28
			}

			break;
	}
}
    24c0:	df 91       	pop	r29
    24c2:	cf 91       	pop	r28
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    24c4:	52 cf       	rjmp	.-348    	; 0x236a <CDC_Device_Event_Stub_2>
			}

			break;
	}
}
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	08 95       	ret

000024cc <__subsf3>:
    24cc:	50 58       	subi	r21, 0x80	; 128

000024ce <__addsf3>:
    24ce:	bb 27       	eor	r27, r27
    24d0:	aa 27       	eor	r26, r26
    24d2:	0e d0       	rcall	.+28     	; 0x24f0 <__addsf3x>
    24d4:	4d c1       	rjmp	.+666    	; 0x2770 <__fp_round>
    24d6:	3e d1       	rcall	.+636    	; 0x2754 <__fp_pscA>
    24d8:	30 f0       	brcs	.+12     	; 0x24e6 <__addsf3+0x18>
    24da:	43 d1       	rcall	.+646    	; 0x2762 <__fp_pscB>
    24dc:	20 f0       	brcs	.+8      	; 0x24e6 <__addsf3+0x18>
    24de:	31 f4       	brne	.+12     	; 0x24ec <__addsf3+0x1e>
    24e0:	9f 3f       	cpi	r25, 0xFF	; 255
    24e2:	11 f4       	brne	.+4      	; 0x24e8 <__addsf3+0x1a>
    24e4:	1e f4       	brtc	.+6      	; 0x24ec <__addsf3+0x1e>
    24e6:	33 c1       	rjmp	.+614    	; 0x274e <__fp_nan>
    24e8:	0e f4       	brtc	.+2      	; 0x24ec <__addsf3+0x1e>
    24ea:	e0 95       	com	r30
    24ec:	e7 fb       	bst	r30, 7
    24ee:	29 c1       	rjmp	.+594    	; 0x2742 <__fp_inf>

000024f0 <__addsf3x>:
    24f0:	e9 2f       	mov	r30, r25
    24f2:	4f d1       	rcall	.+670    	; 0x2792 <__fp_split3>
    24f4:	80 f3       	brcs	.-32     	; 0x24d6 <__addsf3+0x8>
    24f6:	ba 17       	cp	r27, r26
    24f8:	62 07       	cpc	r22, r18
    24fa:	73 07       	cpc	r23, r19
    24fc:	84 07       	cpc	r24, r20
    24fe:	95 07       	cpc	r25, r21
    2500:	18 f0       	brcs	.+6      	; 0x2508 <__addsf3x+0x18>
    2502:	71 f4       	brne	.+28     	; 0x2520 <__addsf3x+0x30>
    2504:	9e f5       	brtc	.+102    	; 0x256c <__addsf3x+0x7c>
    2506:	67 c1       	rjmp	.+718    	; 0x27d6 <__fp_zero>
    2508:	0e f4       	brtc	.+2      	; 0x250c <__addsf3x+0x1c>
    250a:	e0 95       	com	r30
    250c:	0b 2e       	mov	r0, r27
    250e:	ba 2f       	mov	r27, r26
    2510:	a0 2d       	mov	r26, r0
    2512:	0b 01       	movw	r0, r22
    2514:	b9 01       	movw	r22, r18
    2516:	90 01       	movw	r18, r0
    2518:	0c 01       	movw	r0, r24
    251a:	ca 01       	movw	r24, r20
    251c:	a0 01       	movw	r20, r0
    251e:	11 24       	eor	r1, r1
    2520:	ff 27       	eor	r31, r31
    2522:	59 1b       	sub	r21, r25
    2524:	99 f0       	breq	.+38     	; 0x254c <__addsf3x+0x5c>
    2526:	59 3f       	cpi	r21, 0xF9	; 249
    2528:	50 f4       	brcc	.+20     	; 0x253e <__addsf3x+0x4e>
    252a:	50 3e       	cpi	r21, 0xE0	; 224
    252c:	68 f1       	brcs	.+90     	; 0x2588 <__addsf3x+0x98>
    252e:	1a 16       	cp	r1, r26
    2530:	f0 40       	sbci	r31, 0x00	; 0
    2532:	a2 2f       	mov	r26, r18
    2534:	23 2f       	mov	r18, r19
    2536:	34 2f       	mov	r19, r20
    2538:	44 27       	eor	r20, r20
    253a:	58 5f       	subi	r21, 0xF8	; 248
    253c:	f3 cf       	rjmp	.-26     	; 0x2524 <__addsf3x+0x34>
    253e:	46 95       	lsr	r20
    2540:	37 95       	ror	r19
    2542:	27 95       	ror	r18
    2544:	a7 95       	ror	r26
    2546:	f0 40       	sbci	r31, 0x00	; 0
    2548:	53 95       	inc	r21
    254a:	c9 f7       	brne	.-14     	; 0x253e <__addsf3x+0x4e>
    254c:	7e f4       	brtc	.+30     	; 0x256c <__addsf3x+0x7c>
    254e:	1f 16       	cp	r1, r31
    2550:	ba 0b       	sbc	r27, r26
    2552:	62 0b       	sbc	r22, r18
    2554:	73 0b       	sbc	r23, r19
    2556:	84 0b       	sbc	r24, r20
    2558:	ba f0       	brmi	.+46     	; 0x2588 <__addsf3x+0x98>
    255a:	91 50       	subi	r25, 0x01	; 1
    255c:	a1 f0       	breq	.+40     	; 0x2586 <__addsf3x+0x96>
    255e:	ff 0f       	add	r31, r31
    2560:	bb 1f       	adc	r27, r27
    2562:	66 1f       	adc	r22, r22
    2564:	77 1f       	adc	r23, r23
    2566:	88 1f       	adc	r24, r24
    2568:	c2 f7       	brpl	.-16     	; 0x255a <__addsf3x+0x6a>
    256a:	0e c0       	rjmp	.+28     	; 0x2588 <__addsf3x+0x98>
    256c:	ba 0f       	add	r27, r26
    256e:	62 1f       	adc	r22, r18
    2570:	73 1f       	adc	r23, r19
    2572:	84 1f       	adc	r24, r20
    2574:	48 f4       	brcc	.+18     	; 0x2588 <__addsf3x+0x98>
    2576:	87 95       	ror	r24
    2578:	77 95       	ror	r23
    257a:	67 95       	ror	r22
    257c:	b7 95       	ror	r27
    257e:	f7 95       	ror	r31
    2580:	9e 3f       	cpi	r25, 0xFE	; 254
    2582:	08 f0       	brcs	.+2      	; 0x2586 <__addsf3x+0x96>
    2584:	b3 cf       	rjmp	.-154    	; 0x24ec <__addsf3+0x1e>
    2586:	93 95       	inc	r25
    2588:	88 0f       	add	r24, r24
    258a:	08 f0       	brcs	.+2      	; 0x258e <__addsf3x+0x9e>
    258c:	99 27       	eor	r25, r25
    258e:	ee 0f       	add	r30, r30
    2590:	97 95       	ror	r25
    2592:	87 95       	ror	r24
    2594:	08 95       	ret

00002596 <__divsf3>:
    2596:	0c d0       	rcall	.+24     	; 0x25b0 <__divsf3x>
    2598:	eb c0       	rjmp	.+470    	; 0x2770 <__fp_round>
    259a:	e3 d0       	rcall	.+454    	; 0x2762 <__fp_pscB>
    259c:	40 f0       	brcs	.+16     	; 0x25ae <__divsf3+0x18>
    259e:	da d0       	rcall	.+436    	; 0x2754 <__fp_pscA>
    25a0:	30 f0       	brcs	.+12     	; 0x25ae <__divsf3+0x18>
    25a2:	21 f4       	brne	.+8      	; 0x25ac <__divsf3+0x16>
    25a4:	5f 3f       	cpi	r21, 0xFF	; 255
    25a6:	19 f0       	breq	.+6      	; 0x25ae <__divsf3+0x18>
    25a8:	cc c0       	rjmp	.+408    	; 0x2742 <__fp_inf>
    25aa:	51 11       	cpse	r21, r1
    25ac:	15 c1       	rjmp	.+554    	; 0x27d8 <__fp_szero>
    25ae:	cf c0       	rjmp	.+414    	; 0x274e <__fp_nan>

000025b0 <__divsf3x>:
    25b0:	f0 d0       	rcall	.+480    	; 0x2792 <__fp_split3>
    25b2:	98 f3       	brcs	.-26     	; 0x259a <__divsf3+0x4>

000025b4 <__divsf3_pse>:
    25b4:	99 23       	and	r25, r25
    25b6:	c9 f3       	breq	.-14     	; 0x25aa <__divsf3+0x14>
    25b8:	55 23       	and	r21, r21
    25ba:	b1 f3       	breq	.-20     	; 0x25a8 <__divsf3+0x12>
    25bc:	95 1b       	sub	r25, r21
    25be:	55 0b       	sbc	r21, r21
    25c0:	bb 27       	eor	r27, r27
    25c2:	aa 27       	eor	r26, r26
    25c4:	62 17       	cp	r22, r18
    25c6:	73 07       	cpc	r23, r19
    25c8:	84 07       	cpc	r24, r20
    25ca:	38 f0       	brcs	.+14     	; 0x25da <__divsf3_pse+0x26>
    25cc:	9f 5f       	subi	r25, 0xFF	; 255
    25ce:	5f 4f       	sbci	r21, 0xFF	; 255
    25d0:	22 0f       	add	r18, r18
    25d2:	33 1f       	adc	r19, r19
    25d4:	44 1f       	adc	r20, r20
    25d6:	aa 1f       	adc	r26, r26
    25d8:	a9 f3       	breq	.-22     	; 0x25c4 <__divsf3_pse+0x10>
    25da:	33 d0       	rcall	.+102    	; 0x2642 <__divsf3_pse+0x8e>
    25dc:	0e 2e       	mov	r0, r30
    25de:	3a f0       	brmi	.+14     	; 0x25ee <__divsf3_pse+0x3a>
    25e0:	e0 e8       	ldi	r30, 0x80	; 128
    25e2:	30 d0       	rcall	.+96     	; 0x2644 <__divsf3_pse+0x90>
    25e4:	91 50       	subi	r25, 0x01	; 1
    25e6:	50 40       	sbci	r21, 0x00	; 0
    25e8:	e6 95       	lsr	r30
    25ea:	00 1c       	adc	r0, r0
    25ec:	ca f7       	brpl	.-14     	; 0x25e0 <__divsf3_pse+0x2c>
    25ee:	29 d0       	rcall	.+82     	; 0x2642 <__divsf3_pse+0x8e>
    25f0:	fe 2f       	mov	r31, r30
    25f2:	27 d0       	rcall	.+78     	; 0x2642 <__divsf3_pse+0x8e>
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	88 1f       	adc	r24, r24
    25fa:	bb 1f       	adc	r27, r27
    25fc:	26 17       	cp	r18, r22
    25fe:	37 07       	cpc	r19, r23
    2600:	48 07       	cpc	r20, r24
    2602:	ab 07       	cpc	r26, r27
    2604:	b0 e8       	ldi	r27, 0x80	; 128
    2606:	09 f0       	breq	.+2      	; 0x260a <__divsf3_pse+0x56>
    2608:	bb 0b       	sbc	r27, r27
    260a:	80 2d       	mov	r24, r0
    260c:	bf 01       	movw	r22, r30
    260e:	ff 27       	eor	r31, r31
    2610:	93 58       	subi	r25, 0x83	; 131
    2612:	5f 4f       	sbci	r21, 0xFF	; 255
    2614:	2a f0       	brmi	.+10     	; 0x2620 <__divsf3_pse+0x6c>
    2616:	9e 3f       	cpi	r25, 0xFE	; 254
    2618:	51 05       	cpc	r21, r1
    261a:	68 f0       	brcs	.+26     	; 0x2636 <__divsf3_pse+0x82>
    261c:	92 c0       	rjmp	.+292    	; 0x2742 <__fp_inf>
    261e:	dc c0       	rjmp	.+440    	; 0x27d8 <__fp_szero>
    2620:	5f 3f       	cpi	r21, 0xFF	; 255
    2622:	ec f3       	brlt	.-6      	; 0x261e <__divsf3_pse+0x6a>
    2624:	98 3e       	cpi	r25, 0xE8	; 232
    2626:	dc f3       	brlt	.-10     	; 0x261e <__divsf3_pse+0x6a>
    2628:	86 95       	lsr	r24
    262a:	77 95       	ror	r23
    262c:	67 95       	ror	r22
    262e:	b7 95       	ror	r27
    2630:	f7 95       	ror	r31
    2632:	9f 5f       	subi	r25, 0xFF	; 255
    2634:	c9 f7       	brne	.-14     	; 0x2628 <__divsf3_pse+0x74>
    2636:	88 0f       	add	r24, r24
    2638:	91 1d       	adc	r25, r1
    263a:	96 95       	lsr	r25
    263c:	87 95       	ror	r24
    263e:	97 f9       	bld	r25, 7
    2640:	08 95       	ret
    2642:	e1 e0       	ldi	r30, 0x01	; 1
    2644:	66 0f       	add	r22, r22
    2646:	77 1f       	adc	r23, r23
    2648:	88 1f       	adc	r24, r24
    264a:	bb 1f       	adc	r27, r27
    264c:	62 17       	cp	r22, r18
    264e:	73 07       	cpc	r23, r19
    2650:	84 07       	cpc	r24, r20
    2652:	ba 07       	cpc	r27, r26
    2654:	20 f0       	brcs	.+8      	; 0x265e <__divsf3_pse+0xaa>
    2656:	62 1b       	sub	r22, r18
    2658:	73 0b       	sbc	r23, r19
    265a:	84 0b       	sbc	r24, r20
    265c:	ba 0b       	sbc	r27, r26
    265e:	ee 1f       	adc	r30, r30
    2660:	88 f7       	brcc	.-30     	; 0x2644 <__divsf3_pse+0x90>
    2662:	e0 95       	com	r30
    2664:	08 95       	ret

00002666 <__fixsfsi>:
    2666:	04 d0       	rcall	.+8      	; 0x2670 <__fixunssfsi>
    2668:	68 94       	set
    266a:	b1 11       	cpse	r27, r1
    266c:	b5 c0       	rjmp	.+362    	; 0x27d8 <__fp_szero>
    266e:	08 95       	ret

00002670 <__fixunssfsi>:
    2670:	98 d0       	rcall	.+304    	; 0x27a2 <__fp_splitA>
    2672:	88 f0       	brcs	.+34     	; 0x2696 <__fixunssfsi+0x26>
    2674:	9f 57       	subi	r25, 0x7F	; 127
    2676:	90 f0       	brcs	.+36     	; 0x269c <__fixunssfsi+0x2c>
    2678:	b9 2f       	mov	r27, r25
    267a:	99 27       	eor	r25, r25
    267c:	b7 51       	subi	r27, 0x17	; 23
    267e:	a0 f0       	brcs	.+40     	; 0x26a8 <__fixunssfsi+0x38>
    2680:	d1 f0       	breq	.+52     	; 0x26b6 <__fixunssfsi+0x46>
    2682:	66 0f       	add	r22, r22
    2684:	77 1f       	adc	r23, r23
    2686:	88 1f       	adc	r24, r24
    2688:	99 1f       	adc	r25, r25
    268a:	1a f0       	brmi	.+6      	; 0x2692 <__fixunssfsi+0x22>
    268c:	ba 95       	dec	r27
    268e:	c9 f7       	brne	.-14     	; 0x2682 <__fixunssfsi+0x12>
    2690:	12 c0       	rjmp	.+36     	; 0x26b6 <__fixunssfsi+0x46>
    2692:	b1 30       	cpi	r27, 0x01	; 1
    2694:	81 f0       	breq	.+32     	; 0x26b6 <__fixunssfsi+0x46>
    2696:	9f d0       	rcall	.+318    	; 0x27d6 <__fp_zero>
    2698:	b1 e0       	ldi	r27, 0x01	; 1
    269a:	08 95       	ret
    269c:	9c c0       	rjmp	.+312    	; 0x27d6 <__fp_zero>
    269e:	67 2f       	mov	r22, r23
    26a0:	78 2f       	mov	r23, r24
    26a2:	88 27       	eor	r24, r24
    26a4:	b8 5f       	subi	r27, 0xF8	; 248
    26a6:	39 f0       	breq	.+14     	; 0x26b6 <__fixunssfsi+0x46>
    26a8:	b9 3f       	cpi	r27, 0xF9	; 249
    26aa:	cc f3       	brlt	.-14     	; 0x269e <__fixunssfsi+0x2e>
    26ac:	86 95       	lsr	r24
    26ae:	77 95       	ror	r23
    26b0:	67 95       	ror	r22
    26b2:	b3 95       	inc	r27
    26b4:	d9 f7       	brne	.-10     	; 0x26ac <__fixunssfsi+0x3c>
    26b6:	3e f4       	brtc	.+14     	; 0x26c6 <__fixunssfsi+0x56>
    26b8:	90 95       	com	r25
    26ba:	80 95       	com	r24
    26bc:	70 95       	com	r23
    26be:	61 95       	neg	r22
    26c0:	7f 4f       	sbci	r23, 0xFF	; 255
    26c2:	8f 4f       	sbci	r24, 0xFF	; 255
    26c4:	9f 4f       	sbci	r25, 0xFF	; 255
    26c6:	08 95       	ret

000026c8 <__floatunsisf>:
    26c8:	e8 94       	clt
    26ca:	09 c0       	rjmp	.+18     	; 0x26de <__floatsisf+0x12>

000026cc <__floatsisf>:
    26cc:	97 fb       	bst	r25, 7
    26ce:	3e f4       	brtc	.+14     	; 0x26de <__floatsisf+0x12>
    26d0:	90 95       	com	r25
    26d2:	80 95       	com	r24
    26d4:	70 95       	com	r23
    26d6:	61 95       	neg	r22
    26d8:	7f 4f       	sbci	r23, 0xFF	; 255
    26da:	8f 4f       	sbci	r24, 0xFF	; 255
    26dc:	9f 4f       	sbci	r25, 0xFF	; 255
    26de:	99 23       	and	r25, r25
    26e0:	a9 f0       	breq	.+42     	; 0x270c <__floatsisf+0x40>
    26e2:	f9 2f       	mov	r31, r25
    26e4:	96 e9       	ldi	r25, 0x96	; 150
    26e6:	bb 27       	eor	r27, r27
    26e8:	93 95       	inc	r25
    26ea:	f6 95       	lsr	r31
    26ec:	87 95       	ror	r24
    26ee:	77 95       	ror	r23
    26f0:	67 95       	ror	r22
    26f2:	b7 95       	ror	r27
    26f4:	f1 11       	cpse	r31, r1
    26f6:	f8 cf       	rjmp	.-16     	; 0x26e8 <__floatsisf+0x1c>
    26f8:	fa f4       	brpl	.+62     	; 0x2738 <__floatsisf+0x6c>
    26fa:	bb 0f       	add	r27, r27
    26fc:	11 f4       	brne	.+4      	; 0x2702 <__floatsisf+0x36>
    26fe:	60 ff       	sbrs	r22, 0
    2700:	1b c0       	rjmp	.+54     	; 0x2738 <__floatsisf+0x6c>
    2702:	6f 5f       	subi	r22, 0xFF	; 255
    2704:	7f 4f       	sbci	r23, 0xFF	; 255
    2706:	8f 4f       	sbci	r24, 0xFF	; 255
    2708:	9f 4f       	sbci	r25, 0xFF	; 255
    270a:	16 c0       	rjmp	.+44     	; 0x2738 <__floatsisf+0x6c>
    270c:	88 23       	and	r24, r24
    270e:	11 f0       	breq	.+4      	; 0x2714 <__floatsisf+0x48>
    2710:	96 e9       	ldi	r25, 0x96	; 150
    2712:	11 c0       	rjmp	.+34     	; 0x2736 <__floatsisf+0x6a>
    2714:	77 23       	and	r23, r23
    2716:	21 f0       	breq	.+8      	; 0x2720 <__floatsisf+0x54>
    2718:	9e e8       	ldi	r25, 0x8E	; 142
    271a:	87 2f       	mov	r24, r23
    271c:	76 2f       	mov	r23, r22
    271e:	05 c0       	rjmp	.+10     	; 0x272a <__floatsisf+0x5e>
    2720:	66 23       	and	r22, r22
    2722:	71 f0       	breq	.+28     	; 0x2740 <__floatsisf+0x74>
    2724:	96 e8       	ldi	r25, 0x86	; 134
    2726:	86 2f       	mov	r24, r22
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	60 e0       	ldi	r22, 0x00	; 0
    272c:	2a f0       	brmi	.+10     	; 0x2738 <__floatsisf+0x6c>
    272e:	9a 95       	dec	r25
    2730:	66 0f       	add	r22, r22
    2732:	77 1f       	adc	r23, r23
    2734:	88 1f       	adc	r24, r24
    2736:	da f7       	brpl	.-10     	; 0x272e <__floatsisf+0x62>
    2738:	88 0f       	add	r24, r24
    273a:	96 95       	lsr	r25
    273c:	87 95       	ror	r24
    273e:	97 f9       	bld	r25, 7
    2740:	08 95       	ret

00002742 <__fp_inf>:
    2742:	97 f9       	bld	r25, 7
    2744:	9f 67       	ori	r25, 0x7F	; 127
    2746:	80 e8       	ldi	r24, 0x80	; 128
    2748:	70 e0       	ldi	r23, 0x00	; 0
    274a:	60 e0       	ldi	r22, 0x00	; 0
    274c:	08 95       	ret

0000274e <__fp_nan>:
    274e:	9f ef       	ldi	r25, 0xFF	; 255
    2750:	80 ec       	ldi	r24, 0xC0	; 192
    2752:	08 95       	ret

00002754 <__fp_pscA>:
    2754:	00 24       	eor	r0, r0
    2756:	0a 94       	dec	r0
    2758:	16 16       	cp	r1, r22
    275a:	17 06       	cpc	r1, r23
    275c:	18 06       	cpc	r1, r24
    275e:	09 06       	cpc	r0, r25
    2760:	08 95       	ret

00002762 <__fp_pscB>:
    2762:	00 24       	eor	r0, r0
    2764:	0a 94       	dec	r0
    2766:	12 16       	cp	r1, r18
    2768:	13 06       	cpc	r1, r19
    276a:	14 06       	cpc	r1, r20
    276c:	05 06       	cpc	r0, r21
    276e:	08 95       	ret

00002770 <__fp_round>:
    2770:	09 2e       	mov	r0, r25
    2772:	03 94       	inc	r0
    2774:	00 0c       	add	r0, r0
    2776:	11 f4       	brne	.+4      	; 0x277c <__fp_round+0xc>
    2778:	88 23       	and	r24, r24
    277a:	52 f0       	brmi	.+20     	; 0x2790 <__fp_round+0x20>
    277c:	bb 0f       	add	r27, r27
    277e:	40 f4       	brcc	.+16     	; 0x2790 <__fp_round+0x20>
    2780:	bf 2b       	or	r27, r31
    2782:	11 f4       	brne	.+4      	; 0x2788 <__fp_round+0x18>
    2784:	60 ff       	sbrs	r22, 0
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <__fp_round+0x20>
    2788:	6f 5f       	subi	r22, 0xFF	; 255
    278a:	7f 4f       	sbci	r23, 0xFF	; 255
    278c:	8f 4f       	sbci	r24, 0xFF	; 255
    278e:	9f 4f       	sbci	r25, 0xFF	; 255
    2790:	08 95       	ret

00002792 <__fp_split3>:
    2792:	57 fd       	sbrc	r21, 7
    2794:	90 58       	subi	r25, 0x80	; 128
    2796:	44 0f       	add	r20, r20
    2798:	55 1f       	adc	r21, r21
    279a:	59 f0       	breq	.+22     	; 0x27b2 <__fp_splitA+0x10>
    279c:	5f 3f       	cpi	r21, 0xFF	; 255
    279e:	71 f0       	breq	.+28     	; 0x27bc <__fp_splitA+0x1a>
    27a0:	47 95       	ror	r20

000027a2 <__fp_splitA>:
    27a2:	88 0f       	add	r24, r24
    27a4:	97 fb       	bst	r25, 7
    27a6:	99 1f       	adc	r25, r25
    27a8:	61 f0       	breq	.+24     	; 0x27c2 <__fp_splitA+0x20>
    27aa:	9f 3f       	cpi	r25, 0xFF	; 255
    27ac:	79 f0       	breq	.+30     	; 0x27cc <__fp_splitA+0x2a>
    27ae:	87 95       	ror	r24
    27b0:	08 95       	ret
    27b2:	12 16       	cp	r1, r18
    27b4:	13 06       	cpc	r1, r19
    27b6:	14 06       	cpc	r1, r20
    27b8:	55 1f       	adc	r21, r21
    27ba:	f2 cf       	rjmp	.-28     	; 0x27a0 <__fp_split3+0xe>
    27bc:	46 95       	lsr	r20
    27be:	f1 df       	rcall	.-30     	; 0x27a2 <__fp_splitA>
    27c0:	08 c0       	rjmp	.+16     	; 0x27d2 <__fp_splitA+0x30>
    27c2:	16 16       	cp	r1, r22
    27c4:	17 06       	cpc	r1, r23
    27c6:	18 06       	cpc	r1, r24
    27c8:	99 1f       	adc	r25, r25
    27ca:	f1 cf       	rjmp	.-30     	; 0x27ae <__fp_splitA+0xc>
    27cc:	86 95       	lsr	r24
    27ce:	71 05       	cpc	r23, r1
    27d0:	61 05       	cpc	r22, r1
    27d2:	08 94       	sec
    27d4:	08 95       	ret

000027d6 <__fp_zero>:
    27d6:	e8 94       	clt

000027d8 <__fp_szero>:
    27d8:	bb 27       	eor	r27, r27
    27da:	66 27       	eor	r22, r22
    27dc:	77 27       	eor	r23, r23
    27de:	cb 01       	movw	r24, r22
    27e0:	97 f9       	bld	r25, 7
    27e2:	08 95       	ret

000027e4 <__mulsf3>:
    27e4:	0b d0       	rcall	.+22     	; 0x27fc <__mulsf3x>
    27e6:	c4 cf       	rjmp	.-120    	; 0x2770 <__fp_round>
    27e8:	b5 df       	rcall	.-150    	; 0x2754 <__fp_pscA>
    27ea:	28 f0       	brcs	.+10     	; 0x27f6 <__mulsf3+0x12>
    27ec:	ba df       	rcall	.-140    	; 0x2762 <__fp_pscB>
    27ee:	18 f0       	brcs	.+6      	; 0x27f6 <__mulsf3+0x12>
    27f0:	95 23       	and	r25, r21
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <__mulsf3+0x12>
    27f4:	a6 cf       	rjmp	.-180    	; 0x2742 <__fp_inf>
    27f6:	ab cf       	rjmp	.-170    	; 0x274e <__fp_nan>
    27f8:	11 24       	eor	r1, r1
    27fa:	ee cf       	rjmp	.-36     	; 0x27d8 <__fp_szero>

000027fc <__mulsf3x>:
    27fc:	ca df       	rcall	.-108    	; 0x2792 <__fp_split3>
    27fe:	a0 f3       	brcs	.-24     	; 0x27e8 <__mulsf3+0x4>

00002800 <__mulsf3_pse>:
    2800:	95 9f       	mul	r25, r21
    2802:	d1 f3       	breq	.-12     	; 0x27f8 <__mulsf3+0x14>
    2804:	95 0f       	add	r25, r21
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	55 1f       	adc	r21, r21
    280a:	62 9f       	mul	r22, r18
    280c:	f0 01       	movw	r30, r0
    280e:	72 9f       	mul	r23, r18
    2810:	bb 27       	eor	r27, r27
    2812:	f0 0d       	add	r31, r0
    2814:	b1 1d       	adc	r27, r1
    2816:	63 9f       	mul	r22, r19
    2818:	aa 27       	eor	r26, r26
    281a:	f0 0d       	add	r31, r0
    281c:	b1 1d       	adc	r27, r1
    281e:	aa 1f       	adc	r26, r26
    2820:	64 9f       	mul	r22, r20
    2822:	66 27       	eor	r22, r22
    2824:	b0 0d       	add	r27, r0
    2826:	a1 1d       	adc	r26, r1
    2828:	66 1f       	adc	r22, r22
    282a:	82 9f       	mul	r24, r18
    282c:	22 27       	eor	r18, r18
    282e:	b0 0d       	add	r27, r0
    2830:	a1 1d       	adc	r26, r1
    2832:	62 1f       	adc	r22, r18
    2834:	73 9f       	mul	r23, r19
    2836:	b0 0d       	add	r27, r0
    2838:	a1 1d       	adc	r26, r1
    283a:	62 1f       	adc	r22, r18
    283c:	83 9f       	mul	r24, r19
    283e:	a0 0d       	add	r26, r0
    2840:	61 1d       	adc	r22, r1
    2842:	22 1f       	adc	r18, r18
    2844:	74 9f       	mul	r23, r20
    2846:	33 27       	eor	r19, r19
    2848:	a0 0d       	add	r26, r0
    284a:	61 1d       	adc	r22, r1
    284c:	23 1f       	adc	r18, r19
    284e:	84 9f       	mul	r24, r20
    2850:	60 0d       	add	r22, r0
    2852:	21 1d       	adc	r18, r1
    2854:	82 2f       	mov	r24, r18
    2856:	76 2f       	mov	r23, r22
    2858:	6a 2f       	mov	r22, r26
    285a:	11 24       	eor	r1, r1
    285c:	9f 57       	subi	r25, 0x7F	; 127
    285e:	50 40       	sbci	r21, 0x00	; 0
    2860:	8a f0       	brmi	.+34     	; 0x2884 <__mulsf3_pse+0x84>
    2862:	e1 f0       	breq	.+56     	; 0x289c <__mulsf3_pse+0x9c>
    2864:	88 23       	and	r24, r24
    2866:	4a f0       	brmi	.+18     	; 0x287a <__mulsf3_pse+0x7a>
    2868:	ee 0f       	add	r30, r30
    286a:	ff 1f       	adc	r31, r31
    286c:	bb 1f       	adc	r27, r27
    286e:	66 1f       	adc	r22, r22
    2870:	77 1f       	adc	r23, r23
    2872:	88 1f       	adc	r24, r24
    2874:	91 50       	subi	r25, 0x01	; 1
    2876:	50 40       	sbci	r21, 0x00	; 0
    2878:	a9 f7       	brne	.-22     	; 0x2864 <__mulsf3_pse+0x64>
    287a:	9e 3f       	cpi	r25, 0xFE	; 254
    287c:	51 05       	cpc	r21, r1
    287e:	70 f0       	brcs	.+28     	; 0x289c <__mulsf3_pse+0x9c>
    2880:	60 cf       	rjmp	.-320    	; 0x2742 <__fp_inf>
    2882:	aa cf       	rjmp	.-172    	; 0x27d8 <__fp_szero>
    2884:	5f 3f       	cpi	r21, 0xFF	; 255
    2886:	ec f3       	brlt	.-6      	; 0x2882 <__mulsf3_pse+0x82>
    2888:	98 3e       	cpi	r25, 0xE8	; 232
    288a:	dc f3       	brlt	.-10     	; 0x2882 <__mulsf3_pse+0x82>
    288c:	86 95       	lsr	r24
    288e:	77 95       	ror	r23
    2890:	67 95       	ror	r22
    2892:	b7 95       	ror	r27
    2894:	f7 95       	ror	r31
    2896:	e7 95       	ror	r30
    2898:	9f 5f       	subi	r25, 0xFF	; 255
    289a:	c1 f7       	brne	.-16     	; 0x288c <__mulsf3_pse+0x8c>
    289c:	fe 2b       	or	r31, r30
    289e:	88 0f       	add	r24, r24
    28a0:	91 1d       	adc	r25, r1
    28a2:	96 95       	lsr	r25
    28a4:	87 95       	ror	r24
    28a6:	97 f9       	bld	r25, 7
    28a8:	08 95       	ret

000028aa <__divmodhi4>:
    28aa:	97 fb       	bst	r25, 7
    28ac:	07 2e       	mov	r0, r23
    28ae:	16 f4       	brtc	.+4      	; 0x28b4 <__divmodhi4+0xa>
    28b0:	00 94       	com	r0
    28b2:	06 d0       	rcall	.+12     	; 0x28c0 <__divmodhi4_neg1>
    28b4:	77 fd       	sbrc	r23, 7
    28b6:	08 d0       	rcall	.+16     	; 0x28c8 <__divmodhi4_neg2>
    28b8:	2d d0       	rcall	.+90     	; 0x2914 <__udivmodhi4>
    28ba:	07 fc       	sbrc	r0, 7
    28bc:	05 d0       	rcall	.+10     	; 0x28c8 <__divmodhi4_neg2>
    28be:	3e f4       	brtc	.+14     	; 0x28ce <__divmodhi4_exit>

000028c0 <__divmodhi4_neg1>:
    28c0:	90 95       	com	r25
    28c2:	81 95       	neg	r24
    28c4:	9f 4f       	sbci	r25, 0xFF	; 255
    28c6:	08 95       	ret

000028c8 <__divmodhi4_neg2>:
    28c8:	70 95       	com	r23
    28ca:	61 95       	neg	r22
    28cc:	7f 4f       	sbci	r23, 0xFF	; 255

000028ce <__divmodhi4_exit>:
    28ce:	08 95       	ret

000028d0 <__udivmodsi4>:
    28d0:	a1 e2       	ldi	r26, 0x21	; 33
    28d2:	1a 2e       	mov	r1, r26
    28d4:	aa 1b       	sub	r26, r26
    28d6:	bb 1b       	sub	r27, r27
    28d8:	fd 01       	movw	r30, r26
    28da:	0d c0       	rjmp	.+26     	; 0x28f6 <__udivmodsi4_ep>

000028dc <__udivmodsi4_loop>:
    28dc:	aa 1f       	adc	r26, r26
    28de:	bb 1f       	adc	r27, r27
    28e0:	ee 1f       	adc	r30, r30
    28e2:	ff 1f       	adc	r31, r31
    28e4:	a2 17       	cp	r26, r18
    28e6:	b3 07       	cpc	r27, r19
    28e8:	e4 07       	cpc	r30, r20
    28ea:	f5 07       	cpc	r31, r21
    28ec:	20 f0       	brcs	.+8      	; 0x28f6 <__udivmodsi4_ep>
    28ee:	a2 1b       	sub	r26, r18
    28f0:	b3 0b       	sbc	r27, r19
    28f2:	e4 0b       	sbc	r30, r20
    28f4:	f5 0b       	sbc	r31, r21

000028f6 <__udivmodsi4_ep>:
    28f6:	66 1f       	adc	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	88 1f       	adc	r24, r24
    28fc:	99 1f       	adc	r25, r25
    28fe:	1a 94       	dec	r1
    2900:	69 f7       	brne	.-38     	; 0x28dc <__udivmodsi4_loop>
    2902:	60 95       	com	r22
    2904:	70 95       	com	r23
    2906:	80 95       	com	r24
    2908:	90 95       	com	r25
    290a:	9b 01       	movw	r18, r22
    290c:	ac 01       	movw	r20, r24
    290e:	bd 01       	movw	r22, r26
    2910:	cf 01       	movw	r24, r30
    2912:	08 95       	ret

00002914 <__udivmodhi4>:
    2914:	aa 1b       	sub	r26, r26
    2916:	bb 1b       	sub	r27, r27
    2918:	51 e1       	ldi	r21, 0x11	; 17
    291a:	07 c0       	rjmp	.+14     	; 0x292a <__udivmodhi4_ep>

0000291c <__udivmodhi4_loop>:
    291c:	aa 1f       	adc	r26, r26
    291e:	bb 1f       	adc	r27, r27
    2920:	a6 17       	cp	r26, r22
    2922:	b7 07       	cpc	r27, r23
    2924:	10 f0       	brcs	.+4      	; 0x292a <__udivmodhi4_ep>
    2926:	a6 1b       	sub	r26, r22
    2928:	b7 0b       	sbc	r27, r23

0000292a <__udivmodhi4_ep>:
    292a:	88 1f       	adc	r24, r24
    292c:	99 1f       	adc	r25, r25
    292e:	5a 95       	dec	r21
    2930:	a9 f7       	brne	.-22     	; 0x291c <__udivmodhi4_loop>
    2932:	80 95       	com	r24
    2934:	90 95       	com	r25
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	08 95       	ret

0000293c <dtostrf>:
    293c:	ef 92       	push	r14
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	e8 01       	movw	r28, r16
    2948:	47 ff       	sbrs	r20, 7
    294a:	02 c0       	rjmp	.+4      	; 0x2950 <dtostrf+0x14>
    294c:	34 e1       	ldi	r19, 0x14	; 20
    294e:	01 c0       	rjmp	.+2      	; 0x2952 <dtostrf+0x16>
    2950:	34 e0       	ldi	r19, 0x04	; 4
    2952:	e4 2f       	mov	r30, r20
    2954:	ff 27       	eor	r31, r31
    2956:	e7 fd       	sbrc	r30, 7
    2958:	f0 95       	com	r31
    295a:	f7 ff       	sbrs	r31, 7
    295c:	03 c0       	rjmp	.+6      	; 0x2964 <dtostrf+0x28>
    295e:	f1 95       	neg	r31
    2960:	e1 95       	neg	r30
    2962:	f1 09       	sbc	r31, r1
    2964:	e3 2e       	mov	r14, r19
    2966:	02 2f       	mov	r16, r18
    2968:	2e 2f       	mov	r18, r30
    296a:	ae 01       	movw	r20, r28
    296c:	d6 d4       	rcall	.+2476   	; 0x331a <dtoa_prf>
    296e:	ce 01       	movw	r24, r28
    2970:	df 91       	pop	r29
    2972:	cf 91       	pop	r28
    2974:	1f 91       	pop	r17
    2976:	0f 91       	pop	r16
    2978:	ef 90       	pop	r14
    297a:	08 95       	ret

0000297c <strtod>:
    297c:	a0 e0       	ldi	r26, 0x00	; 0
    297e:	b0 e0       	ldi	r27, 0x00	; 0
    2980:	e3 ec       	ldi	r30, 0xC3	; 195
    2982:	f4 e1       	ldi	r31, 0x14	; 20
    2984:	e7 c7       	rjmp	.+4046   	; 0x3954 <__prologue_saves__+0xc>
    2986:	8b 01       	movw	r16, r22
    2988:	61 15       	cp	r22, r1
    298a:	71 05       	cpc	r23, r1
    298c:	21 f0       	breq	.+8      	; 0x2996 <strtod+0x1a>
    298e:	db 01       	movw	r26, r22
    2990:	8c 93       	st	X, r24
    2992:	11 96       	adiw	r26, 0x01	; 1
    2994:	9c 93       	st	X, r25
    2996:	ec 01       	movw	r28, r24
    2998:	5e 01       	movw	r10, r28
    299a:	bf ef       	ldi	r27, 0xFF	; 255
    299c:	ab 1a       	sub	r10, r27
    299e:	bb 0a       	sbc	r11, r27
    29a0:	75 01       	movw	r14, r10
    29a2:	c8 80       	ld	r12, Y
    29a4:	8c 2d       	mov	r24, r12
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	52 d2       	rcall	.+1188   	; 0x2e4e <isspace>
    29aa:	89 2b       	or	r24, r25
    29ac:	11 f0       	breq	.+4      	; 0x29b2 <strtod+0x36>
    29ae:	e5 01       	movw	r28, r10
    29b0:	f3 cf       	rjmp	.-26     	; 0x2998 <strtod+0x1c>
    29b2:	ed e2       	ldi	r30, 0x2D	; 45
    29b4:	ce 12       	cpse	r12, r30
    29b6:	08 c0       	rjmp	.+16     	; 0x29c8 <strtod+0x4c>
    29b8:	7e 01       	movw	r14, r28
    29ba:	f2 e0       	ldi	r31, 0x02	; 2
    29bc:	ef 0e       	add	r14, r31
    29be:	f1 1c       	adc	r15, r1
    29c0:	c9 80       	ldd	r12, Y+1	; 0x01
    29c2:	dd 24       	eor	r13, r13
    29c4:	d3 94       	inc	r13
    29c6:	09 c0       	rjmp	.+18     	; 0x29da <strtod+0x5e>
    29c8:	2b e2       	ldi	r18, 0x2B	; 43
    29ca:	c2 12       	cpse	r12, r18
    29cc:	05 c0       	rjmp	.+10     	; 0x29d8 <strtod+0x5c>
    29ce:	7e 01       	movw	r14, r28
    29d0:	42 e0       	ldi	r20, 0x02	; 2
    29d2:	e4 0e       	add	r14, r20
    29d4:	f1 1c       	adc	r15, r1
    29d6:	c9 80       	ldd	r12, Y+1	; 0x01
    29d8:	d1 2c       	mov	r13, r1
    29da:	e7 01       	movw	r28, r14
    29dc:	21 97       	sbiw	r28, 0x01	; 1
    29de:	43 e0       	ldi	r20, 0x03	; 3
    29e0:	50 e0       	ldi	r21, 0x00	; 0
    29e2:	6c e9       	ldi	r22, 0x9C	; 156
    29e4:	73 e0       	ldi	r23, 0x03	; 3
    29e6:	ce 01       	movw	r24, r28
    29e8:	4c d2       	rcall	.+1176   	; 0x2e82 <strncasecmp_P>
    29ea:	89 2b       	or	r24, r25
    29ec:	b9 f4       	brne	.+46     	; 0x2a1c <strtod+0xa0>
    29ee:	23 96       	adiw	r28, 0x03	; 3
    29f0:	45 e0       	ldi	r20, 0x05	; 5
    29f2:	50 e0       	ldi	r21, 0x00	; 0
    29f4:	67 e9       	ldi	r22, 0x97	; 151
    29f6:	73 e0       	ldi	r23, 0x03	; 3
    29f8:	ce 01       	movw	r24, r28
    29fa:	43 d2       	rcall	.+1158   	; 0x2e82 <strncasecmp_P>
    29fc:	89 2b       	or	r24, r25
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <strtod+0x86>
    2a00:	25 96       	adiw	r28, 0x05	; 5
    2a02:	01 15       	cp	r16, r1
    2a04:	11 05       	cpc	r17, r1
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <strtod+0x92>
    2a08:	d8 01       	movw	r26, r16
    2a0a:	cd 93       	st	X+, r28
    2a0c:	dc 93       	st	X, r29
    2a0e:	d1 10       	cpse	r13, r1
    2a10:	00 c1       	rjmp	.+512    	; 0x2c12 <strtod+0x296>
    2a12:	60 e0       	ldi	r22, 0x00	; 0
    2a14:	70 e0       	ldi	r23, 0x00	; 0
    2a16:	80 e8       	ldi	r24, 0x80	; 128
    2a18:	9f e7       	ldi	r25, 0x7F	; 127
    2a1a:	04 c1       	rjmp	.+520    	; 0x2c24 <strtod+0x2a8>
    2a1c:	43 e0       	ldi	r20, 0x03	; 3
    2a1e:	50 e0       	ldi	r21, 0x00	; 0
    2a20:	64 e9       	ldi	r22, 0x94	; 148
    2a22:	73 e0       	ldi	r23, 0x03	; 3
    2a24:	ce 01       	movw	r24, r28
    2a26:	2d d2       	rcall	.+1114   	; 0x2e82 <strncasecmp_P>
    2a28:	89 2b       	or	r24, r25
    2a2a:	59 f4       	brne	.+22     	; 0x2a42 <strtod+0xc6>
    2a2c:	01 15       	cp	r16, r1
    2a2e:	11 05       	cpc	r17, r1
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <strtod+0xb8>
    2a32:	f4 c0       	rjmp	.+488    	; 0x2c1c <strtod+0x2a0>
    2a34:	b2 e0       	ldi	r27, 0x02	; 2
    2a36:	eb 0e       	add	r14, r27
    2a38:	f1 1c       	adc	r15, r1
    2a3a:	f8 01       	movw	r30, r16
    2a3c:	f1 82       	std	Z+1, r15	; 0x01
    2a3e:	e0 82       	st	Z, r14
    2a40:	ed c0       	rjmp	.+474    	; 0x2c1c <strtod+0x2a0>
    2a42:	f7 01       	movw	r30, r14
    2a44:	60 e0       	ldi	r22, 0x00	; 0
    2a46:	70 e0       	ldi	r23, 0x00	; 0
    2a48:	cb 01       	movw	r24, r22
    2a4a:	c0 e0       	ldi	r28, 0x00	; 0
    2a4c:	d0 e0       	ldi	r29, 0x00	; 0
    2a4e:	7f 01       	movw	r14, r30
    2a50:	a0 ed       	ldi	r26, 0xD0	; 208
    2a52:	aa 2e       	mov	r10, r26
    2a54:	ac 0c       	add	r10, r12
    2a56:	29 e0       	ldi	r18, 0x09	; 9
    2a58:	2a 15       	cp	r18, r10
    2a5a:	28 f1       	brcs	.+74     	; 0x2aa6 <strtod+0x12a>
    2a5c:	4d 2d       	mov	r20, r13
    2a5e:	42 60       	ori	r20, 0x02	; 2
    2a60:	b4 2e       	mov	r11, r20
    2a62:	2d 2d       	mov	r18, r13
    2a64:	28 70       	andi	r18, 0x08	; 8
    2a66:	d2 fe       	sbrs	r13, 2
    2a68:	04 c0       	rjmp	.+8      	; 0x2a72 <strtod+0xf6>
    2a6a:	21 11       	cpse	r18, r1
    2a6c:	24 c0       	rjmp	.+72     	; 0x2ab6 <strtod+0x13a>
    2a6e:	21 96       	adiw	r28, 0x01	; 1
    2a70:	22 c0       	rjmp	.+68     	; 0x2ab6 <strtod+0x13a>
    2a72:	21 11       	cpse	r18, r1
    2a74:	21 97       	sbiw	r28, 0x01	; 1
    2a76:	a5 e0       	ldi	r26, 0x05	; 5
    2a78:	b0 e0       	ldi	r27, 0x00	; 0
    2a7a:	9b 01       	movw	r18, r22
    2a7c:	ac 01       	movw	r20, r24
    2a7e:	5a d7       	rcall	.+3764   	; 0x3934 <__muluhisi3>
    2a80:	66 0f       	add	r22, r22
    2a82:	77 1f       	adc	r23, r23
    2a84:	88 1f       	adc	r24, r24
    2a86:	99 1f       	adc	r25, r25
    2a88:	6a 0d       	add	r22, r10
    2a8a:	71 1d       	adc	r23, r1
    2a8c:	81 1d       	adc	r24, r1
    2a8e:	91 1d       	adc	r25, r1
    2a90:	68 39       	cpi	r22, 0x98	; 152
    2a92:	a9 e9       	ldi	r26, 0x99	; 153
    2a94:	7a 07       	cpc	r23, r26
    2a96:	8a 07       	cpc	r24, r26
    2a98:	a9 e1       	ldi	r26, 0x19	; 25
    2a9a:	9a 07       	cpc	r25, r26
    2a9c:	60 f0       	brcs	.+24     	; 0x2ab6 <strtod+0x13a>
    2a9e:	bd 2d       	mov	r27, r13
    2aa0:	b6 60       	ori	r27, 0x06	; 6
    2aa2:	bb 2e       	mov	r11, r27
    2aa4:	08 c0       	rjmp	.+16     	; 0x2ab6 <strtod+0x13a>
    2aa6:	2e ef       	ldi	r18, 0xFE	; 254
    2aa8:	a2 12       	cpse	r10, r18
    2aaa:	0a c0       	rjmp	.+20     	; 0x2ac0 <strtod+0x144>
    2aac:	d3 fc       	sbrc	r13, 3
    2aae:	50 c0       	rjmp	.+160    	; 0x2b50 <strtod+0x1d4>
    2ab0:	4d 2d       	mov	r20, r13
    2ab2:	48 60       	ori	r20, 0x08	; 8
    2ab4:	b4 2e       	mov	r11, r20
    2ab6:	31 96       	adiw	r30, 0x01	; 1
    2ab8:	d7 01       	movw	r26, r14
    2aba:	cc 90       	ld	r12, X
    2abc:	db 2c       	mov	r13, r11
    2abe:	c7 cf       	rjmp	.-114    	; 0x2a4e <strtod+0xd2>
    2ac0:	2c 2d       	mov	r18, r12
    2ac2:	2f 7d       	andi	r18, 0xDF	; 223
    2ac4:	25 34       	cpi	r18, 0x45	; 69
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <strtod+0x14e>
    2ac8:	43 c0       	rjmp	.+134    	; 0x2b50 <strtod+0x1d4>
    2aca:	a0 81       	ld	r26, Z
    2acc:	ad 32       	cpi	r26, 0x2D	; 45
    2ace:	41 f4       	brne	.+16     	; 0x2ae0 <strtod+0x164>
    2ad0:	bd 2d       	mov	r27, r13
    2ad2:	b0 61       	ori	r27, 0x10	; 16
    2ad4:	db 2e       	mov	r13, r27
    2ad6:	7f 01       	movw	r14, r30
    2ad8:	22 e0       	ldi	r18, 0x02	; 2
    2ada:	e2 0e       	add	r14, r18
    2adc:	f1 1c       	adc	r15, r1
    2ade:	0c c0       	rjmp	.+24     	; 0x2af8 <strtod+0x17c>
    2ae0:	7f 01       	movw	r14, r30
    2ae2:	ab 32       	cpi	r26, 0x2B	; 43
    2ae4:	31 f0       	breq	.+12     	; 0x2af2 <strtod+0x176>
    2ae6:	4f ef       	ldi	r20, 0xFF	; 255
    2ae8:	e4 1a       	sub	r14, r20
    2aea:	f4 0a       	sbc	r15, r20
    2aec:	21 e0       	ldi	r18, 0x01	; 1
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	06 c0       	rjmp	.+12     	; 0x2afe <strtod+0x182>
    2af2:	a2 e0       	ldi	r26, 0x02	; 2
    2af4:	ea 0e       	add	r14, r26
    2af6:	f1 1c       	adc	r15, r1
    2af8:	a1 81       	ldd	r26, Z+1	; 0x01
    2afa:	22 e0       	ldi	r18, 0x02	; 2
    2afc:	30 e0       	ldi	r19, 0x00	; 0
    2afe:	a0 53       	subi	r26, 0x30	; 48
    2b00:	aa 30       	cpi	r26, 0x0A	; 10
    2b02:	18 f0       	brcs	.+6      	; 0x2b0a <strtod+0x18e>
    2b04:	e2 1a       	sub	r14, r18
    2b06:	f3 0a       	sbc	r15, r19
    2b08:	23 c0       	rjmp	.+70     	; 0x2b50 <strtod+0x1d4>
    2b0a:	f7 01       	movw	r30, r14
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	20 38       	cpi	r18, 0x80	; 128
    2b12:	bc e0       	ldi	r27, 0x0C	; 12
    2b14:	3b 07       	cpc	r19, r27
    2b16:	5c f4       	brge	.+22     	; 0x2b2e <strtod+0x1b2>
    2b18:	a9 01       	movw	r20, r18
    2b1a:	44 0f       	add	r20, r20
    2b1c:	55 1f       	adc	r21, r21
    2b1e:	44 0f       	add	r20, r20
    2b20:	55 1f       	adc	r21, r21
    2b22:	24 0f       	add	r18, r20
    2b24:	35 1f       	adc	r19, r21
    2b26:	22 0f       	add	r18, r18
    2b28:	33 1f       	adc	r19, r19
    2b2a:	2a 0f       	add	r18, r26
    2b2c:	31 1d       	adc	r19, r1
    2b2e:	af 01       	movw	r20, r30
    2b30:	4f 5f       	subi	r20, 0xFF	; 255
    2b32:	5f 4f       	sbci	r21, 0xFF	; 255
    2b34:	7a 01       	movw	r14, r20
    2b36:	a0 81       	ld	r26, Z
    2b38:	a0 53       	subi	r26, 0x30	; 48
    2b3a:	aa 30       	cpi	r26, 0x0A	; 10
    2b3c:	10 f4       	brcc	.+4      	; 0x2b42 <strtod+0x1c6>
    2b3e:	fa 01       	movw	r30, r20
    2b40:	e7 cf       	rjmp	.-50     	; 0x2b10 <strtod+0x194>
    2b42:	d4 fe       	sbrs	r13, 4
    2b44:	03 c0       	rjmp	.+6      	; 0x2b4c <strtod+0x1d0>
    2b46:	31 95       	neg	r19
    2b48:	21 95       	neg	r18
    2b4a:	31 09       	sbc	r19, r1
    2b4c:	c2 0f       	add	r28, r18
    2b4e:	d3 1f       	adc	r29, r19
    2b50:	d1 fe       	sbrs	r13, 1
    2b52:	09 c0       	rjmp	.+18     	; 0x2b66 <strtod+0x1ea>
    2b54:	01 15       	cp	r16, r1
    2b56:	11 05       	cpc	r17, r1
    2b58:	31 f0       	breq	.+12     	; 0x2b66 <strtod+0x1ea>
    2b5a:	e1 e0       	ldi	r30, 0x01	; 1
    2b5c:	ee 1a       	sub	r14, r30
    2b5e:	f1 08       	sbc	r15, r1
    2b60:	d8 01       	movw	r26, r16
    2b62:	ed 92       	st	X+, r14
    2b64:	fc 92       	st	X, r15
    2b66:	b0 dd       	rcall	.-1184   	; 0x26c8 <__floatunsisf>
    2b68:	2d 2d       	mov	r18, r13
    2b6a:	23 70       	andi	r18, 0x03	; 3
    2b6c:	23 30       	cpi	r18, 0x03	; 3
    2b6e:	19 f0       	breq	.+6      	; 0x2b76 <strtod+0x1fa>
    2b70:	4b 01       	movw	r8, r22
    2b72:	5c 01       	movw	r10, r24
    2b74:	06 c0       	rjmp	.+12     	; 0x2b82 <strtod+0x206>
    2b76:	4b 01       	movw	r8, r22
    2b78:	5c 01       	movw	r10, r24
    2b7a:	b7 fa       	bst	r11, 7
    2b7c:	b0 94       	com	r11
    2b7e:	b7 f8       	bld	r11, 7
    2b80:	b0 94       	com	r11
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	a9 01       	movw	r20, r18
    2b88:	c5 01       	movw	r24, r10
    2b8a:	b4 01       	movw	r22, r8
    2b8c:	aa d1       	rcall	.+852    	; 0x2ee2 <__cmpsf2>
    2b8e:	88 23       	and	r24, r24
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <strtod+0x218>
    2b92:	3c c0       	rjmp	.+120    	; 0x2c0c <strtod+0x290>
    2b94:	d7 ff       	sbrs	r29, 7
    2b96:	06 c0       	rjmp	.+12     	; 0x2ba4 <strtod+0x228>
    2b98:	d1 95       	neg	r29
    2b9a:	c1 95       	neg	r28
    2b9c:	d1 09       	sbc	r29, r1
    2b9e:	03 eb       	ldi	r16, 0xB3	; 179
    2ba0:	13 e0       	ldi	r17, 0x03	; 3
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <strtod+0x22c>
    2ba4:	0b ec       	ldi	r16, 0xCB	; 203
    2ba6:	13 e0       	ldi	r17, 0x03	; 3
    2ba8:	68 01       	movw	r12, r16
    2baa:	b8 e1       	ldi	r27, 0x18	; 24
    2bac:	cb 1a       	sub	r12, r27
    2bae:	d1 08       	sbc	r13, r1
    2bb0:	90 e2       	ldi	r25, 0x20	; 32
    2bb2:	e9 2e       	mov	r14, r25
    2bb4:	f1 2c       	mov	r15, r1
    2bb6:	ce 15       	cp	r28, r14
    2bb8:	df 05       	cpc	r29, r15
    2bba:	6c f0       	brlt	.+26     	; 0x2bd6 <strtod+0x25a>
    2bbc:	f8 01       	movw	r30, r16
    2bbe:	25 91       	lpm	r18, Z+
    2bc0:	35 91       	lpm	r19, Z+
    2bc2:	45 91       	lpm	r20, Z+
    2bc4:	54 91       	lpm	r21, Z
    2bc6:	c5 01       	movw	r24, r10
    2bc8:	b4 01       	movw	r22, r8
    2bca:	0c de       	rcall	.-1000   	; 0x27e4 <__mulsf3>
    2bcc:	4b 01       	movw	r8, r22
    2bce:	5c 01       	movw	r10, r24
    2bd0:	ce 19       	sub	r28, r14
    2bd2:	df 09       	sbc	r29, r15
    2bd4:	f0 cf       	rjmp	.-32     	; 0x2bb6 <strtod+0x23a>
    2bd6:	04 50       	subi	r16, 0x04	; 4
    2bd8:	11 09       	sbc	r17, r1
    2bda:	f5 94       	asr	r15
    2bdc:	e7 94       	ror	r14
    2bde:	0c 15       	cp	r16, r12
    2be0:	1d 05       	cpc	r17, r13
    2be2:	49 f7       	brne	.-46     	; 0x2bb6 <strtod+0x23a>
    2be4:	8a 2d       	mov	r24, r10
    2be6:	88 0f       	add	r24, r24
    2be8:	8b 2d       	mov	r24, r11
    2bea:	88 1f       	adc	r24, r24
    2bec:	8f 3f       	cpi	r24, 0xFF	; 255
    2bee:	41 f0       	breq	.+16     	; 0x2c00 <strtod+0x284>
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	a9 01       	movw	r20, r18
    2bf6:	c5 01       	movw	r24, r10
    2bf8:	b4 01       	movw	r22, r8
    2bfa:	73 d1       	rcall	.+742    	; 0x2ee2 <__cmpsf2>
    2bfc:	81 11       	cpse	r24, r1
    2bfe:	06 c0       	rjmp	.+12     	; 0x2c0c <strtod+0x290>
    2c00:	82 e2       	ldi	r24, 0x22	; 34
    2c02:	90 e0       	ldi	r25, 0x00	; 0
    2c04:	90 93 c0 03 	sts	0x03C0, r25
    2c08:	80 93 bf 03 	sts	0x03BF, r24
    2c0c:	c5 01       	movw	r24, r10
    2c0e:	b4 01       	movw	r22, r8
    2c10:	09 c0       	rjmp	.+18     	; 0x2c24 <strtod+0x2a8>
    2c12:	60 e0       	ldi	r22, 0x00	; 0
    2c14:	70 e0       	ldi	r23, 0x00	; 0
    2c16:	80 e8       	ldi	r24, 0x80	; 128
    2c18:	9f ef       	ldi	r25, 0xFF	; 255
    2c1a:	04 c0       	rjmp	.+8      	; 0x2c24 <strtod+0x2a8>
    2c1c:	60 e0       	ldi	r22, 0x00	; 0
    2c1e:	70 e0       	ldi	r23, 0x00	; 0
    2c20:	80 ec       	ldi	r24, 0xC0	; 192
    2c22:	9f e7       	ldi	r25, 0x7F	; 127
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	ec e0       	ldi	r30, 0x0C	; 12
    2c2a:	b0 c6       	rjmp	.+3424   	; 0x398c <__epilogue_restores__+0xc>

00002c2c <strtoul>:
    2c2c:	2f 92       	push	r2
    2c2e:	3f 92       	push	r3
    2c30:	5f 92       	push	r5
    2c32:	6f 92       	push	r6
    2c34:	7f 92       	push	r7
    2c36:	8f 92       	push	r8
    2c38:	9f 92       	push	r9
    2c3a:	af 92       	push	r10
    2c3c:	bf 92       	push	r11
    2c3e:	cf 92       	push	r12
    2c40:	df 92       	push	r13
    2c42:	ef 92       	push	r14
    2c44:	ff 92       	push	r15
    2c46:	0f 93       	push	r16
    2c48:	1f 93       	push	r17
    2c4a:	cf 93       	push	r28
    2c4c:	df 93       	push	r29
    2c4e:	8b 01       	movw	r16, r22
    2c50:	ea 01       	movw	r28, r20
    2c52:	61 15       	cp	r22, r1
    2c54:	71 05       	cpc	r23, r1
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <strtoul+0x34>
    2c58:	db 01       	movw	r26, r22
    2c5a:	8c 93       	st	X, r24
    2c5c:	11 96       	adiw	r26, 0x01	; 1
    2c5e:	9c 93       	st	X, r25
    2c60:	20 97       	sbiw	r28, 0x00	; 0
    2c62:	39 f0       	breq	.+14     	; 0x2c72 <strtoul+0x46>
    2c64:	9e 01       	movw	r18, r28
    2c66:	22 50       	subi	r18, 0x02	; 2
    2c68:	31 09       	sbc	r19, r1
    2c6a:	23 32       	cpi	r18, 0x23	; 35
    2c6c:	31 05       	cpc	r19, r1
    2c6e:	08 f0       	brcs	.+2      	; 0x2c72 <strtoul+0x46>
    2c70:	d5 c0       	rjmp	.+426    	; 0x2e1c <strtoul+0x1f0>
    2c72:	7c 01       	movw	r14, r24
    2c74:	67 01       	movw	r12, r14
    2c76:	bf ef       	ldi	r27, 0xFF	; 255
    2c78:	cb 1a       	sub	r12, r27
    2c7a:	db 0a       	sbc	r13, r27
    2c7c:	56 01       	movw	r10, r12
    2c7e:	f7 01       	movw	r30, r14
    2c80:	60 80       	ld	r6, Z
    2c82:	86 2d       	mov	r24, r6
    2c84:	90 e0       	ldi	r25, 0x00	; 0
    2c86:	e3 d0       	rcall	.+454    	; 0x2e4e <isspace>
    2c88:	89 2b       	or	r24, r25
    2c8a:	11 f0       	breq	.+4      	; 0x2c90 <strtoul+0x64>
    2c8c:	76 01       	movw	r14, r12
    2c8e:	f2 cf       	rjmp	.-28     	; 0x2c74 <strtoul+0x48>
    2c90:	fd e2       	ldi	r31, 0x2D	; 45
    2c92:	6f 12       	cpse	r6, r31
    2c94:	0a c0       	rjmp	.+20     	; 0x2caa <strtoul+0x7e>
    2c96:	57 01       	movw	r10, r14
    2c98:	82 e0       	ldi	r24, 0x02	; 2
    2c9a:	a8 0e       	add	r10, r24
    2c9c:	b1 1c       	adc	r11, r1
    2c9e:	d7 01       	movw	r26, r14
    2ca0:	11 96       	adiw	r26, 0x01	; 1
    2ca2:	6c 90       	ld	r6, X
    2ca4:	77 24       	eor	r7, r7
    2ca6:	73 94       	inc	r7
    2ca8:	0b c0       	rjmp	.+22     	; 0x2cc0 <strtoul+0x94>
    2caa:	bb e2       	ldi	r27, 0x2B	; 43
    2cac:	6b 12       	cpse	r6, r27
    2cae:	07 c0       	rjmp	.+14     	; 0x2cbe <strtoul+0x92>
    2cb0:	57 01       	movw	r10, r14
    2cb2:	e2 e0       	ldi	r30, 0x02	; 2
    2cb4:	ae 0e       	add	r10, r30
    2cb6:	b1 1c       	adc	r11, r1
    2cb8:	d7 01       	movw	r26, r14
    2cba:	11 96       	adiw	r26, 0x01	; 1
    2cbc:	6c 90       	ld	r6, X
    2cbe:	71 2c       	mov	r7, r1
    2cc0:	ce 01       	movw	r24, r28
    2cc2:	8f 7e       	andi	r24, 0xEF	; 239
    2cc4:	89 2b       	or	r24, r25
    2cc6:	89 f4       	brne	.+34     	; 0x2cea <strtoul+0xbe>
    2cc8:	b0 e3       	ldi	r27, 0x30	; 48
    2cca:	6b 12       	cpse	r6, r27
    2ccc:	36 c0       	rjmp	.+108    	; 0x2d3a <strtoul+0x10e>
    2cce:	f5 01       	movw	r30, r10
    2cd0:	80 81       	ld	r24, Z
    2cd2:	8f 7d       	andi	r24, 0xDF	; 223
    2cd4:	88 35       	cpi	r24, 0x58	; 88
    2cd6:	d1 f4       	brne	.+52     	; 0x2d0c <strtoul+0xe0>
    2cd8:	61 80       	ldd	r6, Z+1	; 0x01
    2cda:	f2 e0       	ldi	r31, 0x02	; 2
    2cdc:	af 0e       	add	r10, r31
    2cde:	b1 1c       	adc	r11, r1
    2ce0:	87 2d       	mov	r24, r7
    2ce2:	82 60       	ori	r24, 0x02	; 2
    2ce4:	78 2e       	mov	r7, r24
    2ce6:	c0 e1       	ldi	r28, 0x10	; 16
    2ce8:	d0 e0       	ldi	r29, 0x00	; 0
    2cea:	ca 30       	cpi	r28, 0x0A	; 10
    2cec:	d1 05       	cpc	r29, r1
    2cee:	49 f1       	breq	.+82     	; 0x2d42 <strtoul+0x116>
    2cf0:	c0 31       	cpi	r28, 0x10	; 16
    2cf2:	d1 05       	cpc	r29, r1
    2cf4:	21 f0       	breq	.+8      	; 0x2cfe <strtoul+0xd2>
    2cf6:	c8 30       	cpi	r28, 0x08	; 8
    2cf8:	d1 05       	cpc	r29, r1
    2cfa:	99 f4       	brne	.+38     	; 0x2d22 <strtoul+0xf6>
    2cfc:	09 c0       	rjmp	.+18     	; 0x2d10 <strtoul+0xe4>
    2cfe:	cc 24       	eor	r12, r12
    2d00:	ca 94       	dec	r12
    2d02:	dc 2c       	mov	r13, r12
    2d04:	ec 2c       	mov	r14, r12
    2d06:	af e0       	ldi	r26, 0x0F	; 15
    2d08:	fa 2e       	mov	r15, r26
    2d0a:	21 c0       	rjmp	.+66     	; 0x2d4e <strtoul+0x122>
    2d0c:	20 97       	sbiw	r28, 0x00	; 0
    2d0e:	69 f7       	brne	.-38     	; 0x2cea <strtoul+0xbe>
    2d10:	c8 e0       	ldi	r28, 0x08	; 8
    2d12:	d0 e0       	ldi	r29, 0x00	; 0
    2d14:	cc 24       	eor	r12, r12
    2d16:	ca 94       	dec	r12
    2d18:	dc 2c       	mov	r13, r12
    2d1a:	ec 2c       	mov	r14, r12
    2d1c:	ff e1       	ldi	r31, 0x1F	; 31
    2d1e:	ff 2e       	mov	r15, r31
    2d20:	16 c0       	rjmp	.+44     	; 0x2d4e <strtoul+0x122>
    2d22:	6f ef       	ldi	r22, 0xFF	; 255
    2d24:	7f ef       	ldi	r23, 0xFF	; 255
    2d26:	cb 01       	movw	r24, r22
    2d28:	9e 01       	movw	r18, r28
    2d2a:	44 27       	eor	r20, r20
    2d2c:	37 fd       	sbrc	r19, 7
    2d2e:	40 95       	com	r20
    2d30:	54 2f       	mov	r21, r20
    2d32:	ce dd       	rcall	.-1124   	; 0x28d0 <__udivmodsi4>
    2d34:	69 01       	movw	r12, r18
    2d36:	7a 01       	movw	r14, r20
    2d38:	0a c0       	rjmp	.+20     	; 0x2d4e <strtoul+0x122>
    2d3a:	20 97       	sbiw	r28, 0x00	; 0
    2d3c:	b1 f6       	brne	.-84     	; 0x2cea <strtoul+0xbe>
    2d3e:	ca e0       	ldi	r28, 0x0A	; 10
    2d40:	d0 e0       	ldi	r29, 0x00	; 0
    2d42:	e9 e9       	ldi	r30, 0x99	; 153
    2d44:	ce 2e       	mov	r12, r30
    2d46:	dc 2c       	mov	r13, r12
    2d48:	ec 2c       	mov	r14, r12
    2d4a:	e9 e1       	ldi	r30, 0x19	; 25
    2d4c:	fe 2e       	mov	r15, r30
    2d4e:	f5 01       	movw	r30, r10
    2d50:	60 e0       	ldi	r22, 0x00	; 0
    2d52:	20 e0       	ldi	r18, 0x00	; 0
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	a9 01       	movw	r20, r18
    2d58:	4e 01       	movw	r8, r28
    2d5a:	aa 24       	eor	r10, r10
    2d5c:	97 fc       	sbrc	r9, 7
    2d5e:	a0 94       	com	r10
    2d60:	ba 2c       	mov	r11, r10
    2d62:	1f 01       	movw	r2, r30
    2d64:	70 ed       	ldi	r23, 0xD0	; 208
    2d66:	57 2e       	mov	r5, r23
    2d68:	56 0c       	add	r5, r6
    2d6a:	a9 e0       	ldi	r26, 0x09	; 9
    2d6c:	a5 15       	cp	r26, r5
    2d6e:	70 f4       	brcc	.+28     	; 0x2d8c <strtoul+0x160>
    2d70:	8f eb       	ldi	r24, 0xBF	; 191
    2d72:	86 0d       	add	r24, r6
    2d74:	8a 31       	cpi	r24, 0x1A	; 26
    2d76:	18 f4       	brcc	.+6      	; 0x2d7e <strtoul+0x152>
    2d78:	99 ec       	ldi	r25, 0xC9	; 201
    2d7a:	59 2e       	mov	r5, r25
    2d7c:	06 c0       	rjmp	.+12     	; 0x2d8a <strtoul+0x15e>
    2d7e:	8f e9       	ldi	r24, 0x9F	; 159
    2d80:	86 0d       	add	r24, r6
    2d82:	8a 31       	cpi	r24, 0x1A	; 26
    2d84:	40 f5       	brcc	.+80     	; 0x2dd6 <strtoul+0x1aa>
    2d86:	89 ea       	ldi	r24, 0xA9	; 169
    2d88:	58 2e       	mov	r5, r24
    2d8a:	56 0c       	add	r5, r6
    2d8c:	85 2d       	mov	r24, r5
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
    2d90:	8c 17       	cp	r24, r28
    2d92:	9d 07       	cpc	r25, r29
    2d94:	04 f5       	brge	.+64     	; 0x2dd6 <strtoul+0x1aa>
    2d96:	6f 3f       	cpi	r22, 0xFF	; 255
    2d98:	d1 f0       	breq	.+52     	; 0x2dce <strtoul+0x1a2>
    2d9a:	c2 16       	cp	r12, r18
    2d9c:	d3 06       	cpc	r13, r19
    2d9e:	e4 06       	cpc	r14, r20
    2da0:	f5 06       	cpc	r15, r21
    2da2:	90 f0       	brcs	.+36     	; 0x2dc8 <strtoul+0x19c>
    2da4:	c5 01       	movw	r24, r10
    2da6:	b4 01       	movw	r22, r8
    2da8:	b6 d5       	rcall	.+2924   	; 0x3916 <__mulsi3>
    2daa:	9b 01       	movw	r18, r22
    2dac:	ac 01       	movw	r20, r24
    2dae:	85 2d       	mov	r24, r5
    2db0:	90 e0       	ldi	r25, 0x00	; 0
    2db2:	a0 e0       	ldi	r26, 0x00	; 0
    2db4:	b0 e0       	ldi	r27, 0x00	; 0
    2db6:	28 0f       	add	r18, r24
    2db8:	39 1f       	adc	r19, r25
    2dba:	4a 1f       	adc	r20, r26
    2dbc:	5b 1f       	adc	r21, r27
    2dbe:	28 17       	cp	r18, r24
    2dc0:	39 07       	cpc	r19, r25
    2dc2:	4a 07       	cpc	r20, r26
    2dc4:	5b 07       	cpc	r21, r27
    2dc6:	10 f4       	brcc	.+4      	; 0x2dcc <strtoul+0x1a0>
    2dc8:	6f ef       	ldi	r22, 0xFF	; 255
    2dca:	01 c0       	rjmp	.+2      	; 0x2dce <strtoul+0x1a2>
    2dcc:	61 e0       	ldi	r22, 0x01	; 1
    2dce:	31 96       	adiw	r30, 0x01	; 1
    2dd0:	d1 01       	movw	r26, r2
    2dd2:	6c 90       	ld	r6, X
    2dd4:	c6 cf       	rjmp	.-116    	; 0x2d62 <strtoul+0x136>
    2dd6:	01 15       	cp	r16, r1
    2dd8:	11 05       	cpc	r17, r1
    2dda:	51 f0       	breq	.+20     	; 0x2df0 <strtoul+0x1c4>
    2ddc:	66 23       	and	r22, r22
    2dde:	11 f0       	breq	.+4      	; 0x2de4 <strtoul+0x1b8>
    2de0:	31 97       	sbiw	r30, 0x01	; 1
    2de2:	03 c0       	rjmp	.+6      	; 0x2dea <strtoul+0x1be>
    2de4:	71 fe       	sbrs	r7, 1
    2de6:	04 c0       	rjmp	.+8      	; 0x2df0 <strtoul+0x1c4>
    2de8:	32 97       	sbiw	r30, 0x02	; 2
    2dea:	d8 01       	movw	r26, r16
    2dec:	ed 93       	st	X+, r30
    2dee:	fc 93       	st	X, r31
    2df0:	70 fe       	sbrs	r7, 0
    2df2:	07 c0       	rjmp	.+14     	; 0x2e02 <strtoul+0x1d6>
    2df4:	50 95       	com	r21
    2df6:	40 95       	com	r20
    2df8:	30 95       	com	r19
    2dfa:	21 95       	neg	r18
    2dfc:	3f 4f       	sbci	r19, 0xFF	; 255
    2dfe:	4f 4f       	sbci	r20, 0xFF	; 255
    2e00:	5f 4f       	sbci	r21, 0xFF	; 255
    2e02:	67 ff       	sbrs	r22, 7
    2e04:	10 c0       	rjmp	.+32     	; 0x2e26 <strtoul+0x1fa>
    2e06:	82 e2       	ldi	r24, 0x22	; 34
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	90 93 c0 03 	sts	0x03C0, r25
    2e0e:	80 93 bf 03 	sts	0x03BF, r24
    2e12:	6f ef       	ldi	r22, 0xFF	; 255
    2e14:	7f ef       	ldi	r23, 0xFF	; 255
    2e16:	8f ef       	ldi	r24, 0xFF	; 255
    2e18:	9f ef       	ldi	r25, 0xFF	; 255
    2e1a:	07 c0       	rjmp	.+14     	; 0x2e2a <strtoul+0x1fe>
    2e1c:	60 e0       	ldi	r22, 0x00	; 0
    2e1e:	70 e0       	ldi	r23, 0x00	; 0
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	02 c0       	rjmp	.+4      	; 0x2e2a <strtoul+0x1fe>
    2e26:	b9 01       	movw	r22, r18
    2e28:	ca 01       	movw	r24, r20
    2e2a:	df 91       	pop	r29
    2e2c:	cf 91       	pop	r28
    2e2e:	1f 91       	pop	r17
    2e30:	0f 91       	pop	r16
    2e32:	ff 90       	pop	r15
    2e34:	ef 90       	pop	r14
    2e36:	df 90       	pop	r13
    2e38:	cf 90       	pop	r12
    2e3a:	bf 90       	pop	r11
    2e3c:	af 90       	pop	r10
    2e3e:	9f 90       	pop	r9
    2e40:	8f 90       	pop	r8
    2e42:	7f 90       	pop	r7
    2e44:	6f 90       	pop	r6
    2e46:	5f 90       	pop	r5
    2e48:	3f 90       	pop	r3
    2e4a:	2f 90       	pop	r2
    2e4c:	08 95       	ret

00002e4e <isspace>:
    2e4e:	91 11       	cpse	r25, r1
    2e50:	b9 c4       	rjmp	.+2418   	; 0x37c4 <__ctype_isfalse>
    2e52:	80 32       	cpi	r24, 0x20	; 32
    2e54:	19 f0       	breq	.+6      	; 0x2e5c <isspace+0xe>
    2e56:	89 50       	subi	r24, 0x09	; 9
    2e58:	85 50       	subi	r24, 0x05	; 5
    2e5a:	d0 f7       	brcc	.-12     	; 0x2e50 <isspace+0x2>
    2e5c:	08 95       	ret

00002e5e <memcpy_P>:
    2e5e:	fb 01       	movw	r30, r22
    2e60:	dc 01       	movw	r26, r24
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <memcpy_P+0xa>
    2e64:	05 90       	lpm	r0, Z+
    2e66:	0d 92       	st	X+, r0
    2e68:	41 50       	subi	r20, 0x01	; 1
    2e6a:	50 40       	sbci	r21, 0x00	; 0
    2e6c:	d8 f7       	brcc	.-10     	; 0x2e64 <memcpy_P+0x6>
    2e6e:	08 95       	ret

00002e70 <__strlen_P>:
    2e70:	fc 01       	movw	r30, r24
    2e72:	05 90       	lpm	r0, Z+
    2e74:	00 20       	and	r0, r0
    2e76:	e9 f7       	brne	.-6      	; 0x2e72 <__strlen_P+0x2>
    2e78:	80 95       	com	r24
    2e7a:	90 95       	com	r25
    2e7c:	8e 0f       	add	r24, r30
    2e7e:	9f 1f       	adc	r25, r31
    2e80:	08 95       	ret

00002e82 <strncasecmp_P>:
    2e82:	fb 01       	movw	r30, r22
    2e84:	dc 01       	movw	r26, r24
    2e86:	41 50       	subi	r20, 0x01	; 1
    2e88:	50 40       	sbci	r21, 0x00	; 0
    2e8a:	88 f0       	brcs	.+34     	; 0x2eae <strncasecmp_P+0x2c>
    2e8c:	8d 91       	ld	r24, X+
    2e8e:	81 34       	cpi	r24, 0x41	; 65
    2e90:	1c f0       	brlt	.+6      	; 0x2e98 <strncasecmp_P+0x16>
    2e92:	8b 35       	cpi	r24, 0x5B	; 91
    2e94:	0c f4       	brge	.+2      	; 0x2e98 <strncasecmp_P+0x16>
    2e96:	80 5e       	subi	r24, 0xE0	; 224
    2e98:	65 91       	lpm	r22, Z+
    2e9a:	61 34       	cpi	r22, 0x41	; 65
    2e9c:	1c f0       	brlt	.+6      	; 0x2ea4 <strncasecmp_P+0x22>
    2e9e:	6b 35       	cpi	r22, 0x5B	; 91
    2ea0:	0c f4       	brge	.+2      	; 0x2ea4 <strncasecmp_P+0x22>
    2ea2:	60 5e       	subi	r22, 0xE0	; 224
    2ea4:	86 1b       	sub	r24, r22
    2ea6:	61 11       	cpse	r22, r1
    2ea8:	71 f3       	breq	.-36     	; 0x2e86 <strncasecmp_P+0x4>
    2eaa:	99 0b       	sbc	r25, r25
    2eac:	08 95       	ret
    2eae:	88 1b       	sub	r24, r24
    2eb0:	fc cf       	rjmp	.-8      	; 0x2eaa <strncasecmp_P+0x28>

00002eb2 <fprintf_P>:
    2eb2:	a0 e0       	ldi	r26, 0x00	; 0
    2eb4:	b0 e0       	ldi	r27, 0x00	; 0
    2eb6:	ee e5       	ldi	r30, 0x5E	; 94
    2eb8:	f7 e1       	ldi	r31, 0x17	; 23
    2eba:	54 c5       	rjmp	.+2728   	; 0x3964 <__prologue_saves__+0x1c>
    2ebc:	0f 81       	ldd	r16, Y+7	; 0x07
    2ebe:	18 85       	ldd	r17, Y+8	; 0x08
    2ec0:	f8 01       	movw	r30, r16
    2ec2:	83 81       	ldd	r24, Z+3	; 0x03
    2ec4:	88 60       	ori	r24, 0x08	; 8
    2ec6:	83 83       	std	Z+3, r24	; 0x03
    2ec8:	ae 01       	movw	r20, r28
    2eca:	45 5f       	subi	r20, 0xF5	; 245
    2ecc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ece:	69 85       	ldd	r22, Y+9	; 0x09
    2ed0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ed2:	c8 01       	movw	r24, r16
    2ed4:	2e d0       	rcall	.+92     	; 0x2f32 <vfprintf>
    2ed6:	f8 01       	movw	r30, r16
    2ed8:	23 81       	ldd	r18, Z+3	; 0x03
    2eda:	27 7f       	andi	r18, 0xF7	; 247
    2edc:	23 83       	std	Z+3, r18	; 0x03
    2ede:	e4 e0       	ldi	r30, 0x04	; 4
    2ee0:	5d c5       	rjmp	.+2746   	; 0x399c <__epilogue_restores__+0x1c>

00002ee2 <__cmpsf2>:
    2ee2:	03 d0       	rcall	.+6      	; 0x2eea <__fp_cmp>
    2ee4:	08 f4       	brcc	.+2      	; 0x2ee8 <__cmpsf2+0x6>
    2ee6:	81 e0       	ldi	r24, 0x01	; 1
    2ee8:	08 95       	ret

00002eea <__fp_cmp>:
    2eea:	99 0f       	add	r25, r25
    2eec:	00 08       	sbc	r0, r0
    2eee:	55 0f       	add	r21, r21
    2ef0:	aa 0b       	sbc	r26, r26
    2ef2:	e0 e8       	ldi	r30, 0x80	; 128
    2ef4:	fe ef       	ldi	r31, 0xFE	; 254
    2ef6:	16 16       	cp	r1, r22
    2ef8:	17 06       	cpc	r1, r23
    2efa:	e8 07       	cpc	r30, r24
    2efc:	f9 07       	cpc	r31, r25
    2efe:	c0 f0       	brcs	.+48     	; 0x2f30 <__fp_cmp+0x46>
    2f00:	12 16       	cp	r1, r18
    2f02:	13 06       	cpc	r1, r19
    2f04:	e4 07       	cpc	r30, r20
    2f06:	f5 07       	cpc	r31, r21
    2f08:	98 f0       	brcs	.+38     	; 0x2f30 <__fp_cmp+0x46>
    2f0a:	62 1b       	sub	r22, r18
    2f0c:	73 0b       	sbc	r23, r19
    2f0e:	84 0b       	sbc	r24, r20
    2f10:	95 0b       	sbc	r25, r21
    2f12:	39 f4       	brne	.+14     	; 0x2f22 <__fp_cmp+0x38>
    2f14:	0a 26       	eor	r0, r26
    2f16:	61 f0       	breq	.+24     	; 0x2f30 <__fp_cmp+0x46>
    2f18:	23 2b       	or	r18, r19
    2f1a:	24 2b       	or	r18, r20
    2f1c:	25 2b       	or	r18, r21
    2f1e:	21 f4       	brne	.+8      	; 0x2f28 <__fp_cmp+0x3e>
    2f20:	08 95       	ret
    2f22:	0a 26       	eor	r0, r26
    2f24:	09 f4       	brne	.+2      	; 0x2f28 <__fp_cmp+0x3e>
    2f26:	a1 40       	sbci	r26, 0x01	; 1
    2f28:	a6 95       	lsr	r26
    2f2a:	8f ef       	ldi	r24, 0xFF	; 255
    2f2c:	81 1d       	adc	r24, r1
    2f2e:	81 1d       	adc	r24, r1
    2f30:	08 95       	ret

00002f32 <vfprintf>:
    2f32:	ac e0       	ldi	r26, 0x0C	; 12
    2f34:	b0 e0       	ldi	r27, 0x00	; 0
    2f36:	ee e9       	ldi	r30, 0x9E	; 158
    2f38:	f7 e1       	ldi	r31, 0x17	; 23
    2f3a:	06 c5       	rjmp	.+2572   	; 0x3948 <__prologue_saves__>
    2f3c:	7c 01       	movw	r14, r24
    2f3e:	6b 01       	movw	r12, r22
    2f40:	8a 01       	movw	r16, r20
    2f42:	fc 01       	movw	r30, r24
    2f44:	17 82       	std	Z+7, r1	; 0x07
    2f46:	16 82       	std	Z+6, r1	; 0x06
    2f48:	83 81       	ldd	r24, Z+3	; 0x03
    2f4a:	81 ff       	sbrs	r24, 1
    2f4c:	b0 c1       	rjmp	.+864    	; 0x32ae <vfprintf+0x37c>
    2f4e:	ce 01       	movw	r24, r28
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	4c 01       	movw	r8, r24
    2f54:	f7 01       	movw	r30, r14
    2f56:	93 81       	ldd	r25, Z+3	; 0x03
    2f58:	f6 01       	movw	r30, r12
    2f5a:	93 fd       	sbrc	r25, 3
    2f5c:	85 91       	lpm	r24, Z+
    2f5e:	93 ff       	sbrs	r25, 3
    2f60:	81 91       	ld	r24, Z+
    2f62:	6f 01       	movw	r12, r30
    2f64:	88 23       	and	r24, r24
    2f66:	09 f4       	brne	.+2      	; 0x2f6a <vfprintf+0x38>
    2f68:	9e c1       	rjmp	.+828    	; 0x32a6 <vfprintf+0x374>
    2f6a:	85 32       	cpi	r24, 0x25	; 37
    2f6c:	39 f4       	brne	.+14     	; 0x2f7c <vfprintf+0x4a>
    2f6e:	93 fd       	sbrc	r25, 3
    2f70:	85 91       	lpm	r24, Z+
    2f72:	93 ff       	sbrs	r25, 3
    2f74:	81 91       	ld	r24, Z+
    2f76:	6f 01       	movw	r12, r30
    2f78:	85 32       	cpi	r24, 0x25	; 37
    2f7a:	21 f4       	brne	.+8      	; 0x2f84 <vfprintf+0x52>
    2f7c:	b7 01       	movw	r22, r14
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	3a d4       	rcall	.+2164   	; 0x37f6 <fputc>
    2f82:	e8 cf       	rjmp	.-48     	; 0x2f54 <vfprintf+0x22>
    2f84:	51 2c       	mov	r5, r1
    2f86:	31 2c       	mov	r3, r1
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	20 32       	cpi	r18, 0x20	; 32
    2f8c:	a0 f4       	brcc	.+40     	; 0x2fb6 <vfprintf+0x84>
    2f8e:	8b 32       	cpi	r24, 0x2B	; 43
    2f90:	69 f0       	breq	.+26     	; 0x2fac <vfprintf+0x7a>
    2f92:	30 f4       	brcc	.+12     	; 0x2fa0 <vfprintf+0x6e>
    2f94:	80 32       	cpi	r24, 0x20	; 32
    2f96:	59 f0       	breq	.+22     	; 0x2fae <vfprintf+0x7c>
    2f98:	83 32       	cpi	r24, 0x23	; 35
    2f9a:	69 f4       	brne	.+26     	; 0x2fb6 <vfprintf+0x84>
    2f9c:	20 61       	ori	r18, 0x10	; 16
    2f9e:	2c c0       	rjmp	.+88     	; 0x2ff8 <vfprintf+0xc6>
    2fa0:	8d 32       	cpi	r24, 0x2D	; 45
    2fa2:	39 f0       	breq	.+14     	; 0x2fb2 <vfprintf+0x80>
    2fa4:	80 33       	cpi	r24, 0x30	; 48
    2fa6:	39 f4       	brne	.+14     	; 0x2fb6 <vfprintf+0x84>
    2fa8:	21 60       	ori	r18, 0x01	; 1
    2faa:	26 c0       	rjmp	.+76     	; 0x2ff8 <vfprintf+0xc6>
    2fac:	22 60       	ori	r18, 0x02	; 2
    2fae:	24 60       	ori	r18, 0x04	; 4
    2fb0:	23 c0       	rjmp	.+70     	; 0x2ff8 <vfprintf+0xc6>
    2fb2:	28 60       	ori	r18, 0x08	; 8
    2fb4:	21 c0       	rjmp	.+66     	; 0x2ff8 <vfprintf+0xc6>
    2fb6:	27 fd       	sbrc	r18, 7
    2fb8:	27 c0       	rjmp	.+78     	; 0x3008 <vfprintf+0xd6>
    2fba:	30 ed       	ldi	r19, 0xD0	; 208
    2fbc:	38 0f       	add	r19, r24
    2fbe:	3a 30       	cpi	r19, 0x0A	; 10
    2fc0:	78 f4       	brcc	.+30     	; 0x2fe0 <vfprintf+0xae>
    2fc2:	26 ff       	sbrs	r18, 6
    2fc4:	06 c0       	rjmp	.+12     	; 0x2fd2 <vfprintf+0xa0>
    2fc6:	fa e0       	ldi	r31, 0x0A	; 10
    2fc8:	5f 9e       	mul	r5, r31
    2fca:	30 0d       	add	r19, r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	53 2e       	mov	r5, r19
    2fd0:	13 c0       	rjmp	.+38     	; 0x2ff8 <vfprintf+0xc6>
    2fd2:	8a e0       	ldi	r24, 0x0A	; 10
    2fd4:	38 9e       	mul	r3, r24
    2fd6:	30 0d       	add	r19, r0
    2fd8:	11 24       	eor	r1, r1
    2fda:	33 2e       	mov	r3, r19
    2fdc:	20 62       	ori	r18, 0x20	; 32
    2fde:	0c c0       	rjmp	.+24     	; 0x2ff8 <vfprintf+0xc6>
    2fe0:	8e 32       	cpi	r24, 0x2E	; 46
    2fe2:	21 f4       	brne	.+8      	; 0x2fec <vfprintf+0xba>
    2fe4:	26 fd       	sbrc	r18, 6
    2fe6:	5f c1       	rjmp	.+702    	; 0x32a6 <vfprintf+0x374>
    2fe8:	20 64       	ori	r18, 0x40	; 64
    2fea:	06 c0       	rjmp	.+12     	; 0x2ff8 <vfprintf+0xc6>
    2fec:	8c 36       	cpi	r24, 0x6C	; 108
    2fee:	11 f4       	brne	.+4      	; 0x2ff4 <vfprintf+0xc2>
    2ff0:	20 68       	ori	r18, 0x80	; 128
    2ff2:	02 c0       	rjmp	.+4      	; 0x2ff8 <vfprintf+0xc6>
    2ff4:	88 36       	cpi	r24, 0x68	; 104
    2ff6:	41 f4       	brne	.+16     	; 0x3008 <vfprintf+0xd6>
    2ff8:	f6 01       	movw	r30, r12
    2ffa:	93 fd       	sbrc	r25, 3
    2ffc:	85 91       	lpm	r24, Z+
    2ffe:	93 ff       	sbrs	r25, 3
    3000:	81 91       	ld	r24, Z+
    3002:	6f 01       	movw	r12, r30
    3004:	81 11       	cpse	r24, r1
    3006:	c1 cf       	rjmp	.-126    	; 0x2f8a <vfprintf+0x58>
    3008:	98 2f       	mov	r25, r24
    300a:	9f 7d       	andi	r25, 0xDF	; 223
    300c:	95 54       	subi	r25, 0x45	; 69
    300e:	93 30       	cpi	r25, 0x03	; 3
    3010:	28 f4       	brcc	.+10     	; 0x301c <vfprintf+0xea>
    3012:	0c 5f       	subi	r16, 0xFC	; 252
    3014:	1f 4f       	sbci	r17, 0xFF	; 255
    3016:	ff e3       	ldi	r31, 0x3F	; 63
    3018:	f9 83       	std	Y+1, r31	; 0x01
    301a:	0d c0       	rjmp	.+26     	; 0x3036 <vfprintf+0x104>
    301c:	83 36       	cpi	r24, 0x63	; 99
    301e:	31 f0       	breq	.+12     	; 0x302c <vfprintf+0xfa>
    3020:	83 37       	cpi	r24, 0x73	; 115
    3022:	71 f0       	breq	.+28     	; 0x3040 <vfprintf+0x10e>
    3024:	83 35       	cpi	r24, 0x53	; 83
    3026:	09 f0       	breq	.+2      	; 0x302a <vfprintf+0xf8>
    3028:	57 c0       	rjmp	.+174    	; 0x30d8 <vfprintf+0x1a6>
    302a:	21 c0       	rjmp	.+66     	; 0x306e <vfprintf+0x13c>
    302c:	f8 01       	movw	r30, r16
    302e:	80 81       	ld	r24, Z
    3030:	89 83       	std	Y+1, r24	; 0x01
    3032:	0e 5f       	subi	r16, 0xFE	; 254
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	44 24       	eor	r4, r4
    3038:	43 94       	inc	r4
    303a:	51 2c       	mov	r5, r1
    303c:	54 01       	movw	r10, r8
    303e:	14 c0       	rjmp	.+40     	; 0x3068 <vfprintf+0x136>
    3040:	38 01       	movw	r6, r16
    3042:	f2 e0       	ldi	r31, 0x02	; 2
    3044:	6f 0e       	add	r6, r31
    3046:	71 1c       	adc	r7, r1
    3048:	f8 01       	movw	r30, r16
    304a:	a0 80       	ld	r10, Z
    304c:	b1 80       	ldd	r11, Z+1	; 0x01
    304e:	26 ff       	sbrs	r18, 6
    3050:	03 c0       	rjmp	.+6      	; 0x3058 <vfprintf+0x126>
    3052:	65 2d       	mov	r22, r5
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	02 c0       	rjmp	.+4      	; 0x305c <vfprintf+0x12a>
    3058:	6f ef       	ldi	r22, 0xFF	; 255
    305a:	7f ef       	ldi	r23, 0xFF	; 255
    305c:	c5 01       	movw	r24, r10
    305e:	2c 87       	std	Y+12, r18	; 0x0c
    3060:	bf d3       	rcall	.+1918   	; 0x37e0 <strnlen>
    3062:	2c 01       	movw	r4, r24
    3064:	83 01       	movw	r16, r6
    3066:	2c 85       	ldd	r18, Y+12	; 0x0c
    3068:	2f 77       	andi	r18, 0x7F	; 127
    306a:	22 2e       	mov	r2, r18
    306c:	16 c0       	rjmp	.+44     	; 0x309a <vfprintf+0x168>
    306e:	38 01       	movw	r6, r16
    3070:	f2 e0       	ldi	r31, 0x02	; 2
    3072:	6f 0e       	add	r6, r31
    3074:	71 1c       	adc	r7, r1
    3076:	f8 01       	movw	r30, r16
    3078:	a0 80       	ld	r10, Z
    307a:	b1 80       	ldd	r11, Z+1	; 0x01
    307c:	26 ff       	sbrs	r18, 6
    307e:	03 c0       	rjmp	.+6      	; 0x3086 <vfprintf+0x154>
    3080:	65 2d       	mov	r22, r5
    3082:	70 e0       	ldi	r23, 0x00	; 0
    3084:	02 c0       	rjmp	.+4      	; 0x308a <vfprintf+0x158>
    3086:	6f ef       	ldi	r22, 0xFF	; 255
    3088:	7f ef       	ldi	r23, 0xFF	; 255
    308a:	c5 01       	movw	r24, r10
    308c:	2c 87       	std	Y+12, r18	; 0x0c
    308e:	9d d3       	rcall	.+1850   	; 0x37ca <strnlen_P>
    3090:	2c 01       	movw	r4, r24
    3092:	2c 85       	ldd	r18, Y+12	; 0x0c
    3094:	20 68       	ori	r18, 0x80	; 128
    3096:	22 2e       	mov	r2, r18
    3098:	83 01       	movw	r16, r6
    309a:	23 fc       	sbrc	r2, 3
    309c:	19 c0       	rjmp	.+50     	; 0x30d0 <vfprintf+0x19e>
    309e:	83 2d       	mov	r24, r3
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	48 16       	cp	r4, r24
    30a4:	59 06       	cpc	r5, r25
    30a6:	a0 f4       	brcc	.+40     	; 0x30d0 <vfprintf+0x19e>
    30a8:	b7 01       	movw	r22, r14
    30aa:	80 e2       	ldi	r24, 0x20	; 32
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	a3 d3       	rcall	.+1862   	; 0x37f6 <fputc>
    30b0:	3a 94       	dec	r3
    30b2:	f5 cf       	rjmp	.-22     	; 0x309e <vfprintf+0x16c>
    30b4:	f5 01       	movw	r30, r10
    30b6:	27 fc       	sbrc	r2, 7
    30b8:	85 91       	lpm	r24, Z+
    30ba:	27 fe       	sbrs	r2, 7
    30bc:	81 91       	ld	r24, Z+
    30be:	5f 01       	movw	r10, r30
    30c0:	b7 01       	movw	r22, r14
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	98 d3       	rcall	.+1840   	; 0x37f6 <fputc>
    30c6:	31 10       	cpse	r3, r1
    30c8:	3a 94       	dec	r3
    30ca:	f1 e0       	ldi	r31, 0x01	; 1
    30cc:	4f 1a       	sub	r4, r31
    30ce:	51 08       	sbc	r5, r1
    30d0:	41 14       	cp	r4, r1
    30d2:	51 04       	cpc	r5, r1
    30d4:	79 f7       	brne	.-34     	; 0x30b4 <vfprintf+0x182>
    30d6:	de c0       	rjmp	.+444    	; 0x3294 <vfprintf+0x362>
    30d8:	84 36       	cpi	r24, 0x64	; 100
    30da:	11 f0       	breq	.+4      	; 0x30e0 <vfprintf+0x1ae>
    30dc:	89 36       	cpi	r24, 0x69	; 105
    30de:	31 f5       	brne	.+76     	; 0x312c <vfprintf+0x1fa>
    30e0:	f8 01       	movw	r30, r16
    30e2:	27 ff       	sbrs	r18, 7
    30e4:	07 c0       	rjmp	.+14     	; 0x30f4 <vfprintf+0x1c2>
    30e6:	60 81       	ld	r22, Z
    30e8:	71 81       	ldd	r23, Z+1	; 0x01
    30ea:	82 81       	ldd	r24, Z+2	; 0x02
    30ec:	93 81       	ldd	r25, Z+3	; 0x03
    30ee:	0c 5f       	subi	r16, 0xFC	; 252
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	08 c0       	rjmp	.+16     	; 0x3104 <vfprintf+0x1d2>
    30f4:	60 81       	ld	r22, Z
    30f6:	71 81       	ldd	r23, Z+1	; 0x01
    30f8:	88 27       	eor	r24, r24
    30fa:	77 fd       	sbrc	r23, 7
    30fc:	80 95       	com	r24
    30fe:	98 2f       	mov	r25, r24
    3100:	0e 5f       	subi	r16, 0xFE	; 254
    3102:	1f 4f       	sbci	r17, 0xFF	; 255
    3104:	2f 76       	andi	r18, 0x6F	; 111
    3106:	b2 2e       	mov	r11, r18
    3108:	97 ff       	sbrs	r25, 7
    310a:	09 c0       	rjmp	.+18     	; 0x311e <vfprintf+0x1ec>
    310c:	90 95       	com	r25
    310e:	80 95       	com	r24
    3110:	70 95       	com	r23
    3112:	61 95       	neg	r22
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	8f 4f       	sbci	r24, 0xFF	; 255
    3118:	9f 4f       	sbci	r25, 0xFF	; 255
    311a:	20 68       	ori	r18, 0x80	; 128
    311c:	b2 2e       	mov	r11, r18
    311e:	2a e0       	ldi	r18, 0x0A	; 10
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	a4 01       	movw	r20, r8
    3124:	9a d3       	rcall	.+1844   	; 0x385a <__ultoa_invert>
    3126:	a8 2e       	mov	r10, r24
    3128:	a8 18       	sub	r10, r8
    312a:	43 c0       	rjmp	.+134    	; 0x31b2 <vfprintf+0x280>
    312c:	85 37       	cpi	r24, 0x75	; 117
    312e:	29 f4       	brne	.+10     	; 0x313a <vfprintf+0x208>
    3130:	2f 7e       	andi	r18, 0xEF	; 239
    3132:	b2 2e       	mov	r11, r18
    3134:	2a e0       	ldi	r18, 0x0A	; 10
    3136:	30 e0       	ldi	r19, 0x00	; 0
    3138:	25 c0       	rjmp	.+74     	; 0x3184 <vfprintf+0x252>
    313a:	f2 2f       	mov	r31, r18
    313c:	f9 7f       	andi	r31, 0xF9	; 249
    313e:	bf 2e       	mov	r11, r31
    3140:	8f 36       	cpi	r24, 0x6F	; 111
    3142:	c1 f0       	breq	.+48     	; 0x3174 <vfprintf+0x242>
    3144:	18 f4       	brcc	.+6      	; 0x314c <vfprintf+0x21a>
    3146:	88 35       	cpi	r24, 0x58	; 88
    3148:	79 f0       	breq	.+30     	; 0x3168 <vfprintf+0x236>
    314a:	ad c0       	rjmp	.+346    	; 0x32a6 <vfprintf+0x374>
    314c:	80 37       	cpi	r24, 0x70	; 112
    314e:	19 f0       	breq	.+6      	; 0x3156 <vfprintf+0x224>
    3150:	88 37       	cpi	r24, 0x78	; 120
    3152:	21 f0       	breq	.+8      	; 0x315c <vfprintf+0x22a>
    3154:	a8 c0       	rjmp	.+336    	; 0x32a6 <vfprintf+0x374>
    3156:	2f 2f       	mov	r18, r31
    3158:	20 61       	ori	r18, 0x10	; 16
    315a:	b2 2e       	mov	r11, r18
    315c:	b4 fe       	sbrs	r11, 4
    315e:	0d c0       	rjmp	.+26     	; 0x317a <vfprintf+0x248>
    3160:	8b 2d       	mov	r24, r11
    3162:	84 60       	ori	r24, 0x04	; 4
    3164:	b8 2e       	mov	r11, r24
    3166:	09 c0       	rjmp	.+18     	; 0x317a <vfprintf+0x248>
    3168:	24 ff       	sbrs	r18, 4
    316a:	0a c0       	rjmp	.+20     	; 0x3180 <vfprintf+0x24e>
    316c:	9f 2f       	mov	r25, r31
    316e:	96 60       	ori	r25, 0x06	; 6
    3170:	b9 2e       	mov	r11, r25
    3172:	06 c0       	rjmp	.+12     	; 0x3180 <vfprintf+0x24e>
    3174:	28 e0       	ldi	r18, 0x08	; 8
    3176:	30 e0       	ldi	r19, 0x00	; 0
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <vfprintf+0x252>
    317a:	20 e1       	ldi	r18, 0x10	; 16
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <vfprintf+0x252>
    3180:	20 e1       	ldi	r18, 0x10	; 16
    3182:	32 e0       	ldi	r19, 0x02	; 2
    3184:	f8 01       	movw	r30, r16
    3186:	b7 fe       	sbrs	r11, 7
    3188:	07 c0       	rjmp	.+14     	; 0x3198 <vfprintf+0x266>
    318a:	60 81       	ld	r22, Z
    318c:	71 81       	ldd	r23, Z+1	; 0x01
    318e:	82 81       	ldd	r24, Z+2	; 0x02
    3190:	93 81       	ldd	r25, Z+3	; 0x03
    3192:	0c 5f       	subi	r16, 0xFC	; 252
    3194:	1f 4f       	sbci	r17, 0xFF	; 255
    3196:	06 c0       	rjmp	.+12     	; 0x31a4 <vfprintf+0x272>
    3198:	60 81       	ld	r22, Z
    319a:	71 81       	ldd	r23, Z+1	; 0x01
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	0e 5f       	subi	r16, 0xFE	; 254
    31a2:	1f 4f       	sbci	r17, 0xFF	; 255
    31a4:	a4 01       	movw	r20, r8
    31a6:	59 d3       	rcall	.+1714   	; 0x385a <__ultoa_invert>
    31a8:	a8 2e       	mov	r10, r24
    31aa:	a8 18       	sub	r10, r8
    31ac:	fb 2d       	mov	r31, r11
    31ae:	ff 77       	andi	r31, 0x7F	; 127
    31b0:	bf 2e       	mov	r11, r31
    31b2:	b6 fe       	sbrs	r11, 6
    31b4:	0b c0       	rjmp	.+22     	; 0x31cc <vfprintf+0x29a>
    31b6:	2b 2d       	mov	r18, r11
    31b8:	2e 7f       	andi	r18, 0xFE	; 254
    31ba:	a5 14       	cp	r10, r5
    31bc:	50 f4       	brcc	.+20     	; 0x31d2 <vfprintf+0x2a0>
    31be:	b4 fe       	sbrs	r11, 4
    31c0:	0a c0       	rjmp	.+20     	; 0x31d6 <vfprintf+0x2a4>
    31c2:	b2 fc       	sbrc	r11, 2
    31c4:	08 c0       	rjmp	.+16     	; 0x31d6 <vfprintf+0x2a4>
    31c6:	2b 2d       	mov	r18, r11
    31c8:	2e 7e       	andi	r18, 0xEE	; 238
    31ca:	05 c0       	rjmp	.+10     	; 0x31d6 <vfprintf+0x2a4>
    31cc:	7a 2c       	mov	r7, r10
    31ce:	2b 2d       	mov	r18, r11
    31d0:	03 c0       	rjmp	.+6      	; 0x31d8 <vfprintf+0x2a6>
    31d2:	7a 2c       	mov	r7, r10
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <vfprintf+0x2a6>
    31d6:	75 2c       	mov	r7, r5
    31d8:	24 ff       	sbrs	r18, 4
    31da:	0d c0       	rjmp	.+26     	; 0x31f6 <vfprintf+0x2c4>
    31dc:	fe 01       	movw	r30, r28
    31de:	ea 0d       	add	r30, r10
    31e0:	f1 1d       	adc	r31, r1
    31e2:	80 81       	ld	r24, Z
    31e4:	80 33       	cpi	r24, 0x30	; 48
    31e6:	11 f4       	brne	.+4      	; 0x31ec <vfprintf+0x2ba>
    31e8:	29 7e       	andi	r18, 0xE9	; 233
    31ea:	09 c0       	rjmp	.+18     	; 0x31fe <vfprintf+0x2cc>
    31ec:	22 ff       	sbrs	r18, 2
    31ee:	06 c0       	rjmp	.+12     	; 0x31fc <vfprintf+0x2ca>
    31f0:	73 94       	inc	r7
    31f2:	73 94       	inc	r7
    31f4:	04 c0       	rjmp	.+8      	; 0x31fe <vfprintf+0x2cc>
    31f6:	82 2f       	mov	r24, r18
    31f8:	86 78       	andi	r24, 0x86	; 134
    31fa:	09 f0       	breq	.+2      	; 0x31fe <vfprintf+0x2cc>
    31fc:	73 94       	inc	r7
    31fe:	23 fd       	sbrc	r18, 3
    3200:	12 c0       	rjmp	.+36     	; 0x3226 <vfprintf+0x2f4>
    3202:	20 ff       	sbrs	r18, 0
    3204:	06 c0       	rjmp	.+12     	; 0x3212 <vfprintf+0x2e0>
    3206:	5a 2c       	mov	r5, r10
    3208:	73 14       	cp	r7, r3
    320a:	18 f4       	brcc	.+6      	; 0x3212 <vfprintf+0x2e0>
    320c:	53 0c       	add	r5, r3
    320e:	57 18       	sub	r5, r7
    3210:	73 2c       	mov	r7, r3
    3212:	73 14       	cp	r7, r3
    3214:	60 f4       	brcc	.+24     	; 0x322e <vfprintf+0x2fc>
    3216:	b7 01       	movw	r22, r14
    3218:	80 e2       	ldi	r24, 0x20	; 32
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	2c 87       	std	Y+12, r18	; 0x0c
    321e:	eb d2       	rcall	.+1494   	; 0x37f6 <fputc>
    3220:	73 94       	inc	r7
    3222:	2c 85       	ldd	r18, Y+12	; 0x0c
    3224:	f6 cf       	rjmp	.-20     	; 0x3212 <vfprintf+0x2e0>
    3226:	73 14       	cp	r7, r3
    3228:	10 f4       	brcc	.+4      	; 0x322e <vfprintf+0x2fc>
    322a:	37 18       	sub	r3, r7
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <vfprintf+0x2fe>
    322e:	31 2c       	mov	r3, r1
    3230:	24 ff       	sbrs	r18, 4
    3232:	11 c0       	rjmp	.+34     	; 0x3256 <vfprintf+0x324>
    3234:	b7 01       	movw	r22, r14
    3236:	80 e3       	ldi	r24, 0x30	; 48
    3238:	90 e0       	ldi	r25, 0x00	; 0
    323a:	2c 87       	std	Y+12, r18	; 0x0c
    323c:	dc d2       	rcall	.+1464   	; 0x37f6 <fputc>
    323e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3240:	22 ff       	sbrs	r18, 2
    3242:	16 c0       	rjmp	.+44     	; 0x3270 <vfprintf+0x33e>
    3244:	21 ff       	sbrs	r18, 1
    3246:	03 c0       	rjmp	.+6      	; 0x324e <vfprintf+0x31c>
    3248:	88 e5       	ldi	r24, 0x58	; 88
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	02 c0       	rjmp	.+4      	; 0x3252 <vfprintf+0x320>
    324e:	88 e7       	ldi	r24, 0x78	; 120
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	b7 01       	movw	r22, r14
    3254:	0c c0       	rjmp	.+24     	; 0x326e <vfprintf+0x33c>
    3256:	82 2f       	mov	r24, r18
    3258:	86 78       	andi	r24, 0x86	; 134
    325a:	51 f0       	breq	.+20     	; 0x3270 <vfprintf+0x33e>
    325c:	21 fd       	sbrc	r18, 1
    325e:	02 c0       	rjmp	.+4      	; 0x3264 <vfprintf+0x332>
    3260:	80 e2       	ldi	r24, 0x20	; 32
    3262:	01 c0       	rjmp	.+2      	; 0x3266 <vfprintf+0x334>
    3264:	8b e2       	ldi	r24, 0x2B	; 43
    3266:	27 fd       	sbrc	r18, 7
    3268:	8d e2       	ldi	r24, 0x2D	; 45
    326a:	b7 01       	movw	r22, r14
    326c:	90 e0       	ldi	r25, 0x00	; 0
    326e:	c3 d2       	rcall	.+1414   	; 0x37f6 <fputc>
    3270:	a5 14       	cp	r10, r5
    3272:	30 f4       	brcc	.+12     	; 0x3280 <vfprintf+0x34e>
    3274:	b7 01       	movw	r22, r14
    3276:	80 e3       	ldi	r24, 0x30	; 48
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	bd d2       	rcall	.+1402   	; 0x37f6 <fputc>
    327c:	5a 94       	dec	r5
    327e:	f8 cf       	rjmp	.-16     	; 0x3270 <vfprintf+0x33e>
    3280:	aa 94       	dec	r10
    3282:	f4 01       	movw	r30, r8
    3284:	ea 0d       	add	r30, r10
    3286:	f1 1d       	adc	r31, r1
    3288:	80 81       	ld	r24, Z
    328a:	b7 01       	movw	r22, r14
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	b3 d2       	rcall	.+1382   	; 0x37f6 <fputc>
    3290:	a1 10       	cpse	r10, r1
    3292:	f6 cf       	rjmp	.-20     	; 0x3280 <vfprintf+0x34e>
    3294:	33 20       	and	r3, r3
    3296:	09 f4       	brne	.+2      	; 0x329a <vfprintf+0x368>
    3298:	5d ce       	rjmp	.-838    	; 0x2f54 <vfprintf+0x22>
    329a:	b7 01       	movw	r22, r14
    329c:	80 e2       	ldi	r24, 0x20	; 32
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	aa d2       	rcall	.+1364   	; 0x37f6 <fputc>
    32a2:	3a 94       	dec	r3
    32a4:	f7 cf       	rjmp	.-18     	; 0x3294 <vfprintf+0x362>
    32a6:	f7 01       	movw	r30, r14
    32a8:	86 81       	ldd	r24, Z+6	; 0x06
    32aa:	97 81       	ldd	r25, Z+7	; 0x07
    32ac:	02 c0       	rjmp	.+4      	; 0x32b2 <vfprintf+0x380>
    32ae:	8f ef       	ldi	r24, 0xFF	; 255
    32b0:	9f ef       	ldi	r25, 0xFF	; 255
    32b2:	2c 96       	adiw	r28, 0x0c	; 12
    32b4:	e2 e1       	ldi	r30, 0x12	; 18
    32b6:	64 c3       	rjmp	.+1736   	; 0x3980 <__epilogue_restores__>

000032b8 <__eerd_block_m32u4>:
    32b8:	dc 01       	movw	r26, r24
    32ba:	cb 01       	movw	r24, r22

000032bc <__eerd_blraw_m32u4>:
    32bc:	fc 01       	movw	r30, r24
    32be:	f9 99       	sbic	0x1f, 1	; 31
    32c0:	fe cf       	rjmp	.-4      	; 0x32be <__eerd_blraw_m32u4+0x2>
    32c2:	06 c0       	rjmp	.+12     	; 0x32d0 <__eerd_blraw_m32u4+0x14>
    32c4:	f2 bd       	out	0x22, r31	; 34
    32c6:	e1 bd       	out	0x21, r30	; 33
    32c8:	f8 9a       	sbi	0x1f, 0	; 31
    32ca:	31 96       	adiw	r30, 0x01	; 1
    32cc:	00 b4       	in	r0, 0x20	; 32
    32ce:	0d 92       	st	X+, r0
    32d0:	41 50       	subi	r20, 0x01	; 1
    32d2:	50 40       	sbci	r21, 0x00	; 0
    32d4:	b8 f7       	brcc	.-18     	; 0x32c4 <__eerd_blraw_m32u4+0x8>
    32d6:	08 95       	ret

000032d8 <__eeupd_block_m32u4>:
    32d8:	dc 01       	movw	r26, r24
    32da:	a4 0f       	add	r26, r20
    32dc:	b5 1f       	adc	r27, r21
    32de:	41 50       	subi	r20, 0x01	; 1
    32e0:	50 40       	sbci	r21, 0x00	; 0
    32e2:	40 f0       	brcs	.+16     	; 0x32f4 <__eeupd_block_m32u4+0x1c>
    32e4:	cb 01       	movw	r24, r22
    32e6:	84 0f       	add	r24, r20
    32e8:	95 1f       	adc	r25, r21
    32ea:	2e 91       	ld	r18, -X
    32ec:	05 d0       	rcall	.+10     	; 0x32f8 <__eeupd_r18_m32u4>
    32ee:	41 50       	subi	r20, 0x01	; 1
    32f0:	50 40       	sbci	r21, 0x00	; 0
    32f2:	d8 f7       	brcc	.-10     	; 0x32ea <__eeupd_block_m32u4+0x12>
    32f4:	08 95       	ret

000032f6 <__eeupd_byte_m32u4>:
    32f6:	26 2f       	mov	r18, r22

000032f8 <__eeupd_r18_m32u4>:
    32f8:	f9 99       	sbic	0x1f, 1	; 31
    32fa:	fe cf       	rjmp	.-4      	; 0x32f8 <__eeupd_r18_m32u4>
    32fc:	92 bd       	out	0x22, r25	; 34
    32fe:	81 bd       	out	0x21, r24	; 33
    3300:	f8 9a       	sbi	0x1f, 0	; 31
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	00 b4       	in	r0, 0x20	; 32
    3306:	02 16       	cp	r0, r18
    3308:	39 f0       	breq	.+14     	; 0x3318 <__eeupd_r18_m32u4+0x20>
    330a:	1f ba       	out	0x1f, r1	; 31
    330c:	20 bd       	out	0x20, r18	; 32
    330e:	0f b6       	in	r0, 0x3f	; 63
    3310:	f8 94       	cli
    3312:	fa 9a       	sbi	0x1f, 2	; 31
    3314:	f9 9a       	sbi	0x1f, 1	; 31
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	08 95       	ret

0000331a <dtoa_prf>:
    331a:	6f 92       	push	r6
    331c:	7f 92       	push	r7
    331e:	9f 92       	push	r9
    3320:	af 92       	push	r10
    3322:	bf 92       	push	r11
    3324:	cf 92       	push	r12
    3326:	df 92       	push	r13
    3328:	ef 92       	push	r14
    332a:	ff 92       	push	r15
    332c:	0f 93       	push	r16
    332e:	1f 93       	push	r17
    3330:	cf 93       	push	r28
    3332:	df 93       	push	r29
    3334:	cd b7       	in	r28, 0x3d	; 61
    3336:	de b7       	in	r29, 0x3e	; 62
    3338:	29 97       	sbiw	r28, 0x09	; 9
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	f8 94       	cli
    333e:	de bf       	out	0x3e, r29	; 62
    3340:	0f be       	out	0x3f, r0	; 63
    3342:	cd bf       	out	0x3d, r28	; 61
    3344:	6a 01       	movw	r12, r20
    3346:	b2 2e       	mov	r11, r18
    3348:	10 2f       	mov	r17, r16
    334a:	0c 33       	cpi	r16, 0x3C	; 60
    334c:	20 f4       	brcc	.+8      	; 0x3356 <dtoa_prf+0x3c>
    334e:	ff 24       	eor	r15, r15
    3350:	f3 94       	inc	r15
    3352:	f0 0e       	add	r15, r16
    3354:	02 c0       	rjmp	.+4      	; 0x335a <dtoa_prf+0x40>
    3356:	4c e3       	ldi	r20, 0x3C	; 60
    3358:	f4 2e       	mov	r15, r20
    335a:	0f 2d       	mov	r16, r15
    335c:	27 e0       	ldi	r18, 0x07	; 7
    335e:	ae 01       	movw	r20, r28
    3360:	4f 5f       	subi	r20, 0xFF	; 255
    3362:	5f 4f       	sbci	r21, 0xFF	; 255
    3364:	57 d1       	rcall	.+686    	; 0x3614 <__ftoa_engine>
    3366:	79 81       	ldd	r23, Y+1	; 0x01
    3368:	27 2f       	mov	r18, r23
    336a:	29 70       	andi	r18, 0x09	; 9
    336c:	21 30       	cpi	r18, 0x01	; 1
    336e:	31 f0       	breq	.+12     	; 0x337c <dtoa_prf+0x62>
    3370:	e1 fc       	sbrc	r14, 1
    3372:	06 c0       	rjmp	.+12     	; 0x3380 <dtoa_prf+0x66>
    3374:	e0 fc       	sbrc	r14, 0
    3376:	06 c0       	rjmp	.+12     	; 0x3384 <dtoa_prf+0x6a>
    3378:	60 e0       	ldi	r22, 0x00	; 0
    337a:	05 c0       	rjmp	.+10     	; 0x3386 <dtoa_prf+0x6c>
    337c:	6d e2       	ldi	r22, 0x2D	; 45
    337e:	03 c0       	rjmp	.+6      	; 0x3386 <dtoa_prf+0x6c>
    3380:	6b e2       	ldi	r22, 0x2B	; 43
    3382:	01 c0       	rjmp	.+2      	; 0x3386 <dtoa_prf+0x6c>
    3384:	60 e2       	ldi	r22, 0x20	; 32
    3386:	ae 2d       	mov	r26, r14
    3388:	a0 71       	andi	r26, 0x10	; 16
    338a:	73 ff       	sbrs	r23, 3
    338c:	36 c0       	rjmp	.+108    	; 0x33fa <dtoa_prf+0xe0>
    338e:	66 23       	and	r22, r22
    3390:	11 f0       	breq	.+4      	; 0x3396 <dtoa_prf+0x7c>
    3392:	84 e0       	ldi	r24, 0x04	; 4
    3394:	01 c0       	rjmp	.+2      	; 0x3398 <dtoa_prf+0x7e>
    3396:	83 e0       	ldi	r24, 0x03	; 3
    3398:	8b 15       	cp	r24, r11
    339a:	10 f4       	brcc	.+4      	; 0x33a0 <dtoa_prf+0x86>
    339c:	b8 1a       	sub	r11, r24
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <dtoa_prf+0x88>
    33a0:	b1 2c       	mov	r11, r1
    33a2:	a1 11       	cpse	r26, r1
    33a4:	0b c0       	rjmp	.+22     	; 0x33bc <dtoa_prf+0xa2>
    33a6:	f6 01       	movw	r30, r12
    33a8:	8b 2d       	mov	r24, r11
    33aa:	90 e2       	ldi	r25, 0x20	; 32
    33ac:	88 23       	and	r24, r24
    33ae:	19 f0       	breq	.+6      	; 0x33b6 <dtoa_prf+0x9c>
    33b0:	91 93       	st	Z+, r25
    33b2:	81 50       	subi	r24, 0x01	; 1
    33b4:	fb cf       	rjmp	.-10     	; 0x33ac <dtoa_prf+0x92>
    33b6:	cb 0c       	add	r12, r11
    33b8:	d1 1c       	adc	r13, r1
    33ba:	b1 2c       	mov	r11, r1
    33bc:	66 23       	and	r22, r22
    33be:	31 f0       	breq	.+12     	; 0x33cc <dtoa_prf+0xb2>
    33c0:	f6 01       	movw	r30, r12
    33c2:	60 83       	st	Z, r22
    33c4:	96 01       	movw	r18, r12
    33c6:	2f 5f       	subi	r18, 0xFF	; 255
    33c8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ca:	69 01       	movw	r12, r18
    33cc:	c6 01       	movw	r24, r12
    33ce:	03 96       	adiw	r24, 0x03	; 3
    33d0:	e2 fe       	sbrs	r14, 2
    33d2:	05 c0       	rjmp	.+10     	; 0x33de <dtoa_prf+0xc4>
    33d4:	2e e4       	ldi	r18, 0x4E	; 78
    33d6:	f6 01       	movw	r30, r12
    33d8:	20 83       	st	Z, r18
    33da:	31 e4       	ldi	r19, 0x41	; 65
    33dc:	04 c0       	rjmp	.+8      	; 0x33e6 <dtoa_prf+0xcc>
    33de:	2e e6       	ldi	r18, 0x6E	; 110
    33e0:	f6 01       	movw	r30, r12
    33e2:	20 83       	st	Z, r18
    33e4:	31 e6       	ldi	r19, 0x61	; 97
    33e6:	31 83       	std	Z+1, r19	; 0x01
    33e8:	22 83       	std	Z+2, r18	; 0x02
    33ea:	fc 01       	movw	r30, r24
    33ec:	2b 2d       	mov	r18, r11
    33ee:	30 e2       	ldi	r19, 0x20	; 32
    33f0:	22 23       	and	r18, r18
    33f2:	f1 f1       	breq	.+124    	; 0x3470 <dtoa_prf+0x156>
    33f4:	31 93       	st	Z+, r19
    33f6:	21 50       	subi	r18, 0x01	; 1
    33f8:	fb cf       	rjmp	.-10     	; 0x33f0 <dtoa_prf+0xd6>
    33fa:	72 ff       	sbrs	r23, 2
    33fc:	40 c0       	rjmp	.+128    	; 0x347e <dtoa_prf+0x164>
    33fe:	66 23       	and	r22, r22
    3400:	11 f0       	breq	.+4      	; 0x3406 <dtoa_prf+0xec>
    3402:	84 e0       	ldi	r24, 0x04	; 4
    3404:	01 c0       	rjmp	.+2      	; 0x3408 <dtoa_prf+0xee>
    3406:	83 e0       	ldi	r24, 0x03	; 3
    3408:	8b 15       	cp	r24, r11
    340a:	10 f4       	brcc	.+4      	; 0x3410 <dtoa_prf+0xf6>
    340c:	b8 1a       	sub	r11, r24
    340e:	01 c0       	rjmp	.+2      	; 0x3412 <dtoa_prf+0xf8>
    3410:	b1 2c       	mov	r11, r1
    3412:	a1 11       	cpse	r26, r1
    3414:	0b c0       	rjmp	.+22     	; 0x342c <dtoa_prf+0x112>
    3416:	f6 01       	movw	r30, r12
    3418:	8b 2d       	mov	r24, r11
    341a:	90 e2       	ldi	r25, 0x20	; 32
    341c:	88 23       	and	r24, r24
    341e:	19 f0       	breq	.+6      	; 0x3426 <dtoa_prf+0x10c>
    3420:	91 93       	st	Z+, r25
    3422:	81 50       	subi	r24, 0x01	; 1
    3424:	fb cf       	rjmp	.-10     	; 0x341c <dtoa_prf+0x102>
    3426:	cb 0c       	add	r12, r11
    3428:	d1 1c       	adc	r13, r1
    342a:	b1 2c       	mov	r11, r1
    342c:	66 23       	and	r22, r22
    342e:	31 f0       	breq	.+12     	; 0x343c <dtoa_prf+0x122>
    3430:	f6 01       	movw	r30, r12
    3432:	60 83       	st	Z, r22
    3434:	96 01       	movw	r18, r12
    3436:	2f 5f       	subi	r18, 0xFF	; 255
    3438:	3f 4f       	sbci	r19, 0xFF	; 255
    343a:	69 01       	movw	r12, r18
    343c:	c6 01       	movw	r24, r12
    343e:	03 96       	adiw	r24, 0x03	; 3
    3440:	e2 fe       	sbrs	r14, 2
    3442:	07 c0       	rjmp	.+14     	; 0x3452 <dtoa_prf+0x138>
    3444:	29 e4       	ldi	r18, 0x49	; 73
    3446:	f6 01       	movw	r30, r12
    3448:	20 83       	st	Z, r18
    344a:	2e e4       	ldi	r18, 0x4E	; 78
    344c:	21 83       	std	Z+1, r18	; 0x01
    344e:	26 e4       	ldi	r18, 0x46	; 70
    3450:	06 c0       	rjmp	.+12     	; 0x345e <dtoa_prf+0x144>
    3452:	29 e6       	ldi	r18, 0x69	; 105
    3454:	f6 01       	movw	r30, r12
    3456:	20 83       	st	Z, r18
    3458:	2e e6       	ldi	r18, 0x6E	; 110
    345a:	21 83       	std	Z+1, r18	; 0x01
    345c:	26 e6       	ldi	r18, 0x66	; 102
    345e:	22 83       	std	Z+2, r18	; 0x02
    3460:	fc 01       	movw	r30, r24
    3462:	2b 2d       	mov	r18, r11
    3464:	30 e2       	ldi	r19, 0x20	; 32
    3466:	22 23       	and	r18, r18
    3468:	19 f0       	breq	.+6      	; 0x3470 <dtoa_prf+0x156>
    346a:	31 93       	st	Z+, r19
    346c:	21 50       	subi	r18, 0x01	; 1
    346e:	fb cf       	rjmp	.-10     	; 0x3466 <dtoa_prf+0x14c>
    3470:	fc 01       	movw	r30, r24
    3472:	eb 0d       	add	r30, r11
    3474:	f1 1d       	adc	r31, r1
    3476:	10 82       	st	Z, r1
    3478:	8e ef       	ldi	r24, 0xFE	; 254
    347a:	9f ef       	ldi	r25, 0xFF	; 255
    347c:	b7 c0       	rjmp	.+366    	; 0x35ec <dtoa_prf+0x2d2>
    347e:	b1 e0       	ldi	r27, 0x01	; 1
    3480:	61 11       	cpse	r22, r1
    3482:	01 c0       	rjmp	.+2      	; 0x3486 <dtoa_prf+0x16c>
    3484:	b0 e0       	ldi	r27, 0x00	; 0
    3486:	4b 2f       	mov	r20, r27
    3488:	50 e0       	ldi	r21, 0x00	; 0
    348a:	18 16       	cp	r1, r24
    348c:	19 06       	cpc	r1, r25
    348e:	24 f4       	brge	.+8      	; 0x3498 <dtoa_prf+0x17e>
    3490:	9c 01       	movw	r18, r24
    3492:	2f 5f       	subi	r18, 0xFF	; 255
    3494:	3f 4f       	sbci	r19, 0xFF	; 255
    3496:	02 c0       	rjmp	.+4      	; 0x349c <dtoa_prf+0x182>
    3498:	21 e0       	ldi	r18, 0x01	; 1
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	24 0f       	add	r18, r20
    349e:	35 1f       	adc	r19, r21
    34a0:	11 23       	and	r17, r17
    34a2:	29 f0       	breq	.+10     	; 0x34ae <dtoa_prf+0x194>
    34a4:	41 2f       	mov	r20, r17
    34a6:	50 e0       	ldi	r21, 0x00	; 0
    34a8:	4f 5f       	subi	r20, 0xFF	; 255
    34aa:	5f 4f       	sbci	r21, 0xFF	; 255
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <dtoa_prf+0x198>
    34ae:	40 e0       	ldi	r20, 0x00	; 0
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	42 0f       	add	r20, r18
    34b4:	53 1f       	adc	r21, r19
    34b6:	2b 2d       	mov	r18, r11
    34b8:	30 e0       	ldi	r19, 0x00	; 0
    34ba:	42 17       	cp	r20, r18
    34bc:	53 07       	cpc	r21, r19
    34be:	14 f4       	brge	.+4      	; 0x34c4 <dtoa_prf+0x1aa>
    34c0:	b4 1a       	sub	r11, r20
    34c2:	01 c0       	rjmp	.+2      	; 0x34c6 <dtoa_prf+0x1ac>
    34c4:	b1 2c       	mov	r11, r1
    34c6:	2e 2d       	mov	r18, r14
    34c8:	28 71       	andi	r18, 0x18	; 24
    34ca:	59 f4       	brne	.+22     	; 0x34e2 <dtoa_prf+0x1c8>
    34cc:	f6 01       	movw	r30, r12
    34ce:	2b 2d       	mov	r18, r11
    34d0:	30 e2       	ldi	r19, 0x20	; 32
    34d2:	22 23       	and	r18, r18
    34d4:	19 f0       	breq	.+6      	; 0x34dc <dtoa_prf+0x1c2>
    34d6:	31 93       	st	Z+, r19
    34d8:	21 50       	subi	r18, 0x01	; 1
    34da:	fb cf       	rjmp	.-10     	; 0x34d2 <dtoa_prf+0x1b8>
    34dc:	cb 0c       	add	r12, r11
    34de:	d1 1c       	adc	r13, r1
    34e0:	b1 2c       	mov	r11, r1
    34e2:	bb 23       	and	r27, r27
    34e4:	31 f0       	breq	.+12     	; 0x34f2 <dtoa_prf+0x1d8>
    34e6:	f6 01       	movw	r30, r12
    34e8:	60 83       	st	Z, r22
    34ea:	96 01       	movw	r18, r12
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	69 01       	movw	r12, r18
    34f2:	a1 11       	cpse	r26, r1
    34f4:	0b c0       	rjmp	.+22     	; 0x350c <dtoa_prf+0x1f2>
    34f6:	f6 01       	movw	r30, r12
    34f8:	2b 2d       	mov	r18, r11
    34fa:	30 e3       	ldi	r19, 0x30	; 48
    34fc:	22 23       	and	r18, r18
    34fe:	19 f0       	breq	.+6      	; 0x3506 <dtoa_prf+0x1ec>
    3500:	31 93       	st	Z+, r19
    3502:	21 50       	subi	r18, 0x01	; 1
    3504:	fb cf       	rjmp	.-10     	; 0x34fc <dtoa_prf+0x1e2>
    3506:	cb 0c       	add	r12, r11
    3508:	d1 1c       	adc	r13, r1
    350a:	b1 2c       	mov	r11, r1
    350c:	f8 0e       	add	r15, r24
    350e:	0a 81       	ldd	r16, Y+2	; 0x02
    3510:	37 2f       	mov	r19, r23
    3512:	30 71       	andi	r19, 0x10	; 16
    3514:	a3 2e       	mov	r10, r19
    3516:	74 ff       	sbrs	r23, 4
    3518:	03 c0       	rjmp	.+6      	; 0x3520 <dtoa_prf+0x206>
    351a:	01 33       	cpi	r16, 0x31	; 49
    351c:	09 f4       	brne	.+2      	; 0x3520 <dtoa_prf+0x206>
    351e:	fa 94       	dec	r15
    3520:	1f 14       	cp	r1, r15
    3522:	2c f4       	brge	.+10     	; 0x352e <dtoa_prf+0x214>
    3524:	2f 2d       	mov	r18, r15
    3526:	29 30       	cpi	r18, 0x09	; 9
    3528:	18 f0       	brcs	.+6      	; 0x3530 <dtoa_prf+0x216>
    352a:	28 e0       	ldi	r18, 0x08	; 8
    352c:	01 c0       	rjmp	.+2      	; 0x3530 <dtoa_prf+0x216>
    352e:	21 e0       	ldi	r18, 0x01	; 1
    3530:	68 2f       	mov	r22, r24
    3532:	39 2f       	mov	r19, r25
    3534:	97 ff       	sbrs	r25, 7
    3536:	02 c0       	rjmp	.+4      	; 0x353c <dtoa_prf+0x222>
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	46 2f       	mov	r20, r22
    353e:	53 2f       	mov	r21, r19
    3540:	61 2c       	mov	r6, r1
    3542:	71 2c       	mov	r7, r1
    3544:	3e e2       	ldi	r19, 0x2E	; 46
    3546:	93 2e       	mov	r9, r19
    3548:	bc 01       	movw	r22, r24
    354a:	62 1b       	sub	r22, r18
    354c:	71 09       	sbc	r23, r1
    354e:	9b 01       	movw	r18, r22
    3550:	dc 01       	movw	r26, r24
    3552:	a4 1b       	sub	r26, r20
    3554:	b5 0b       	sbc	r27, r21
    3556:	e1 e0       	ldi	r30, 0x01	; 1
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	ec 0f       	add	r30, r28
    355c:	fd 1f       	adc	r31, r29
    355e:	ae 0f       	add	r26, r30
    3560:	bf 1f       	adc	r27, r31
    3562:	e1 2e       	mov	r14, r17
    3564:	f1 2c       	mov	r15, r1
    3566:	f1 94       	neg	r15
    3568:	e1 94       	neg	r14
    356a:	f1 08       	sbc	r15, r1
    356c:	4f 3f       	cpi	r20, 0xFF	; 255
    356e:	ff ef       	ldi	r31, 0xFF	; 255
    3570:	5f 07       	cpc	r21, r31
    3572:	31 f4       	brne	.+12     	; 0x3580 <dtoa_prf+0x266>
    3574:	f6 01       	movw	r30, r12
    3576:	90 82       	st	Z, r9
    3578:	b6 01       	movw	r22, r12
    357a:	6f 5f       	subi	r22, 0xFF	; 255
    357c:	7f 4f       	sbci	r23, 0xFF	; 255
    357e:	6b 01       	movw	r12, r22
    3580:	84 17       	cp	r24, r20
    3582:	95 07       	cpc	r25, r21
    3584:	4c f0       	brlt	.+18     	; 0x3598 <dtoa_prf+0x27e>
    3586:	24 17       	cp	r18, r20
    3588:	35 07       	cpc	r19, r21
    358a:	34 f4       	brge	.+12     	; 0x3598 <dtoa_prf+0x27e>
    358c:	bd 01       	movw	r22, r26
    358e:	66 0d       	add	r22, r6
    3590:	77 1d       	adc	r23, r7
    3592:	fb 01       	movw	r30, r22
    3594:	11 81       	ldd	r17, Z+1	; 0x01
    3596:	01 c0       	rjmp	.+2      	; 0x359a <dtoa_prf+0x280>
    3598:	10 e3       	ldi	r17, 0x30	; 48
    359a:	41 50       	subi	r20, 0x01	; 1
    359c:	51 09       	sbc	r21, r1
    359e:	ff ef       	ldi	r31, 0xFF	; 255
    35a0:	6f 1a       	sub	r6, r31
    35a2:	7f 0a       	sbc	r7, r31
    35a4:	b6 01       	movw	r22, r12
    35a6:	6f 5f       	subi	r22, 0xFF	; 255
    35a8:	7f 4f       	sbci	r23, 0xFF	; 255
    35aa:	4e 15       	cp	r20, r14
    35ac:	5f 05       	cpc	r21, r15
    35ae:	24 f0       	brlt	.+8      	; 0x35b8 <dtoa_prf+0x29e>
    35b0:	f6 01       	movw	r30, r12
    35b2:	10 83       	st	Z, r17
    35b4:	6b 01       	movw	r12, r22
    35b6:	da cf       	rjmp	.-76     	; 0x356c <dtoa_prf+0x252>
    35b8:	48 17       	cp	r20, r24
    35ba:	59 07       	cpc	r21, r25
    35bc:	39 f4       	brne	.+14     	; 0x35cc <dtoa_prf+0x2b2>
    35be:	06 33       	cpi	r16, 0x36	; 54
    35c0:	20 f4       	brcc	.+8      	; 0x35ca <dtoa_prf+0x2b0>
    35c2:	05 33       	cpi	r16, 0x35	; 53
    35c4:	19 f4       	brne	.+6      	; 0x35cc <dtoa_prf+0x2b2>
    35c6:	a1 10       	cpse	r10, r1
    35c8:	01 c0       	rjmp	.+2      	; 0x35cc <dtoa_prf+0x2b2>
    35ca:	11 e3       	ldi	r17, 0x31	; 49
    35cc:	f6 01       	movw	r30, r12
    35ce:	10 83       	st	Z, r17
    35d0:	fb 01       	movw	r30, r22
    35d2:	8b 2d       	mov	r24, r11
    35d4:	90 e2       	ldi	r25, 0x20	; 32
    35d6:	88 23       	and	r24, r24
    35d8:	19 f0       	breq	.+6      	; 0x35e0 <dtoa_prf+0x2c6>
    35da:	91 93       	st	Z+, r25
    35dc:	81 50       	subi	r24, 0x01	; 1
    35de:	fb cf       	rjmp	.-10     	; 0x35d6 <dtoa_prf+0x2bc>
    35e0:	fb 01       	movw	r30, r22
    35e2:	eb 0d       	add	r30, r11
    35e4:	f1 1d       	adc	r31, r1
    35e6:	10 82       	st	Z, r1
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	29 96       	adiw	r28, 0x09	; 9
    35ee:	0f b6       	in	r0, 0x3f	; 63
    35f0:	f8 94       	cli
    35f2:	de bf       	out	0x3e, r29	; 62
    35f4:	0f be       	out	0x3f, r0	; 63
    35f6:	cd bf       	out	0x3d, r28	; 61
    35f8:	df 91       	pop	r29
    35fa:	cf 91       	pop	r28
    35fc:	1f 91       	pop	r17
    35fe:	0f 91       	pop	r16
    3600:	ff 90       	pop	r15
    3602:	ef 90       	pop	r14
    3604:	df 90       	pop	r13
    3606:	cf 90       	pop	r12
    3608:	bf 90       	pop	r11
    360a:	af 90       	pop	r10
    360c:	9f 90       	pop	r9
    360e:	7f 90       	pop	r7
    3610:	6f 90       	pop	r6
    3612:	08 95       	ret

00003614 <__ftoa_engine>:
    3614:	28 30       	cpi	r18, 0x08	; 8
    3616:	08 f0       	brcs	.+2      	; 0x361a <__ftoa_engine+0x6>
    3618:	27 e0       	ldi	r18, 0x07	; 7
    361a:	33 27       	eor	r19, r19
    361c:	da 01       	movw	r26, r20
    361e:	99 0f       	add	r25, r25
    3620:	31 1d       	adc	r19, r1
    3622:	87 fd       	sbrc	r24, 7
    3624:	91 60       	ori	r25, 0x01	; 1
    3626:	00 96       	adiw	r24, 0x00	; 0
    3628:	61 05       	cpc	r22, r1
    362a:	71 05       	cpc	r23, r1
    362c:	39 f4       	brne	.+14     	; 0x363c <__ftoa_engine+0x28>
    362e:	32 60       	ori	r19, 0x02	; 2
    3630:	2e 5f       	subi	r18, 0xFE	; 254
    3632:	3d 93       	st	X+, r19
    3634:	30 e3       	ldi	r19, 0x30	; 48
    3636:	2a 95       	dec	r18
    3638:	e1 f7       	brne	.-8      	; 0x3632 <__ftoa_engine+0x1e>
    363a:	08 95       	ret
    363c:	9f 3f       	cpi	r25, 0xFF	; 255
    363e:	30 f0       	brcs	.+12     	; 0x364c <__ftoa_engine+0x38>
    3640:	80 38       	cpi	r24, 0x80	; 128
    3642:	71 05       	cpc	r23, r1
    3644:	61 05       	cpc	r22, r1
    3646:	09 f0       	breq	.+2      	; 0x364a <__ftoa_engine+0x36>
    3648:	3c 5f       	subi	r19, 0xFC	; 252
    364a:	3c 5f       	subi	r19, 0xFC	; 252
    364c:	3d 93       	st	X+, r19
    364e:	91 30       	cpi	r25, 0x01	; 1
    3650:	08 f0       	brcs	.+2      	; 0x3654 <__ftoa_engine+0x40>
    3652:	80 68       	ori	r24, 0x80	; 128
    3654:	91 1d       	adc	r25, r1
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	1f 93       	push	r17
    365c:	0f 93       	push	r16
    365e:	ff 92       	push	r15
    3660:	ef 92       	push	r14
    3662:	19 2f       	mov	r17, r25
    3664:	98 7f       	andi	r25, 0xF8	; 248
    3666:	96 95       	lsr	r25
    3668:	e9 2f       	mov	r30, r25
    366a:	96 95       	lsr	r25
    366c:	96 95       	lsr	r25
    366e:	e9 0f       	add	r30, r25
    3670:	ff 27       	eor	r31, r31
    3672:	e7 5d       	subi	r30, 0xD7	; 215
    3674:	fb 4f       	sbci	r31, 0xFB	; 251
    3676:	99 27       	eor	r25, r25
    3678:	33 27       	eor	r19, r19
    367a:	ee 24       	eor	r14, r14
    367c:	ff 24       	eor	r15, r15
    367e:	a7 01       	movw	r20, r14
    3680:	e7 01       	movw	r28, r14
    3682:	05 90       	lpm	r0, Z+
    3684:	08 94       	sec
    3686:	07 94       	ror	r0
    3688:	28 f4       	brcc	.+10     	; 0x3694 <__ftoa_engine+0x80>
    368a:	36 0f       	add	r19, r22
    368c:	e7 1e       	adc	r14, r23
    368e:	f8 1e       	adc	r15, r24
    3690:	49 1f       	adc	r20, r25
    3692:	51 1d       	adc	r21, r1
    3694:	66 0f       	add	r22, r22
    3696:	77 1f       	adc	r23, r23
    3698:	88 1f       	adc	r24, r24
    369a:	99 1f       	adc	r25, r25
    369c:	06 94       	lsr	r0
    369e:	a1 f7       	brne	.-24     	; 0x3688 <__ftoa_engine+0x74>
    36a0:	05 90       	lpm	r0, Z+
    36a2:	07 94       	ror	r0
    36a4:	28 f4       	brcc	.+10     	; 0x36b0 <__ftoa_engine+0x9c>
    36a6:	e7 0e       	add	r14, r23
    36a8:	f8 1e       	adc	r15, r24
    36aa:	49 1f       	adc	r20, r25
    36ac:	56 1f       	adc	r21, r22
    36ae:	c1 1d       	adc	r28, r1
    36b0:	77 0f       	add	r23, r23
    36b2:	88 1f       	adc	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	66 1f       	adc	r22, r22
    36b8:	06 94       	lsr	r0
    36ba:	a1 f7       	brne	.-24     	; 0x36a4 <__ftoa_engine+0x90>
    36bc:	05 90       	lpm	r0, Z+
    36be:	07 94       	ror	r0
    36c0:	28 f4       	brcc	.+10     	; 0x36cc <__ftoa_engine+0xb8>
    36c2:	f8 0e       	add	r15, r24
    36c4:	49 1f       	adc	r20, r25
    36c6:	56 1f       	adc	r21, r22
    36c8:	c7 1f       	adc	r28, r23
    36ca:	d1 1d       	adc	r29, r1
    36cc:	88 0f       	add	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	66 1f       	adc	r22, r22
    36d2:	77 1f       	adc	r23, r23
    36d4:	06 94       	lsr	r0
    36d6:	a1 f7       	brne	.-24     	; 0x36c0 <__ftoa_engine+0xac>
    36d8:	05 90       	lpm	r0, Z+
    36da:	07 94       	ror	r0
    36dc:	20 f4       	brcc	.+8      	; 0x36e6 <__ftoa_engine+0xd2>
    36de:	49 0f       	add	r20, r25
    36e0:	56 1f       	adc	r21, r22
    36e2:	c7 1f       	adc	r28, r23
    36e4:	d8 1f       	adc	r29, r24
    36e6:	99 0f       	add	r25, r25
    36e8:	66 1f       	adc	r22, r22
    36ea:	77 1f       	adc	r23, r23
    36ec:	88 1f       	adc	r24, r24
    36ee:	06 94       	lsr	r0
    36f0:	a9 f7       	brne	.-22     	; 0x36dc <__ftoa_engine+0xc8>
    36f2:	84 91       	lpm	r24, Z
    36f4:	10 95       	com	r17
    36f6:	17 70       	andi	r17, 0x07	; 7
    36f8:	41 f0       	breq	.+16     	; 0x370a <__ftoa_engine+0xf6>
    36fa:	d6 95       	lsr	r29
    36fc:	c7 95       	ror	r28
    36fe:	57 95       	ror	r21
    3700:	47 95       	ror	r20
    3702:	f7 94       	ror	r15
    3704:	e7 94       	ror	r14
    3706:	1a 95       	dec	r17
    3708:	c1 f7       	brne	.-16     	; 0x36fa <__ftoa_engine+0xe6>
    370a:	ef ec       	ldi	r30, 0xCF	; 207
    370c:	f3 e0       	ldi	r31, 0x03	; 3
    370e:	68 94       	set
    3710:	15 90       	lpm	r1, Z+
    3712:	15 91       	lpm	r17, Z+
    3714:	35 91       	lpm	r19, Z+
    3716:	65 91       	lpm	r22, Z+
    3718:	95 91       	lpm	r25, Z+
    371a:	05 90       	lpm	r0, Z+
    371c:	7f e2       	ldi	r23, 0x2F	; 47
    371e:	73 95       	inc	r23
    3720:	e1 18       	sub	r14, r1
    3722:	f1 0a       	sbc	r15, r17
    3724:	43 0b       	sbc	r20, r19
    3726:	56 0b       	sbc	r21, r22
    3728:	c9 0b       	sbc	r28, r25
    372a:	d0 09       	sbc	r29, r0
    372c:	c0 f7       	brcc	.-16     	; 0x371e <__ftoa_engine+0x10a>
    372e:	e1 0c       	add	r14, r1
    3730:	f1 1e       	adc	r15, r17
    3732:	43 1f       	adc	r20, r19
    3734:	56 1f       	adc	r21, r22
    3736:	c9 1f       	adc	r28, r25
    3738:	d0 1d       	adc	r29, r0
    373a:	7e f4       	brtc	.+30     	; 0x375a <__ftoa_engine+0x146>
    373c:	70 33       	cpi	r23, 0x30	; 48
    373e:	11 f4       	brne	.+4      	; 0x3744 <__ftoa_engine+0x130>
    3740:	8a 95       	dec	r24
    3742:	e6 cf       	rjmp	.-52     	; 0x3710 <__ftoa_engine+0xfc>
    3744:	e8 94       	clt
    3746:	01 50       	subi	r16, 0x01	; 1
    3748:	30 f0       	brcs	.+12     	; 0x3756 <__ftoa_engine+0x142>
    374a:	08 0f       	add	r16, r24
    374c:	0a f4       	brpl	.+2      	; 0x3750 <__ftoa_engine+0x13c>
    374e:	00 27       	eor	r16, r16
    3750:	02 17       	cp	r16, r18
    3752:	08 f4       	brcc	.+2      	; 0x3756 <__ftoa_engine+0x142>
    3754:	20 2f       	mov	r18, r16
    3756:	23 95       	inc	r18
    3758:	02 2f       	mov	r16, r18
    375a:	7a 33       	cpi	r23, 0x3A	; 58
    375c:	28 f0       	brcs	.+10     	; 0x3768 <__ftoa_engine+0x154>
    375e:	79 e3       	ldi	r23, 0x39	; 57
    3760:	7d 93       	st	X+, r23
    3762:	2a 95       	dec	r18
    3764:	e9 f7       	brne	.-6      	; 0x3760 <__ftoa_engine+0x14c>
    3766:	10 c0       	rjmp	.+32     	; 0x3788 <__ftoa_engine+0x174>
    3768:	7d 93       	st	X+, r23
    376a:	2a 95       	dec	r18
    376c:	89 f6       	brne	.-94     	; 0x3710 <__ftoa_engine+0xfc>
    376e:	06 94       	lsr	r0
    3770:	97 95       	ror	r25
    3772:	67 95       	ror	r22
    3774:	37 95       	ror	r19
    3776:	17 95       	ror	r17
    3778:	17 94       	ror	r1
    377a:	e1 18       	sub	r14, r1
    377c:	f1 0a       	sbc	r15, r17
    377e:	43 0b       	sbc	r20, r19
    3780:	56 0b       	sbc	r21, r22
    3782:	c9 0b       	sbc	r28, r25
    3784:	d0 09       	sbc	r29, r0
    3786:	98 f0       	brcs	.+38     	; 0x37ae <__ftoa_engine+0x19a>
    3788:	23 95       	inc	r18
    378a:	7e 91       	ld	r23, -X
    378c:	73 95       	inc	r23
    378e:	7a 33       	cpi	r23, 0x3A	; 58
    3790:	08 f0       	brcs	.+2      	; 0x3794 <__ftoa_engine+0x180>
    3792:	70 e3       	ldi	r23, 0x30	; 48
    3794:	7c 93       	st	X, r23
    3796:	20 13       	cpse	r18, r16
    3798:	b8 f7       	brcc	.-18     	; 0x3788 <__ftoa_engine+0x174>
    379a:	7e 91       	ld	r23, -X
    379c:	70 61       	ori	r23, 0x10	; 16
    379e:	7d 93       	st	X+, r23
    37a0:	30 f0       	brcs	.+12     	; 0x37ae <__ftoa_engine+0x19a>
    37a2:	83 95       	inc	r24
    37a4:	71 e3       	ldi	r23, 0x31	; 49
    37a6:	7d 93       	st	X+, r23
    37a8:	70 e3       	ldi	r23, 0x30	; 48
    37aa:	2a 95       	dec	r18
    37ac:	e1 f7       	brne	.-8      	; 0x37a6 <__ftoa_engine+0x192>
    37ae:	11 24       	eor	r1, r1
    37b0:	ef 90       	pop	r14
    37b2:	ff 90       	pop	r15
    37b4:	0f 91       	pop	r16
    37b6:	1f 91       	pop	r17
    37b8:	cf 91       	pop	r28
    37ba:	df 91       	pop	r29
    37bc:	99 27       	eor	r25, r25
    37be:	87 fd       	sbrc	r24, 7
    37c0:	90 95       	com	r25
    37c2:	08 95       	ret

000037c4 <__ctype_isfalse>:
    37c4:	99 27       	eor	r25, r25
    37c6:	88 27       	eor	r24, r24

000037c8 <__ctype_istrue>:
    37c8:	08 95       	ret

000037ca <strnlen_P>:
    37ca:	fc 01       	movw	r30, r24
    37cc:	05 90       	lpm	r0, Z+
    37ce:	61 50       	subi	r22, 0x01	; 1
    37d0:	70 40       	sbci	r23, 0x00	; 0
    37d2:	01 10       	cpse	r0, r1
    37d4:	d8 f7       	brcc	.-10     	; 0x37cc <strnlen_P+0x2>
    37d6:	80 95       	com	r24
    37d8:	90 95       	com	r25
    37da:	8e 0f       	add	r24, r30
    37dc:	9f 1f       	adc	r25, r31
    37de:	08 95       	ret

000037e0 <strnlen>:
    37e0:	fc 01       	movw	r30, r24
    37e2:	61 50       	subi	r22, 0x01	; 1
    37e4:	70 40       	sbci	r23, 0x00	; 0
    37e6:	01 90       	ld	r0, Z+
    37e8:	01 10       	cpse	r0, r1
    37ea:	d8 f7       	brcc	.-10     	; 0x37e2 <strnlen+0x2>
    37ec:	80 95       	com	r24
    37ee:	90 95       	com	r25
    37f0:	8e 0f       	add	r24, r30
    37f2:	9f 1f       	adc	r25, r31
    37f4:	08 95       	ret

000037f6 <fputc>:
    37f6:	0f 93       	push	r16
    37f8:	1f 93       	push	r17
    37fa:	cf 93       	push	r28
    37fc:	df 93       	push	r29
    37fe:	18 2f       	mov	r17, r24
    3800:	09 2f       	mov	r16, r25
    3802:	eb 01       	movw	r28, r22
    3804:	8b 81       	ldd	r24, Y+3	; 0x03
    3806:	81 fd       	sbrc	r24, 1
    3808:	03 c0       	rjmp	.+6      	; 0x3810 <fputc+0x1a>
    380a:	8f ef       	ldi	r24, 0xFF	; 255
    380c:	9f ef       	ldi	r25, 0xFF	; 255
    380e:	20 c0       	rjmp	.+64     	; 0x3850 <fputc+0x5a>
    3810:	82 ff       	sbrs	r24, 2
    3812:	10 c0       	rjmp	.+32     	; 0x3834 <fputc+0x3e>
    3814:	4e 81       	ldd	r20, Y+6	; 0x06
    3816:	5f 81       	ldd	r21, Y+7	; 0x07
    3818:	2c 81       	ldd	r18, Y+4	; 0x04
    381a:	3d 81       	ldd	r19, Y+5	; 0x05
    381c:	42 17       	cp	r20, r18
    381e:	53 07       	cpc	r21, r19
    3820:	7c f4       	brge	.+30     	; 0x3840 <fputc+0x4a>
    3822:	e8 81       	ld	r30, Y
    3824:	f9 81       	ldd	r31, Y+1	; 0x01
    3826:	9f 01       	movw	r18, r30
    3828:	2f 5f       	subi	r18, 0xFF	; 255
    382a:	3f 4f       	sbci	r19, 0xFF	; 255
    382c:	39 83       	std	Y+1, r19	; 0x01
    382e:	28 83       	st	Y, r18
    3830:	10 83       	st	Z, r17
    3832:	06 c0       	rjmp	.+12     	; 0x3840 <fputc+0x4a>
    3834:	e8 85       	ldd	r30, Y+8	; 0x08
    3836:	f9 85       	ldd	r31, Y+9	; 0x09
    3838:	81 2f       	mov	r24, r17
    383a:	09 95       	icall
    383c:	89 2b       	or	r24, r25
    383e:	29 f7       	brne	.-54     	; 0x380a <fputc+0x14>
    3840:	2e 81       	ldd	r18, Y+6	; 0x06
    3842:	3f 81       	ldd	r19, Y+7	; 0x07
    3844:	2f 5f       	subi	r18, 0xFF	; 255
    3846:	3f 4f       	sbci	r19, 0xFF	; 255
    3848:	3f 83       	std	Y+7, r19	; 0x07
    384a:	2e 83       	std	Y+6, r18	; 0x06
    384c:	81 2f       	mov	r24, r17
    384e:	90 2f       	mov	r25, r16
    3850:	df 91       	pop	r29
    3852:	cf 91       	pop	r28
    3854:	1f 91       	pop	r17
    3856:	0f 91       	pop	r16
    3858:	08 95       	ret

0000385a <__ultoa_invert>:
    385a:	fa 01       	movw	r30, r20
    385c:	aa 27       	eor	r26, r26
    385e:	28 30       	cpi	r18, 0x08	; 8
    3860:	51 f1       	breq	.+84     	; 0x38b6 <__ultoa_invert+0x5c>
    3862:	20 31       	cpi	r18, 0x10	; 16
    3864:	81 f1       	breq	.+96     	; 0x38c6 <__ultoa_invert+0x6c>
    3866:	e8 94       	clt
    3868:	6f 93       	push	r22
    386a:	6e 7f       	andi	r22, 0xFE	; 254
    386c:	6e 5f       	subi	r22, 0xFE	; 254
    386e:	7f 4f       	sbci	r23, 0xFF	; 255
    3870:	8f 4f       	sbci	r24, 0xFF	; 255
    3872:	9f 4f       	sbci	r25, 0xFF	; 255
    3874:	af 4f       	sbci	r26, 0xFF	; 255
    3876:	b1 e0       	ldi	r27, 0x01	; 1
    3878:	3e d0       	rcall	.+124    	; 0x38f6 <__ultoa_invert+0x9c>
    387a:	b4 e0       	ldi	r27, 0x04	; 4
    387c:	3c d0       	rcall	.+120    	; 0x38f6 <__ultoa_invert+0x9c>
    387e:	67 0f       	add	r22, r23
    3880:	78 1f       	adc	r23, r24
    3882:	89 1f       	adc	r24, r25
    3884:	9a 1f       	adc	r25, r26
    3886:	a1 1d       	adc	r26, r1
    3888:	68 0f       	add	r22, r24
    388a:	79 1f       	adc	r23, r25
    388c:	8a 1f       	adc	r24, r26
    388e:	91 1d       	adc	r25, r1
    3890:	a1 1d       	adc	r26, r1
    3892:	6a 0f       	add	r22, r26
    3894:	71 1d       	adc	r23, r1
    3896:	81 1d       	adc	r24, r1
    3898:	91 1d       	adc	r25, r1
    389a:	a1 1d       	adc	r26, r1
    389c:	20 d0       	rcall	.+64     	; 0x38de <__ultoa_invert+0x84>
    389e:	09 f4       	brne	.+2      	; 0x38a2 <__ultoa_invert+0x48>
    38a0:	68 94       	set
    38a2:	3f 91       	pop	r19
    38a4:	2a e0       	ldi	r18, 0x0A	; 10
    38a6:	26 9f       	mul	r18, r22
    38a8:	11 24       	eor	r1, r1
    38aa:	30 19       	sub	r19, r0
    38ac:	30 5d       	subi	r19, 0xD0	; 208
    38ae:	31 93       	st	Z+, r19
    38b0:	de f6       	brtc	.-74     	; 0x3868 <__ultoa_invert+0xe>
    38b2:	cf 01       	movw	r24, r30
    38b4:	08 95       	ret
    38b6:	46 2f       	mov	r20, r22
    38b8:	47 70       	andi	r20, 0x07	; 7
    38ba:	40 5d       	subi	r20, 0xD0	; 208
    38bc:	41 93       	st	Z+, r20
    38be:	b3 e0       	ldi	r27, 0x03	; 3
    38c0:	0f d0       	rcall	.+30     	; 0x38e0 <__ultoa_invert+0x86>
    38c2:	c9 f7       	brne	.-14     	; 0x38b6 <__ultoa_invert+0x5c>
    38c4:	f6 cf       	rjmp	.-20     	; 0x38b2 <__ultoa_invert+0x58>
    38c6:	46 2f       	mov	r20, r22
    38c8:	4f 70       	andi	r20, 0x0F	; 15
    38ca:	40 5d       	subi	r20, 0xD0	; 208
    38cc:	4a 33       	cpi	r20, 0x3A	; 58
    38ce:	18 f0       	brcs	.+6      	; 0x38d6 <__ultoa_invert+0x7c>
    38d0:	49 5d       	subi	r20, 0xD9	; 217
    38d2:	31 fd       	sbrc	r19, 1
    38d4:	40 52       	subi	r20, 0x20	; 32
    38d6:	41 93       	st	Z+, r20
    38d8:	02 d0       	rcall	.+4      	; 0x38de <__ultoa_invert+0x84>
    38da:	a9 f7       	brne	.-22     	; 0x38c6 <__ultoa_invert+0x6c>
    38dc:	ea cf       	rjmp	.-44     	; 0x38b2 <__ultoa_invert+0x58>
    38de:	b4 e0       	ldi	r27, 0x04	; 4
    38e0:	a6 95       	lsr	r26
    38e2:	97 95       	ror	r25
    38e4:	87 95       	ror	r24
    38e6:	77 95       	ror	r23
    38e8:	67 95       	ror	r22
    38ea:	ba 95       	dec	r27
    38ec:	c9 f7       	brne	.-14     	; 0x38e0 <__ultoa_invert+0x86>
    38ee:	00 97       	sbiw	r24, 0x00	; 0
    38f0:	61 05       	cpc	r22, r1
    38f2:	71 05       	cpc	r23, r1
    38f4:	08 95       	ret
    38f6:	9b 01       	movw	r18, r22
    38f8:	ac 01       	movw	r20, r24
    38fa:	0a 2e       	mov	r0, r26
    38fc:	06 94       	lsr	r0
    38fe:	57 95       	ror	r21
    3900:	47 95       	ror	r20
    3902:	37 95       	ror	r19
    3904:	27 95       	ror	r18
    3906:	ba 95       	dec	r27
    3908:	c9 f7       	brne	.-14     	; 0x38fc <__ultoa_invert+0xa2>
    390a:	62 0f       	add	r22, r18
    390c:	73 1f       	adc	r23, r19
    390e:	84 1f       	adc	r24, r20
    3910:	95 1f       	adc	r25, r21
    3912:	a0 1d       	adc	r26, r0
    3914:	08 95       	ret

00003916 <__mulsi3>:
    3916:	db 01       	movw	r26, r22
    3918:	8f 93       	push	r24
    391a:	9f 93       	push	r25
    391c:	0b d0       	rcall	.+22     	; 0x3934 <__muluhisi3>
    391e:	bf 91       	pop	r27
    3920:	af 91       	pop	r26
    3922:	a2 9f       	mul	r26, r18
    3924:	80 0d       	add	r24, r0
    3926:	91 1d       	adc	r25, r1
    3928:	a3 9f       	mul	r26, r19
    392a:	90 0d       	add	r25, r0
    392c:	b2 9f       	mul	r27, r18
    392e:	90 0d       	add	r25, r0
    3930:	11 24       	eor	r1, r1
    3932:	08 95       	ret

00003934 <__muluhisi3>:
    3934:	40 d0       	rcall	.+128    	; 0x39b6 <__umulhisi3>
    3936:	a5 9f       	mul	r26, r21
    3938:	90 0d       	add	r25, r0
    393a:	b4 9f       	mul	r27, r20
    393c:	90 0d       	add	r25, r0
    393e:	a4 9f       	mul	r26, r20
    3940:	80 0d       	add	r24, r0
    3942:	91 1d       	adc	r25, r1
    3944:	11 24       	eor	r1, r1
    3946:	08 95       	ret

00003948 <__prologue_saves__>:
    3948:	2f 92       	push	r2
    394a:	3f 92       	push	r3
    394c:	4f 92       	push	r4
    394e:	5f 92       	push	r5
    3950:	6f 92       	push	r6
    3952:	7f 92       	push	r7
    3954:	8f 92       	push	r8
    3956:	9f 92       	push	r9
    3958:	af 92       	push	r10
    395a:	bf 92       	push	r11
    395c:	cf 92       	push	r12
    395e:	df 92       	push	r13
    3960:	ef 92       	push	r14
    3962:	ff 92       	push	r15
    3964:	0f 93       	push	r16
    3966:	1f 93       	push	r17
    3968:	cf 93       	push	r28
    396a:	df 93       	push	r29
    396c:	cd b7       	in	r28, 0x3d	; 61
    396e:	de b7       	in	r29, 0x3e	; 62
    3970:	ca 1b       	sub	r28, r26
    3972:	db 0b       	sbc	r29, r27
    3974:	0f b6       	in	r0, 0x3f	; 63
    3976:	f8 94       	cli
    3978:	de bf       	out	0x3e, r29	; 62
    397a:	0f be       	out	0x3f, r0	; 63
    397c:	cd bf       	out	0x3d, r28	; 61
    397e:	09 94       	ijmp

00003980 <__epilogue_restores__>:
    3980:	2a 88       	ldd	r2, Y+18	; 0x12
    3982:	39 88       	ldd	r3, Y+17	; 0x11
    3984:	48 88       	ldd	r4, Y+16	; 0x10
    3986:	5f 84       	ldd	r5, Y+15	; 0x0f
    3988:	6e 84       	ldd	r6, Y+14	; 0x0e
    398a:	7d 84       	ldd	r7, Y+13	; 0x0d
    398c:	8c 84       	ldd	r8, Y+12	; 0x0c
    398e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3990:	aa 84       	ldd	r10, Y+10	; 0x0a
    3992:	b9 84       	ldd	r11, Y+9	; 0x09
    3994:	c8 84       	ldd	r12, Y+8	; 0x08
    3996:	df 80       	ldd	r13, Y+7	; 0x07
    3998:	ee 80       	ldd	r14, Y+6	; 0x06
    399a:	fd 80       	ldd	r15, Y+5	; 0x05
    399c:	0c 81       	ldd	r16, Y+4	; 0x04
    399e:	1b 81       	ldd	r17, Y+3	; 0x03
    39a0:	aa 81       	ldd	r26, Y+2	; 0x02
    39a2:	b9 81       	ldd	r27, Y+1	; 0x01
    39a4:	ce 0f       	add	r28, r30
    39a6:	d1 1d       	adc	r29, r1
    39a8:	0f b6       	in	r0, 0x3f	; 63
    39aa:	f8 94       	cli
    39ac:	de bf       	out	0x3e, r29	; 62
    39ae:	0f be       	out	0x3f, r0	; 63
    39b0:	cd bf       	out	0x3d, r28	; 61
    39b2:	ed 01       	movw	r28, r26
    39b4:	08 95       	ret

000039b6 <__umulhisi3>:
    39b6:	a2 9f       	mul	r26, r18
    39b8:	b0 01       	movw	r22, r0
    39ba:	b3 9f       	mul	r27, r19
    39bc:	c0 01       	movw	r24, r0
    39be:	a3 9f       	mul	r26, r19
    39c0:	70 0d       	add	r23, r0
    39c2:	81 1d       	adc	r24, r1
    39c4:	11 24       	eor	r1, r1
    39c6:	91 1d       	adc	r25, r1
    39c8:	b2 9f       	mul	r27, r18
    39ca:	70 0d       	add	r23, r0
    39cc:	81 1d       	adc	r24, r1
    39ce:	11 24       	eor	r1, r1
    39d0:	91 1d       	adc	r25, r1
    39d2:	08 95       	ret

000039d4 <_exit>:
    39d4:	f8 94       	cli

000039d6 <__stop_program>:
    39d6:	ff cf       	rjmp	.-2      	; 0x39d6 <__stop_program>
